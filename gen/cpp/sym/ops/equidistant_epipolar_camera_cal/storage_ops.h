//  -----------------------------------------------------------------------------
// This file was autogenerated by symforce. Do NOT modify by hand.
// -----------------------------------------------------------------------------
#pragma once

#include <vector>

#include <Eigen/Dense>
#include <sym/equidistant_epipolar_camera_cal.h>

namespace sym {
namespace equidistant_epipolar_camera_cal {

/**
 * C++ StorageOps implementation for <class
 * 'symforce.cam.equidistant_epipolar_cal.EquidistantEpipolarCameraCal'>.
 */
template <typename Scalar>
struct StorageOps {
  static constexpr int32_t StorageDim() {
    return 4;
  }

  static void ToStorage(const sym::EquidistantEpipolarCameraCal<Scalar>& a, Scalar* const vec);
  static sym::EquidistantEpipolarCameraCal<Scalar> FromStorage(const Scalar* const vec);
};

}  // namespace equidistant_epipolar_camera_cal
}  // namespace sym

// Wrapper to specialize the public concept
namespace sym {

template <>
struct StorageOps<sym::EquidistantEpipolarCameraCal<double>>
    : public sym::equidistant_epipolar_camera_cal::StorageOps<double> {};
template <>
struct StorageOps<sym::EquidistantEpipolarCameraCal<float>>
    : public sym::equidistant_epipolar_camera_cal::StorageOps<float> {};

}  // namespace sym
