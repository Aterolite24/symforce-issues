//  -----------------------------------------------------------------------------
// This file was autogenerated by symforce. Do NOT modify by hand.
// -----------------------------------------------------------------------------
#pragma once

#include <sym/rot3.h>

#include <lcmtypes/symforce/type_t.hpp>

namespace sym {

/**
 * C++ StorageOps implementation for <class 'symforce.geo.rot3.Rot3'>.
 */
template <typename ScalarType>
struct StorageOps<Rot3<ScalarType>> {
  using Scalar = typename Rot3<ScalarType>::Scalar;

  static constexpr int32_t StorageDim() {
    return 4;
  }

  static void ToStorage(const Rot3<ScalarType>& a, ScalarType* out);
  static Rot3<ScalarType> FromStorage(const ScalarType* data);

  static symforce::type_t TypeEnum() {
    return symforce::type_t::ROT3;
  }

  template <typename Generator>
  static Rot3<Scalar> Random(Generator& gen) {
    return Rot3<ScalarType>::Random(gen);
  }
};

}  // namespace sym

// Explicit instantiation
extern template struct sym::StorageOps<sym::Rot3<double>>;
extern template struct sym::StorageOps<sym::Rot3<float>>;
