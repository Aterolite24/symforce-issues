//  ----------------------------------------------------------------------------
// This file was autogenerated by symforce. Do NOT modify by hand.
// -----------------------------------------------------------------------------

#include "./lie_group_ops.h"

#include <algorithm>
#include <cmath>

#include <sym/pose2.h>

namespace sym {
namespace pose2 {

template <typename Scalar>
sym::Pose2<Scalar> LieGroupOps<Scalar>::FromTangent(const Eigen::Matrix<Scalar, 3, 1>& vec,
                                                    const Scalar epsilon) {
  // Total ops: 2

  // Input arrays

  // Intermediate terms (0)

  // Output terms (1)
  Eigen::Matrix<Scalar, 4, 1> _res;

  _res[0] = std::cos(vec(2, 0));
  _res[1] = std::sin(vec(2, 0));
  _res[2] = vec(0, 0);
  _res[3] = vec(1, 0);

  return sym::Pose2<Scalar>(_res);
}

template <typename Scalar>
Eigen::Matrix<Scalar, 3, 1> LieGroupOps<Scalar>::ToTangent(const sym::Pose2<Scalar>& a,
                                                           const Scalar epsilon) {
  // Total ops: 1

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _a = a.Data();

  // Intermediate terms (0)

  // Output terms (1)
  Eigen::Matrix<Scalar, 3, 1> _res;

  _res(0, 0) = _a[2];
  _res(1, 0) = _a[3];
  _res(2, 0) = std::atan2(_a[1], _a[0]);

  return _res;
}

template <typename Scalar>
sym::Pose2<Scalar> LieGroupOps<Scalar>::Retract(const sym::Pose2<Scalar>& a,
                                                const Eigen::Matrix<Scalar, 3, 1>& vec,
                                                const Scalar epsilon) {
  // Total ops: 11

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _a = a.Data();

  // Intermediate terms (2)
  const Scalar _tmp0 = std::sin(vec(2, 0));
  const Scalar _tmp1 = std::cos(vec(2, 0));

  // Output terms (1)
  Eigen::Matrix<Scalar, 4, 1> _res;

  _res[0] = _a[0] * _tmp1 - _a[1] * _tmp0;
  _res[1] = _a[0] * _tmp0 + _a[1] * _tmp1;
  _res[2] = _a[2] + vec(0, 0);
  _res[3] = _a[3] + vec(1, 0);

  return sym::Pose2<Scalar>(_res);
}

template <typename Scalar>
Eigen::Matrix<Scalar, 3, 1> LieGroupOps<Scalar>::LocalCoordinates(const sym::Pose2<Scalar>& a,
                                                                  const sym::Pose2<Scalar>& b,
                                                                  const Scalar epsilon) {
  // Total ops: 18

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _a = a.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _b = b.Data();

  // Intermediate terms (3)
  const Scalar _tmp0 = 1.0 / (std::pow<Scalar>(_a[0], 2) + std::pow<Scalar>(_a[1], 2));
  const Scalar _tmp1 = _a[1] * _tmp0;
  const Scalar _tmp2 = _a[0] * _tmp0;

  // Output terms (1)
  Eigen::Matrix<Scalar, 3, 1> _res;

  _res(0, 0) = -_a[2] + _b[2];
  _res(1, 0) = -_a[3] + _b[3];
  _res(2, 0) = std::atan2(-_b[0] * _tmp1 + _b[1] * _tmp2, _b[0] * _tmp2 + _b[1] * _tmp1);

  return _res;
}

}  // namespace pose2
}  // namespace sym

// Explicit instantiation
template struct sym::pose2::LieGroupOps<double>;
template struct sym::pose2::LieGroupOps<float>;
