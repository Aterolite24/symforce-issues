// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     cpp_templates/cam_package/ops/CLASS/storage_ops.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <vector>

#include <Eigen/Dense>
#include <sym/double_sphere_camera_cal.h>

namespace sym {
namespace double_sphere_camera_cal {

/**
 * C++ StorageOps implementation for <class
 * 'symforce.cam.double_sphere_camera_cal.DoubleSphereCameraCal'>.
 */
template <typename Scalar>
struct StorageOps {
  static constexpr int32_t StorageDim() {
    return 6;
  }

  static void ToStorage(const sym::DoubleSphereCameraCal<Scalar>& a, Scalar* const vec);
  static sym::DoubleSphereCameraCal<Scalar> FromStorage(const Scalar* const vec);
};

}  // namespace double_sphere_camera_cal
}  // namespace sym

// Wrapper to specialize the public concept
namespace sym {

template <>
struct StorageOps<sym::DoubleSphereCameraCal<double>>
    : public sym::double_sphere_camera_cal::StorageOps<double> {};
template <>
struct StorageOps<sym::DoubleSphereCameraCal<float>>
    : public sym::double_sphere_camera_cal::StorageOps<float> {};

}  // namespace sym
