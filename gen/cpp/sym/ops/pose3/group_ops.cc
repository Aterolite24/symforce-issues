//  ----------------------------------------------------------------------------
// This file was autogenerated by symforce. Do NOT modify by hand.
// -----------------------------------------------------------------------------

#include "./group_ops.h"

namespace sym {
namespace pose3 {

/**
 *
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: <lambda>
 * Arg type(s):
 * Return type(s): Pose3
 *
 */
template <typename Scalar>
sym::Pose3<Scalar> GroupOps<Scalar>::Identity() {
  // Total ops: 0

  // Input arrays

  // Intermediate terms (0)

  // Output terms (1)
  Eigen::Matrix<Scalar, 7, 1> _res;

  _res[0] = 0;
  _res[1] = 0;
  _res[2] = 0;
  _res[3] = 1;
  _res[4] = 0;
  _res[5] = 0;
  _res[6] = 0;

  return sym::Pose3<Scalar>(_res);
}

/**
 *
 * Inverse of the element a.
 *
 * Returns:
 *     Element: b such that a @ b = identity
 *
 */
template <typename Scalar>
sym::Pose3<Scalar> GroupOps<Scalar>::Inverse(const sym::Pose3<Scalar>& a) {
  // Total ops: 50

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _a = a.Data();

  // Intermediate terms (11)
  const Scalar _tmp0 = 2 * _a[1] * _a[3];
  const Scalar _tmp1 = 2 * _a[0];
  const Scalar _tmp2 = _a[2] * _tmp1;
  const Scalar _tmp3 = 2 * _a[2];
  const Scalar _tmp4 = _a[3] * _tmp3;
  const Scalar _tmp5 = _a[1] * _tmp1;
  const Scalar _tmp6 = -2 * (_a[1] * _a[1]);
  const Scalar _tmp7 = 1 - 2 * (_a[2] * _a[2]);
  const Scalar _tmp8 = _a[3] * _tmp1;
  const Scalar _tmp9 = _a[1] * _tmp3;
  const Scalar _tmp10 = -2 * (_a[0] * _a[0]);

  // Output terms (1)
  Eigen::Matrix<Scalar, 7, 1> _res;

  _res[0] = -_a[0];
  _res[1] = -_a[1];
  _res[2] = -_a[2];
  _res[3] = _a[3];
  _res[4] = -_a[4] * (_tmp6 + _tmp7) - _a[5] * (_tmp4 + _tmp5) - _a[6] * (-_tmp0 + _tmp2);
  _res[5] = -_a[4] * (-_tmp4 + _tmp5) - _a[5] * (_tmp10 + _tmp7) - _a[6] * (_tmp8 + _tmp9);
  _res[6] = -_a[4] * (_tmp0 + _tmp2) - _a[5] * (-_tmp8 + _tmp9) - _a[6] * (_tmp10 + _tmp6 + 1);

  return sym::Pose3<Scalar>(_res);
}

/**
 *
 * Composition of two elements in the group.
 *
 * Returns:
 *     Element: a @ b
 *
 */
template <typename Scalar>
sym::Pose3<Scalar> GroupOps<Scalar>::Compose(const sym::Pose3<Scalar>& a,
                                             const sym::Pose3<Scalar>& b) {
  // Total ops: 79

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _a = a.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _b = b.Data();

  // Intermediate terms (11)
  const Scalar _tmp0 = 2 * _a[3];
  const Scalar _tmp1 = _a[1] * _tmp0;
  const Scalar _tmp2 = 2 * _a[2];
  const Scalar _tmp3 = _a[0] * _tmp2;
  const Scalar _tmp4 = _a[2] * _tmp0;
  const Scalar _tmp5 = 2 * _a[0] * _a[1];
  const Scalar _tmp6 = -2 * (_a[2] * _a[2]);
  const Scalar _tmp7 = -2 * (_a[1] * _a[1]);
  const Scalar _tmp8 = _a[0] * _tmp0;
  const Scalar _tmp9 = _a[1] * _tmp2;
  const Scalar _tmp10 = 1 - 2 * (_a[0] * _a[0]);

  // Output terms (1)
  Eigen::Matrix<Scalar, 7, 1> _res;

  _res[0] = _a[0] * _b[3] + _a[1] * _b[2] - _a[2] * _b[1] + _a[3] * _b[0];
  _res[1] = -_a[0] * _b[2] + _a[1] * _b[3] + _a[2] * _b[0] + _a[3] * _b[1];
  _res[2] = _a[0] * _b[1] - _a[1] * _b[0] + _a[2] * _b[3] + _a[3] * _b[2];
  _res[3] = -_a[0] * _b[0] - _a[1] * _b[1] - _a[2] * _b[2] + _a[3] * _b[3];
  _res[4] =
      _a[4] + _b[4] * (_tmp6 + _tmp7 + 1) + _b[5] * (-_tmp4 + _tmp5) + _b[6] * (_tmp1 + _tmp3);
  _res[5] = _a[5] + _b[4] * (_tmp4 + _tmp5) + _b[5] * (_tmp10 + _tmp6) + _b[6] * (-_tmp8 + _tmp9);
  _res[6] = _a[6] + _b[4] * (-_tmp1 + _tmp3) + _b[5] * (_tmp8 + _tmp9) + _b[6] * (_tmp10 + _tmp7);

  return sym::Pose3<Scalar>(_res);
}

/**
 *
 * Returns the element that when composed with a produces b. For vector spaces it is b - a.
 *
 * Implementation is simply `compose(inverse(a), b)`.
 *
 * Returns:
 *     Element: c such that a @ c = b
 *
 */
template <typename Scalar>
sym::Pose3<Scalar> GroupOps<Scalar>::Between(const sym::Pose3<Scalar>& a,
                                             const sym::Pose3<Scalar>& b) {
  // Total ops: 103

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _a = a.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _b = b.Data();

  // Intermediate terms (20)
  const Scalar _tmp0 = 2 * _a[1] * _a[3];
  const Scalar _tmp1 = 2 * _a[0];
  const Scalar _tmp2 = _a[2] * _tmp1;
  const Scalar _tmp3 = -_tmp0 + _tmp2;
  const Scalar _tmp4 = 2 * _a[2];
  const Scalar _tmp5 = _a[3] * _tmp4;
  const Scalar _tmp6 = _a[1] * _tmp1;
  const Scalar _tmp7 = _tmp5 + _tmp6;
  const Scalar _tmp8 = -2 * (_a[2] * _a[2]);
  const Scalar _tmp9 = -2 * (_a[1] * _a[1]);
  const Scalar _tmp10 = _tmp8 + _tmp9 + 1;
  const Scalar _tmp11 = _a[3] * _tmp1;
  const Scalar _tmp12 = _a[1] * _tmp4;
  const Scalar _tmp13 = _tmp11 + _tmp12;
  const Scalar _tmp14 = 1 - 2 * (_a[0] * _a[0]);
  const Scalar _tmp15 = _tmp14 + _tmp8;
  const Scalar _tmp16 = -_tmp5 + _tmp6;
  const Scalar _tmp17 = _tmp14 + _tmp9;
  const Scalar _tmp18 = -_tmp11 + _tmp12;
  const Scalar _tmp19 = _tmp0 + _tmp2;

  // Output terms (1)
  Eigen::Matrix<Scalar, 7, 1> _res;

  _res[0] = -_a[0] * _b[3] - _a[1] * _b[2] + _a[2] * _b[1] + _a[3] * _b[0];
  _res[1] = _a[0] * _b[2] - _a[1] * _b[3] - _a[2] * _b[0] + _a[3] * _b[1];
  _res[2] = -_a[0] * _b[1] + _a[1] * _b[0] - _a[2] * _b[3] + _a[3] * _b[2];
  _res[3] = _a[0] * _b[0] + _a[1] * _b[1] + _a[2] * _b[2] + _a[3] * _b[3];
  _res[4] = -_a[4] * _tmp10 - _a[5] * _tmp7 - _a[6] * _tmp3 + _b[4] * _tmp10 + _b[5] * _tmp7 +
            _b[6] * _tmp3;
  _res[5] = -_a[4] * _tmp16 - _a[5] * _tmp15 - _a[6] * _tmp13 + _b[4] * _tmp16 + _b[5] * _tmp15 +
            _b[6] * _tmp13;
  _res[6] = -_a[4] * _tmp19 - _a[5] * _tmp18 - _a[6] * _tmp17 + _b[4] * _tmp19 + _b[5] * _tmp18 +
            _b[6] * _tmp17;

  return sym::Pose3<Scalar>(_res);
}

/**
 *
 * Inverse of the element a.
 *
 * Returns:
 *     Element: b such that a @ b = identity
 *     geo.Matrix: Jacobian for arg 0 (a)
 */
template <typename Scalar>
sym::Pose3<Scalar> GroupOps<Scalar>::InverseWithJacobian(
    const sym::Pose3<Scalar>& a, Eigen::Matrix<Scalar, 6, 6>* const res_D_a) {
  // Total ops: 404

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _a = a.Data();

  // Intermediate terms (86)
  const Scalar _tmp0 = 2 * _a[3];
  const Scalar _tmp1 = _a[1] * _tmp0;
  const Scalar _tmp2 = -_tmp1;
  const Scalar _tmp3 = 2 * _a[0];
  const Scalar _tmp4 = _a[2] * _tmp3;
  const Scalar _tmp5 = _tmp2 + _tmp4;
  const Scalar _tmp6 = _a[2] * _tmp0;
  const Scalar _tmp7 = _a[1] * _tmp3;
  const Scalar _tmp8 = _tmp6 + _tmp7;
  const Scalar _tmp9 = (_a[1] * _a[1]);
  const Scalar _tmp10 = -2 * _tmp9;
  const Scalar _tmp11 = (_a[2] * _a[2]);
  const Scalar _tmp12 = 1 - 2 * _tmp11;
  const Scalar _tmp13 = _tmp10 + _tmp12;
  const Scalar _tmp14 = _a[3] * _tmp3;
  const Scalar _tmp15 = 2 * _a[2];
  const Scalar _tmp16 = _a[1] * _tmp15;
  const Scalar _tmp17 = _tmp14 + _tmp16;
  const Scalar _tmp18 = (_a[0] * _a[0]);
  const Scalar _tmp19 = -2 * _tmp18;
  const Scalar _tmp20 = _tmp12 + _tmp19;
  const Scalar _tmp21 = -_tmp6;
  const Scalar _tmp22 = _tmp21 + _tmp7;
  const Scalar _tmp23 = _tmp10 + _tmp19 + 1;
  const Scalar _tmp24 = -_tmp14;
  const Scalar _tmp25 = _tmp16 + _tmp24;
  const Scalar _tmp26 = _tmp1 + _tmp4;
  const Scalar _tmp27 = -(_a[3] * _a[3]);
  const Scalar _tmp28 = _tmp11 + _tmp27;
  const Scalar _tmp29 = -_tmp7;
  const Scalar _tmp30 = -_tmp4;
  const Scalar _tmp31 = -_tmp16;
  const Scalar _tmp32 = _a[4] * _tmp3;
  const Scalar _tmp33 = 2 * _a[1];
  const Scalar _tmp34 = _a[5] * _tmp33;
  const Scalar _tmp35 = _tmp32 + _tmp34;
  const Scalar _tmp36 = _a[4] * _tmp0;
  const Scalar _tmp37 = 4 * _a[5];
  const Scalar _tmp38 = _a[6] * _tmp33;
  const Scalar _tmp39 = -_a[2] * _tmp37 - _tmp36 + _tmp38;
  const Scalar _tmp40 = 4 * _a[4];
  const Scalar _tmp41 = _a[5] * _tmp0;
  const Scalar _tmp42 = _a[6] * _tmp3;
  const Scalar _tmp43 = -_a[2] * _tmp40 + _tmp41 + _tmp42;
  const Scalar _tmp44 = -_tmp13 * _tmp43 - _tmp22 * _tmp39 - _tmp26 * _tmp35;
  const Scalar _tmp45 = (1.0 / 2.0) * _a[1];
  const Scalar _tmp46 = _a[6] * _tmp15;
  const Scalar _tmp47 = _tmp32 + _tmp46;
  const Scalar _tmp48 = _a[5] * _tmp15;
  const Scalar _tmp49 = 4 * _a[6];
  const Scalar _tmp50 = -_a[1] * _tmp49 + _tmp36 + _tmp48;
  const Scalar _tmp51 = _a[5] * _tmp3;
  const Scalar _tmp52 = _a[6] * _tmp0;
  const Scalar _tmp53 = -_a[1] * _tmp40 + _tmp51 - _tmp52;
  const Scalar _tmp54 = -_tmp13 * _tmp53 - _tmp22 * _tmp47 - _tmp26 * _tmp50;
  const Scalar _tmp55 = (1.0 / 2.0) * _a[2];
  const Scalar _tmp56 = _a[4] * _tmp15;
  const Scalar _tmp57 = _tmp42 - _tmp56;
  const Scalar _tmp58 = _a[4] * _tmp33;
  const Scalar _tmp59 = -_tmp51 + _tmp58;
  const Scalar _tmp60 = -_tmp38 + _tmp48;
  const Scalar _tmp61 = -_tmp13 * _tmp60 - _tmp22 * _tmp57 - _tmp26 * _tmp59;
  const Scalar _tmp62 = (1.0 / 2.0) * _a[0];
  const Scalar _tmp63 = -_a[0] * _tmp49 - _tmp41 + _tmp56;
  const Scalar _tmp64 = -_a[0] * _tmp37 + _tmp52 + _tmp58;
  const Scalar _tmp65 = _tmp34 + _tmp46;
  const Scalar _tmp66 = -_tmp13 * _tmp65 - _tmp22 * _tmp64 - _tmp26 * _tmp63;
  const Scalar _tmp67 = (1.0 / 2.0) * _a[3];
  const Scalar _tmp68 = -_tmp13 * _tmp5 - _tmp17 * _tmp22 - _tmp23 * _tmp26;
  const Scalar _tmp69 = -_tmp13 * _tmp8 - _tmp20 * _tmp22 - _tmp25 * _tmp26;
  const Scalar _tmp70 = -(_tmp13 * _tmp13) - (_tmp22 * _tmp22) - (_tmp26 * _tmp26);
  const Scalar _tmp71 = -_tmp20 * _tmp57 - _tmp25 * _tmp59 - _tmp60 * _tmp8;
  const Scalar _tmp72 = (1.0 / 2.0) * _tmp71;
  const Scalar _tmp73 = -_tmp20 * _tmp39 - _tmp25 * _tmp35 - _tmp43 * _tmp8;
  const Scalar _tmp74 = -_tmp20 * _tmp47 - _tmp25 * _tmp50 - _tmp53 * _tmp8;
  const Scalar _tmp75 = -_tmp20 * _tmp64 - _tmp25 * _tmp63 - _tmp65 * _tmp8;
  const Scalar _tmp76 = (1.0 / 2.0) * _tmp75;
  const Scalar _tmp77 = -(_tmp20 * _tmp20) - (_tmp25 * _tmp25) - (_tmp8 * _tmp8);
  const Scalar _tmp78 = -_tmp17 * _tmp20 - _tmp23 * _tmp25 - _tmp5 * _tmp8;
  const Scalar _tmp79 =
      -1.0 / 2.0 * _tmp17 * _tmp57 - 1.0 / 2.0 * _tmp23 * _tmp59 - 1.0 / 2.0 * _tmp5 * _tmp60;
  const Scalar _tmp80 = -_tmp17 * _tmp39 - _tmp23 * _tmp35 - _tmp43 * _tmp5;
  const Scalar _tmp81 =
      -1.0 / 2.0 * _tmp17 * _tmp47 - 1.0 / 2.0 * _tmp23 * _tmp50 - 1.0 / 2.0 * _tmp5 * _tmp53;
  const Scalar _tmp82 = -_tmp17 * _tmp64 - _tmp23 * _tmp63 - _tmp5 * _tmp65;
  const Scalar _tmp83 = (1.0 / 2.0) * _tmp82;
  const Scalar _tmp84 = (1.0 / 2.0) * _tmp80;
  const Scalar _tmp85 = -(_tmp17 * _tmp17) - (_tmp23 * _tmp23) - (_tmp5 * _tmp5);

  // Output terms (2)
  Eigen::Matrix<Scalar, 7, 1> _res;

  _res[0] = -_a[0];
  _res[1] = -_a[1];
  _res[2] = -_a[2];
  _res[3] = _a[3];
  _res[4] = -_a[4] * _tmp13 - _a[5] * _tmp8 - _a[6] * _tmp5;
  _res[5] = -_a[4] * _tmp22 - _a[5] * _tmp20 - _a[6] * _tmp17;
  _res[6] = -_a[4] * _tmp26 - _a[5] * _tmp25 - _a[6] * _tmp23;

  if (res_D_a != nullptr) {
    Eigen::Matrix<Scalar, 6, 6>& _res_D_a = (*res_D_a);

    _res_D_a(0, 0) = -_tmp18 + _tmp28 + _tmp9;
    _res_D_a(0, 1) = _tmp29 + _tmp6;
    _res_D_a(0, 2) = _tmp2 + _tmp30;
    _res_D_a(0, 3) = 0;
    _res_D_a(0, 4) = 0;
    _res_D_a(0, 5) = 0;
    _res_D_a(1, 0) = _tmp21 + _tmp29;
    _res_D_a(1, 1) = _tmp18 + _tmp28 - _tmp9;
    _res_D_a(1, 2) = _tmp14 + _tmp31;
    _res_D_a(1, 3) = 0;
    _res_D_a(1, 4) = 0;
    _res_D_a(1, 5) = 0;
    _res_D_a(2, 0) = _tmp1 + _tmp30;
    _res_D_a(2, 1) = _tmp24 + _tmp31;
    _res_D_a(2, 2) = -_tmp11 + _tmp18 + _tmp27 + _tmp9;
    _res_D_a(2, 3) = 0;
    _res_D_a(2, 4) = 0;
    _res_D_a(2, 5) = 0;
    _res_D_a(3, 0) = -_tmp44 * _tmp45 + _tmp54 * _tmp55 - _tmp61 * _tmp62 + _tmp66 * _tmp67;
    _res_D_a(3, 1) = _tmp44 * _tmp62 - _tmp45 * _tmp61 + _tmp54 * _tmp67 - _tmp55 * _tmp66;
    _res_D_a(3, 2) = _tmp44 * _tmp67 + _tmp45 * _tmp66 - _tmp54 * _tmp62 - _tmp55 * _tmp61;
    _res_D_a(3, 3) = _tmp13 * _tmp70 + _tmp5 * _tmp68 + _tmp69 * _tmp8;
    _res_D_a(3, 4) = _tmp17 * _tmp68 + _tmp20 * _tmp69 + _tmp22 * _tmp70;
    _res_D_a(3, 5) = _tmp23 * _tmp68 + _tmp25 * _tmp69 + _tmp26 * _tmp70;
    _res_D_a(4, 0) = -_a[0] * _tmp72 + _a[3] * _tmp76 - _tmp45 * _tmp73 + _tmp55 * _tmp74;
    _res_D_a(4, 1) = -_a[2] * _tmp76 - _tmp45 * _tmp71 + _tmp62 * _tmp73 + _tmp67 * _tmp74;
    _res_D_a(4, 2) = -_a[2] * _tmp72 + _tmp45 * _tmp75 - _tmp62 * _tmp74 + _tmp67 * _tmp73;
    _res_D_a(4, 3) = _tmp13 * _tmp69 + _tmp5 * _tmp78 + _tmp77 * _tmp8;
    _res_D_a(4, 4) = _tmp17 * _tmp78 + _tmp20 * _tmp77 + _tmp22 * _tmp69;
    _res_D_a(4, 5) = _tmp23 * _tmp78 + _tmp25 * _tmp77 + _tmp26 * _tmp69;
    _res_D_a(5, 0) = -_a[0] * _tmp79 + _a[2] * _tmp81 + _a[3] * _tmp83 - _tmp45 * _tmp80;
    _res_D_a(5, 1) = _a[0] * _tmp84 - _a[1] * _tmp79 - _a[2] * _tmp83 + _a[3] * _tmp81;
    _res_D_a(5, 2) = -_a[0] * _tmp81 - _a[2] * _tmp79 + _a[3] * _tmp84 + _tmp45 * _tmp82;
    _res_D_a(5, 3) = _tmp13 * _tmp68 + _tmp5 * _tmp85 + _tmp78 * _tmp8;
    _res_D_a(5, 4) = _tmp17 * _tmp85 + _tmp20 * _tmp78 + _tmp22 * _tmp68;
    _res_D_a(5, 5) = _tmp23 * _tmp85 + _tmp25 * _tmp78 + _tmp26 * _tmp68;
  }

  return sym::Pose3<Scalar>(_res);
}

/**
 *
 * Composition of two elements in the group.
 *
 * Returns:
 *     Element: a @ b
 *     geo.Matrix: Jacobian for arg 0 (a)
 *     geo.Matrix: Jacobian for arg 1 (b)
 */
template <typename Scalar>
sym::Pose3<Scalar> GroupOps<Scalar>::ComposeWithJacobians(
    const sym::Pose3<Scalar>& a, const sym::Pose3<Scalar>& b,
    Eigen::Matrix<Scalar, 6, 6>* const res_D_a, Eigen::Matrix<Scalar, 6, 6>* const res_D_b) {
  // Total ops: 689

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _a = a.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _b = b.Data();

  // Intermediate terms (190)
  const Scalar _tmp0 = _a[0] * _b[3] + _a[1] * _b[2] - _a[2] * _b[1] + _a[3] * _b[0];
  const Scalar _tmp1 = -_a[0] * _b[2] + _a[1] * _b[3] + _a[2] * _b[0] + _a[3] * _b[1];
  const Scalar _tmp2 = _a[0] * _b[1] - _a[1] * _b[0] + _a[2] * _b[3] + _a[3] * _b[2];
  const Scalar _tmp3 = -_a[0] * _b[0] - _a[1] * _b[1] - _a[2] * _b[2] + _a[3] * _b[3];
  const Scalar _tmp4 = 2 * _a[3];
  const Scalar _tmp5 = _a[1] * _tmp4;
  const Scalar _tmp6 = 2 * _a[2];
  const Scalar _tmp7 = _a[0] * _tmp6;
  const Scalar _tmp8 = _tmp5 + _tmp7;
  const Scalar _tmp9 = _a[2] * _tmp4;
  const Scalar _tmp10 = 2 * _a[1];
  const Scalar _tmp11 = _a[0] * _tmp10;
  const Scalar _tmp12 = _tmp11 - _tmp9;
  const Scalar _tmp13 = -2 * (_a[1] * _a[1]);
  const Scalar _tmp14 = 1 - 2 * (_a[2] * _a[2]);
  const Scalar _tmp15 = _tmp13 + _tmp14;
  const Scalar _tmp16 = _a[0] * _tmp4;
  const Scalar _tmp17 = _a[2] * _tmp10;
  const Scalar _tmp18 = -_tmp16 + _tmp17;
  const Scalar _tmp19 = -2 * (_a[0] * _a[0]);
  const Scalar _tmp20 = _tmp14 + _tmp19;
  const Scalar _tmp21 = _tmp11 + _tmp9;
  const Scalar _tmp22 = _tmp13 + _tmp19 + 1;
  const Scalar _tmp23 = _tmp16 + _tmp17;
  const Scalar _tmp24 = -_tmp5 + _tmp7;
  const Scalar _tmp25 = 2 * _tmp0;
  const Scalar _tmp26 = _b[3] * _tmp25;
  const Scalar _tmp27 = -_tmp26;
  const Scalar _tmp28 = 2 * _tmp1;
  const Scalar _tmp29 = _b[2] * _tmp28;
  const Scalar _tmp30 = 2 * _b[1];
  const Scalar _tmp31 = _tmp2 * _tmp30;
  const Scalar _tmp32 = 2 * _b[0];
  const Scalar _tmp33 = _tmp3 * _tmp32;
  const Scalar _tmp34 = _tmp27 - _tmp29 + _tmp31 + _tmp33;
  const Scalar _tmp35 = (1.0 / 2.0) * _a[0];
  const Scalar _tmp36 = 2 * _b[3];
  const Scalar _tmp37 = _tmp2 * _tmp36;
  const Scalar _tmp38 = _b[1] * _tmp25;
  const Scalar _tmp39 = 2 * _b[2] * _tmp3;
  const Scalar _tmp40 = _tmp1 * _tmp32;
  const Scalar _tmp41 = _tmp39 + _tmp40;
  const Scalar _tmp42 = _tmp37 + _tmp38 + _tmp41;
  const Scalar _tmp43 = (1.0 / 2.0) * _a[2];
  const Scalar _tmp44 = _b[2] * _tmp25;
  const Scalar _tmp45 = _tmp1 * _tmp36;
  const Scalar _tmp46 = -_tmp45;
  const Scalar _tmp47 = _tmp2 * _tmp32;
  const Scalar _tmp48 = _tmp3 * _tmp30;
  const Scalar _tmp49 = _tmp44 + _tmp46 + _tmp47 - _tmp48;
  const Scalar _tmp50 = (1.0 / 2.0) * _a[1];
  const Scalar _tmp51 = _b[0] * _tmp25;
  const Scalar _tmp52 = 2 * _tmp2;
  const Scalar _tmp53 = _b[2] * _tmp52;
  const Scalar _tmp54 = -_tmp53;
  const Scalar _tmp55 = _tmp3 * _tmp36;
  const Scalar _tmp56 = _tmp1 * _tmp30;
  const Scalar _tmp57 = _tmp55 - _tmp56;
  const Scalar _tmp58 = _tmp51 + _tmp54 + _tmp57;
  const Scalar _tmp59 = (1.0 / 2.0) * _a[3];
  const Scalar _tmp60 = _tmp44 + _tmp48;
  const Scalar _tmp61 = _tmp46 - _tmp47 + _tmp60;
  const Scalar _tmp62 = _tmp29 + _tmp31;
  const Scalar _tmp63 = _tmp26 + _tmp33 + _tmp62;
  const Scalar _tmp64 = -_tmp51;
  const Scalar _tmp65 = _tmp54 + _tmp55 + _tmp56 + _tmp64;
  const Scalar _tmp66 = -_tmp37;
  const Scalar _tmp67 = _tmp38 - _tmp39 + _tmp40 + _tmp66;
  const Scalar _tmp68 = -_tmp38 + _tmp41 + _tmp66;
  const Scalar _tmp69 = _tmp53 + _tmp57 + _tmp64;
  const Scalar _tmp70 = _tmp27 - _tmp33 + _tmp62;
  const Scalar _tmp71 = _tmp45 + _tmp47 + _tmp60;
  const Scalar _tmp72 = 2 * _a[0];
  const Scalar _tmp73 = _b[4] * _tmp72;
  const Scalar _tmp74 = _b[5] * _tmp10;
  const Scalar _tmp75 = _tmp73 + _tmp74;
  const Scalar _tmp76 = _tmp28 * _tmp3;
  const Scalar _tmp77 = _tmp2 * _tmp25;
  const Scalar _tmp78 = -_tmp76 + _tmp77;
  const Scalar _tmp79 = _b[4] * _tmp4;
  const Scalar _tmp80 = 4 * _b[5];
  const Scalar _tmp81 = _b[6] * _tmp10;
  const Scalar _tmp82 = -_a[2] * _tmp80 + _tmp79 + _tmp81;
  const Scalar _tmp83 = _tmp3 * _tmp52;
  const Scalar _tmp84 = _tmp1 * _tmp25;
  const Scalar _tmp85 = _tmp83 + _tmp84;
  const Scalar _tmp86 = -2 * (_tmp2 * _tmp2);
  const Scalar _tmp87 = -2 * (_tmp1 * _tmp1);
  const Scalar _tmp88 = _tmp86 + _tmp87 + 1;
  const Scalar _tmp89 = 4 * _b[4];
  const Scalar _tmp90 = _b[5] * _tmp4;
  const Scalar _tmp91 = _b[6] * _tmp72;
  const Scalar _tmp92 = -_a[2] * _tmp89 - _tmp90 + _tmp91;
  const Scalar _tmp93 = _tmp75 * _tmp78 + _tmp82 * _tmp85 + _tmp88 * _tmp92;
  const Scalar _tmp94 = _b[5] * _tmp6;
  const Scalar _tmp95 = 4 * _b[6];
  const Scalar _tmp96 = -_a[1] * _tmp95 - _tmp79 + _tmp94;
  const Scalar _tmp97 = _b[6] * _tmp6;
  const Scalar _tmp98 = _tmp73 + _tmp97;
  const Scalar _tmp99 = _b[5] * _tmp72;
  const Scalar _tmp100 = _b[6] * _tmp4;
  const Scalar _tmp101 = -_a[1] * _tmp89 + _tmp100 + _tmp99;
  const Scalar _tmp102 = _tmp101 * _tmp88 + _tmp78 * _tmp96 + _tmp85 * _tmp98;
  const Scalar _tmp103 = _b[4] * _tmp6;
  const Scalar _tmp104 = _tmp103 - _tmp91;
  const Scalar _tmp105 = _b[4] * _tmp10;
  const Scalar _tmp106 = -_tmp105 + _tmp99;
  const Scalar _tmp107 = _tmp81 - _tmp94;
  const Scalar _tmp108 = _tmp104 * _tmp85 + _tmp106 * _tmp78 + _tmp107 * _tmp88;
  const Scalar _tmp109 = -_a[0] * _tmp95 + _tmp103 + _tmp90;
  const Scalar _tmp110 = -_a[0] * _tmp80 - _tmp100 + _tmp105;
  const Scalar _tmp111 = _tmp74 + _tmp97;
  const Scalar _tmp112 = (1.0 / 2.0) * _tmp109 * _tmp78 + (1.0 / 2.0) * _tmp110 * _tmp85 +
                         (1.0 / 2.0) * _tmp111 * _tmp88;
  const Scalar _tmp113 = _tmp15 * _tmp88 + _tmp21 * _tmp85 + _tmp24 * _tmp78;
  const Scalar _tmp114 = _tmp12 * _tmp88 + _tmp20 * _tmp85 + _tmp23 * _tmp78;
  const Scalar _tmp115 = _tmp18 * _tmp85 + _tmp22 * _tmp78 + _tmp8 * _tmp88;
  const Scalar _tmp116 = _tmp25 * _tmp3;
  const Scalar _tmp117 = _tmp1 * _tmp52;
  const Scalar _tmp118 = _tmp116 + _tmp117;
  const Scalar _tmp119 = 1 - 2 * (_tmp0 * _tmp0);
  const Scalar _tmp120 = _tmp119 + _tmp86;
  const Scalar _tmp121 = -_tmp83 + _tmp84;
  const Scalar _tmp122 = _tmp104 * _tmp120 + _tmp106 * _tmp118 + _tmp107 * _tmp121;
  const Scalar _tmp123 = _tmp118 * _tmp75 + _tmp120 * _tmp82 + _tmp121 * _tmp92;
  const Scalar _tmp124 = (1.0 / 2.0) * _tmp101 * _tmp121 + (1.0 / 2.0) * _tmp118 * _tmp96 +
                         (1.0 / 2.0) * _tmp120 * _tmp98;
  const Scalar _tmp125 = _tmp109 * _tmp118 + _tmp110 * _tmp120 + _tmp111 * _tmp121;
  const Scalar _tmp126 = _tmp118 * _tmp24 + _tmp120 * _tmp21 + _tmp121 * _tmp15;
  const Scalar _tmp127 = _tmp118 * _tmp23 + _tmp12 * _tmp121 + _tmp120 * _tmp20;
  const Scalar _tmp128 = _tmp118 * _tmp22 + _tmp120 * _tmp18 + _tmp121 * _tmp8;
  const Scalar _tmp129 = _tmp119 + _tmp87;
  const Scalar _tmp130 = -_tmp116 + _tmp117;
  const Scalar _tmp131 = _tmp76 + _tmp77;
  const Scalar _tmp132 = _tmp129 * _tmp75 + _tmp130 * _tmp82 + _tmp131 * _tmp92;
  const Scalar _tmp133 = _tmp104 * _tmp130 + _tmp106 * _tmp129 + _tmp107 * _tmp131;
  const Scalar _tmp134 = _tmp101 * _tmp131 + _tmp129 * _tmp96 + _tmp130 * _tmp98;
  const Scalar _tmp135 = _tmp109 * _tmp129 + _tmp110 * _tmp130 + _tmp111 * _tmp131;
  const Scalar _tmp136 = _tmp129 * _tmp24 + _tmp130 * _tmp21 + _tmp131 * _tmp15;
  const Scalar _tmp137 = _tmp12 * _tmp131 + _tmp129 * _tmp23 + _tmp130 * _tmp20;
  const Scalar _tmp138 = _tmp129 * _tmp22 + _tmp130 * _tmp18 + _tmp131 * _tmp8;
  const Scalar _tmp139 = _tmp0 * _tmp4;
  const Scalar _tmp140 = _tmp1 * _tmp6;
  const Scalar _tmp141 = _tmp10 * _tmp2;
  const Scalar _tmp142 = _tmp3 * _tmp72;
  const Scalar _tmp143 = -_tmp139 - _tmp140 + _tmp141 + _tmp142;
  const Scalar _tmp144 = (1.0 / 2.0) * _b[0];
  const Scalar _tmp145 = -_tmp143 * _tmp144;
  const Scalar _tmp146 = _a[2] * _tmp25;
  const Scalar _tmp147 = _tmp2 * _tmp72;
  const Scalar _tmp148 = _tmp1 * _tmp4;
  const Scalar _tmp149 = _tmp10 * _tmp3;
  const Scalar _tmp150 = _tmp146 - _tmp147 - _tmp148 + _tmp149;
  const Scalar _tmp151 = (1.0 / 2.0) * _b[1];
  const Scalar _tmp152 = -_tmp150 * _tmp151;
  const Scalar _tmp153 = _tmp0 * _tmp10;
  const Scalar _tmp154 = _tmp1 * _tmp72;
  const Scalar _tmp155 = _tmp2 * _tmp4;
  const Scalar _tmp156 = _tmp3 * _tmp6;
  const Scalar _tmp157 =
      (1.0 / 2.0) * _tmp153 - 1.0 / 2.0 * _tmp154 + (1.0 / 2.0) * _tmp155 - 1.0 / 2.0 * _tmp156;
  const Scalar _tmp158 = _a[0] * _tmp25 + _tmp1 * _tmp10 + _tmp2 * _tmp6 + _tmp3 * _tmp4;
  const Scalar _tmp159 = (1.0 / 2.0) * _b[3];
  const Scalar _tmp160 = _tmp158 * _tmp159;
  const Scalar _tmp161 = _tmp144 * _tmp150;
  const Scalar _tmp162 = (1.0 / 2.0) * _b[2];
  const Scalar _tmp163 = _tmp158 * _tmp162;
  const Scalar _tmp164 = _tmp143 * _tmp162;
  const Scalar _tmp165 = _tmp151 * _tmp158;
  const Scalar _tmp166 = _tmp139 + _tmp140 - _tmp141 - _tmp142;
  const Scalar _tmp167 =
      -1.0 / 2.0 * _tmp153 + (1.0 / 2.0) * _tmp154 - 1.0 / 2.0 * _tmp155 + (1.0 / 2.0) * _tmp156;
  const Scalar _tmp168 = -_b[2] * _tmp167 + _tmp160;
  const Scalar _tmp169 = _tmp144 * _tmp158;
  const Scalar _tmp170 = _b[1] * _tmp167;
  const Scalar _tmp171 = -_tmp146 + _tmp147 + _tmp148 - _tmp149;
  const Scalar _tmp172 = _b[3] * _tmp30;
  const Scalar _tmp173 = _b[2] * _tmp32;
  const Scalar _tmp174 = -_tmp172 + _tmp173;
  const Scalar _tmp175 = _b[2] * _tmp36;
  const Scalar _tmp176 = _b[1] * _tmp32;
  const Scalar _tmp177 = _tmp175 + _tmp176;
  const Scalar _tmp178 = -2 * (_b[2] * _b[2]);
  const Scalar _tmp179 = 1 - 2 * (_b[1] * _b[1]);
  const Scalar _tmp180 = _tmp178 + _tmp179;
  const Scalar _tmp181 = _b[3] * _tmp32;
  const Scalar _tmp182 = _b[2] * _tmp30;
  const Scalar _tmp183 = _tmp181 + _tmp182;
  const Scalar _tmp184 = -2 * (_b[0] * _b[0]);
  const Scalar _tmp185 = _tmp178 + _tmp184 + 1;
  const Scalar _tmp186 = -_tmp175 + _tmp176;
  const Scalar _tmp187 = -_tmp181 + _tmp182;
  const Scalar _tmp188 = _tmp179 + _tmp184;
  const Scalar _tmp189 = _tmp172 + _tmp173;

  // Output terms (3)
  Eigen::Matrix<Scalar, 7, 1> _res;

  _res[0] = _tmp0;
  _res[1] = _tmp1;
  _res[2] = _tmp2;
  _res[3] = _tmp3;
  _res[4] = _a[4] + _b[4] * _tmp15 + _b[5] * _tmp12 + _b[6] * _tmp8;
  _res[5] = _a[5] + _b[4] * _tmp21 + _b[5] * _tmp20 + _b[6] * _tmp18;
  _res[6] = _a[6] + _b[4] * _tmp24 + _b[5] * _tmp23 + _b[6] * _tmp22;

  if (res_D_a != nullptr) {
    Eigen::Matrix<Scalar, 6, 6>& _res_D_a = (*res_D_a);

    _res_D_a(0, 0) = -_tmp34 * _tmp35 + _tmp42 * _tmp43 - _tmp49 * _tmp50 + _tmp58 * _tmp59;
    _res_D_a(0, 1) = -_tmp34 * _tmp50 + _tmp35 * _tmp49 + _tmp42 * _tmp59 - _tmp43 * _tmp58;
    _res_D_a(0, 2) = -_tmp34 * _tmp43 - _tmp35 * _tmp42 + _tmp49 * _tmp59 + _tmp50 * _tmp58;
    _res_D_a(0, 3) = 0;
    _res_D_a(0, 4) = 0;
    _res_D_a(0, 5) = 0;
    _res_D_a(1, 0) = -_tmp35 * _tmp61 + _tmp43 * _tmp65 - _tmp50 * _tmp63 + _tmp59 * _tmp67;
    _res_D_a(1, 1) = _tmp35 * _tmp63 - _tmp43 * _tmp67 - _tmp50 * _tmp61 + _tmp59 * _tmp65;
    _res_D_a(1, 2) = -_tmp35 * _tmp65 - _tmp43 * _tmp61 + _tmp50 * _tmp67 + _tmp59 * _tmp63;
    _res_D_a(1, 3) = 0;
    _res_D_a(1, 4) = 0;
    _res_D_a(1, 5) = 0;
    _res_D_a(2, 0) = -_tmp35 * _tmp68 + _tmp43 * _tmp70 - _tmp50 * _tmp69 + _tmp59 * _tmp71;
    _res_D_a(2, 1) = _tmp35 * _tmp69 - _tmp43 * _tmp71 - _tmp50 * _tmp68 + _tmp59 * _tmp70;
    _res_D_a(2, 2) = -_tmp35 * _tmp70 - _tmp43 * _tmp68 + _tmp50 * _tmp71 + _tmp59 * _tmp69;
    _res_D_a(2, 3) = 0;
    _res_D_a(2, 4) = 0;
    _res_D_a(2, 5) = 0;
    _res_D_a(3, 0) = _a[3] * _tmp112 + _tmp102 * _tmp43 - _tmp108 * _tmp35 - _tmp50 * _tmp93;
    _res_D_a(3, 1) = -_a[2] * _tmp112 + _tmp102 * _tmp59 - _tmp108 * _tmp50 + _tmp35 * _tmp93;
    _res_D_a(3, 2) = _a[1] * _tmp112 - _tmp102 * _tmp35 - _tmp108 * _tmp43 + _tmp59 * _tmp93;
    _res_D_a(3, 3) = _tmp113;
    _res_D_a(3, 4) = _tmp114;
    _res_D_a(3, 5) = _tmp115;
    _res_D_a(4, 0) = _a[2] * _tmp124 - _tmp122 * _tmp35 - _tmp123 * _tmp50 + _tmp125 * _tmp59;
    _res_D_a(4, 1) = _a[3] * _tmp124 - _tmp122 * _tmp50 + _tmp123 * _tmp35 - _tmp125 * _tmp43;
    _res_D_a(4, 2) = -_a[0] * _tmp124 - _tmp122 * _tmp43 + _tmp123 * _tmp59 + _tmp125 * _tmp50;
    _res_D_a(4, 3) = _tmp126;
    _res_D_a(4, 4) = _tmp127;
    _res_D_a(4, 5) = _tmp128;
    _res_D_a(5, 0) = -_tmp132 * _tmp50 - _tmp133 * _tmp35 + _tmp134 * _tmp43 + _tmp135 * _tmp59;
    _res_D_a(5, 1) = _tmp132 * _tmp35 - _tmp133 * _tmp50 + _tmp134 * _tmp59 - _tmp135 * _tmp43;
    _res_D_a(5, 2) = _tmp132 * _tmp59 - _tmp133 * _tmp43 - _tmp134 * _tmp35 + _tmp135 * _tmp50;
    _res_D_a(5, 3) = _tmp136;
    _res_D_a(5, 4) = _tmp137;
    _res_D_a(5, 5) = _tmp138;
  }

  if (res_D_b != nullptr) {
    Eigen::Matrix<Scalar, 6, 6>& _res_D_b = (*res_D_b);

    _res_D_b(0, 0) = _b[2] * _tmp157 + _tmp145 + _tmp152 + _tmp160;
    _res_D_b(0, 1) = _b[3] * _tmp157 - _tmp143 * _tmp151 + _tmp161 - _tmp163;
    _res_D_b(0, 2) = -_b[0] * _tmp157 + _tmp150 * _tmp159 - _tmp164 + _tmp165;
    _res_D_b(0, 3) = 0;
    _res_D_b(0, 4) = 0;
    _res_D_b(0, 5) = 0;
    _res_D_b(1, 0) = _b[3] * _tmp167 - _tmp151 * _tmp166 - _tmp161 + _tmp163;
    _res_D_b(1, 1) = _tmp144 * _tmp166 + _tmp152 + _tmp168;
    _res_D_b(1, 2) = -_tmp150 * _tmp162 + _tmp159 * _tmp166 - _tmp169 + _tmp170;
    _res_D_b(1, 3) = 0;
    _res_D_b(1, 4) = 0;
    _res_D_b(1, 5) = 0;
    _res_D_b(2, 0) = -_b[0] * _tmp167 + _tmp159 * _tmp171 + _tmp164 - _tmp165;
    _res_D_b(2, 1) = _tmp143 * _tmp159 - _tmp162 * _tmp171 + _tmp169 - _tmp170;
    _res_D_b(2, 2) = _tmp145 + _tmp151 * _tmp171 + _tmp168;
    _res_D_b(2, 3) = 0;
    _res_D_b(2, 4) = 0;
    _res_D_b(2, 5) = 0;
    _res_D_b(3, 0) = 0;
    _res_D_b(3, 1) = 0;
    _res_D_b(3, 2) = 0;
    _res_D_b(3, 3) = _tmp113 * _tmp180 + _tmp114 * _tmp177 + _tmp115 * _tmp174;
    _res_D_b(3, 4) = _tmp113 * _tmp186 + _tmp114 * _tmp185 + _tmp115 * _tmp183;
    _res_D_b(3, 5) = _tmp113 * _tmp189 + _tmp114 * _tmp187 + _tmp115 * _tmp188;
    _res_D_b(4, 0) = 0;
    _res_D_b(4, 1) = 0;
    _res_D_b(4, 2) = 0;
    _res_D_b(4, 3) = _tmp126 * _tmp180 + _tmp127 * _tmp177 + _tmp128 * _tmp174;
    _res_D_b(4, 4) = _tmp126 * _tmp186 + _tmp127 * _tmp185 + _tmp128 * _tmp183;
    _res_D_b(4, 5) = _tmp126 * _tmp189 + _tmp127 * _tmp187 + _tmp128 * _tmp188;
    _res_D_b(5, 0) = 0;
    _res_D_b(5, 1) = 0;
    _res_D_b(5, 2) = 0;
    _res_D_b(5, 3) = _tmp136 * _tmp180 + _tmp137 * _tmp177 + _tmp138 * _tmp174;
    _res_D_b(5, 4) = _tmp136 * _tmp186 + _tmp137 * _tmp185 + _tmp138 * _tmp183;
    _res_D_b(5, 5) = _tmp136 * _tmp189 + _tmp137 * _tmp187 + _tmp138 * _tmp188;
  }

  return sym::Pose3<Scalar>(_res);
}

/**
 *
 * Returns the element that when composed with a produces b. For vector spaces it is b - a.
 *
 * Implementation is simply `compose(inverse(a), b)`.
 *
 * Returns:
 *     Element: c such that a @ c = b
 *     geo.Matrix: Jacobian for arg 0 (a)
 *     geo.Matrix: Jacobian for arg 1 (b)
 */
template <typename Scalar>
sym::Pose3<Scalar> GroupOps<Scalar>::BetweenWithJacobians(
    const sym::Pose3<Scalar>& a, const sym::Pose3<Scalar>& b,
    Eigen::Matrix<Scalar, 6, 6>* const res_D_a, Eigen::Matrix<Scalar, 6, 6>* const res_D_b) {
  // Total ops: 883

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _a = a.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _b = b.Data();

  // Intermediate terms (227)
  const Scalar _tmp0 = -_a[0] * _b[3] - _a[1] * _b[2] + _a[2] * _b[1] + _a[3] * _b[0];
  const Scalar _tmp1 = _a[0] * _b[2] - _a[1] * _b[3] - _a[2] * _b[0] + _a[3] * _b[1];
  const Scalar _tmp2 = -_a[0] * _b[1] + _a[1] * _b[0] - _a[2] * _b[3] + _a[3] * _b[2];
  const Scalar _tmp3 = _a[0] * _b[0] + _a[1] * _b[1] + _a[2] * _b[2] + _a[3] * _b[3];
  const Scalar _tmp4 = 2 * _a[3];
  const Scalar _tmp5 = _a[1] * _tmp4;
  const Scalar _tmp6 = -_tmp5;
  const Scalar _tmp7 = 2 * _a[0];
  const Scalar _tmp8 = _a[2] * _tmp7;
  const Scalar _tmp9 = _tmp6 + _tmp8;
  const Scalar _tmp10 = 2 * _a[2];
  const Scalar _tmp11 = _a[3] * _tmp10;
  const Scalar _tmp12 = _a[1] * _tmp7;
  const Scalar _tmp13 = _tmp11 + _tmp12;
  const Scalar _tmp14 = 2 * (_a[1] * _a[1]);
  const Scalar _tmp15 = -_tmp14;
  const Scalar _tmp16 = 2 * (_a[2] * _a[2]);
  const Scalar _tmp17 = 1 - _tmp16;
  const Scalar _tmp18 = _tmp15 + _tmp17;
  const Scalar _tmp19 = _a[3] * _tmp7;
  const Scalar _tmp20 = _a[1] * _tmp10;
  const Scalar _tmp21 = _tmp19 + _tmp20;
  const Scalar _tmp22 = 2 * (_a[0] * _a[0]);
  const Scalar _tmp23 = -_tmp22;
  const Scalar _tmp24 = _tmp17 + _tmp23;
  const Scalar _tmp25 = -_tmp11;
  const Scalar _tmp26 = _tmp12 + _tmp25;
  const Scalar _tmp27 = _tmp15 + _tmp23 + 1;
  const Scalar _tmp28 = -_tmp19;
  const Scalar _tmp29 = _tmp20 + _tmp28;
  const Scalar _tmp30 = _tmp5 + _tmp8;
  const Scalar _tmp31 = 2 * _tmp0;
  const Scalar _tmp32 = -_b[1] * _tmp31;
  const Scalar _tmp33 = 2 * _tmp1;
  const Scalar _tmp34 = _b[0] * _tmp33;
  const Scalar _tmp35 = -_tmp34;
  const Scalar _tmp36 = 2 * _tmp2;
  const Scalar _tmp37 = _b[3] * _tmp36;
  const Scalar _tmp38 = -_tmp37;
  const Scalar _tmp39 = 2 * _b[2];
  const Scalar _tmp40 = _tmp3 * _tmp39;
  const Scalar _tmp41 = _tmp32 + _tmp35 + _tmp38 - _tmp40;
  const Scalar _tmp42 = (1.0 / 2.0) * _a[2];
  const Scalar _tmp43 = _b[3] * _tmp31;
  const Scalar _tmp44 = -_tmp43;
  const Scalar _tmp45 = _b[1] * _tmp36;
  const Scalar _tmp46 = -_tmp1 * _tmp39;
  const Scalar _tmp47 = 2 * _b[0] * _tmp3;
  const Scalar _tmp48 = _tmp46 + _tmp47;
  const Scalar _tmp49 = _tmp44 + _tmp45 + _tmp48;
  const Scalar _tmp50 = (1.0 / 2.0) * _a[0];
  const Scalar _tmp51 = _tmp0 * _tmp39;
  const Scalar _tmp52 = -_tmp51;
  const Scalar _tmp53 = _b[3] * _tmp33;
  const Scalar _tmp54 = -_b[0] * _tmp36;
  const Scalar _tmp55 = 2 * _b[1];
  const Scalar _tmp56 = _tmp3 * _tmp55;
  const Scalar _tmp57 = _tmp52 + _tmp53 + _tmp54 + _tmp56;
  const Scalar _tmp58 = (1.0 / 2.0) * _a[1];
  const Scalar _tmp59 = _b[1] * _tmp33;
  const Scalar _tmp60 = _b[0] * _tmp31;
  const Scalar _tmp61 = _tmp2 * _tmp39;
  const Scalar _tmp62 = 2 * _b[3];
  const Scalar _tmp63 = -_tmp3 * _tmp62;
  const Scalar _tmp64 = _tmp61 + _tmp63;
  const Scalar _tmp65 = _tmp59 - _tmp60 + _tmp64;
  const Scalar _tmp66 = (1.0 / 2.0) * _a[3];
  const Scalar _tmp67 = -_tmp53 + _tmp54;
  const Scalar _tmp68 = _tmp51 + _tmp56 + _tmp67;
  const Scalar _tmp69 = -_tmp45;
  const Scalar _tmp70 = _tmp44 + _tmp46 - _tmp47 + _tmp69;
  const Scalar _tmp71 = -_tmp59 + _tmp60 + _tmp64;
  const Scalar _tmp72 = _tmp32 + _tmp40;
  const Scalar _tmp73 = _tmp35 + _tmp37 + _tmp72;
  const Scalar _tmp74 = _tmp59 + _tmp60 - _tmp61 + _tmp63;
  const Scalar _tmp75 = _tmp34 + _tmp38 + _tmp72;
  const Scalar _tmp76 = _tmp43 + _tmp48 + _tmp69;
  const Scalar _tmp77 = _tmp52 - _tmp56 + _tmp67;
  const Scalar _tmp78 = _b[5] * _tmp7;
  const Scalar _tmp79 = _a[5] * _tmp7;
  const Scalar _tmp80 = 2 * _a[1];
  const Scalar _tmp81 = -_a[4] * _tmp80 + _b[4] * _tmp80;
  const Scalar _tmp82 = -_tmp78 + _tmp79 + _tmp81;
  const Scalar _tmp83 = _tmp3 * _tmp33;
  const Scalar _tmp84 = _tmp2 * _tmp31;
  const Scalar _tmp85 = -_tmp83 + _tmp84;
  const Scalar _tmp86 = _b[4] * _tmp10;
  const Scalar _tmp87 = _a[4] * _tmp10;
  const Scalar _tmp88 = -_a[6] * _tmp7 + _b[6] * _tmp7;
  const Scalar _tmp89 = -_tmp86 + _tmp87 + _tmp88;
  const Scalar _tmp90 = _tmp3 * _tmp36;
  const Scalar _tmp91 = _tmp0 * _tmp33;
  const Scalar _tmp92 = _tmp90 + _tmp91;
  const Scalar _tmp93 = _b[6] * _tmp80;
  const Scalar _tmp94 = _a[6] * _tmp80;
  const Scalar _tmp95 = -_a[5] * _tmp10 + _b[5] * _tmp10;
  const Scalar _tmp96 = -_tmp93 + _tmp94 + _tmp95;
  const Scalar _tmp97 = -2 * (_tmp2 * _tmp2);
  const Scalar _tmp98 = 1 - 2 * (_tmp1 * _tmp1);
  const Scalar _tmp99 = _tmp97 + _tmp98;
  const Scalar _tmp100 = _tmp82 * _tmp85 + _tmp89 * _tmp92 + _tmp96 * _tmp99;
  const Scalar _tmp101 = _b[4] * _tmp4;
  const Scalar _tmp102 = 4 * _a[2];
  const Scalar _tmp103 = _a[4] * _tmp4;
  const Scalar _tmp104 = _a[5] * _tmp102 - _b[5] * _tmp102 - _tmp101 + _tmp103 + _tmp93 - _tmp94;
  const Scalar _tmp105 = -_a[4] * _tmp7 + _b[4] * _tmp7;
  const Scalar _tmp106 = -_a[5] * _tmp80 + _b[5] * _tmp80;
  const Scalar _tmp107 = _tmp105 + _tmp106;
  const Scalar _tmp108 = _b[5] * _tmp4;
  const Scalar _tmp109 = _a[5] * _tmp4;
  const Scalar _tmp110 = _a[4] * _tmp102 - _b[4] * _tmp102 + _tmp108 - _tmp109 + _tmp88;
  const Scalar _tmp111 = _tmp104 * _tmp92 + _tmp107 * _tmp85 + _tmp110 * _tmp99;
  const Scalar _tmp112 = 4 * _a[6];
  const Scalar _tmp113 = 4 * _a[1];
  const Scalar _tmp114 = _a[1] * _tmp112 - _b[6] * _tmp113 + _tmp101 - _tmp103 + _tmp95;
  const Scalar _tmp115 = -_a[6] * _tmp10 + _b[6] * _tmp10;
  const Scalar _tmp116 = _tmp105 + _tmp115;
  const Scalar _tmp117 = _a[6] * _tmp4;
  const Scalar _tmp118 = _b[6] * _tmp4;
  const Scalar _tmp119 = _a[4] * _tmp113 - _b[4] * _tmp113 + _tmp117 - _tmp118 + _tmp78 - _tmp79;
  const Scalar _tmp120 = _tmp114 * _tmp85 + _tmp116 * _tmp92 + _tmp119 * _tmp99;
  const Scalar _tmp121 = 4 * _a[0];
  const Scalar _tmp122 = _a[0] * _tmp112 - _b[6] * _tmp121 - _tmp108 + _tmp109 + _tmp86 - _tmp87;
  const Scalar _tmp123 = _a[5] * _tmp121 - _b[5] * _tmp121 - _tmp117 + _tmp118 + _tmp81;
  const Scalar _tmp124 = _tmp106 + _tmp115;
  const Scalar _tmp125 = (1.0 / 2.0) * _tmp122 * _tmp85 + (1.0 / 2.0) * _tmp123 * _tmp92 +
                         (1.0 / 2.0) * _tmp124 * _tmp99;
  const Scalar _tmp126 = _tmp14 + _tmp22 - 1;
  const Scalar _tmp127 = -_tmp20;
  const Scalar _tmp128 = _tmp127 + _tmp28;
  const Scalar _tmp129 = -_tmp8;
  const Scalar _tmp130 = _tmp129 + _tmp5;
  const Scalar _tmp131 = _tmp126 * _tmp85 + _tmp128 * _tmp92 + _tmp130 * _tmp99;
  const Scalar _tmp132 = _tmp127 + _tmp19;
  const Scalar _tmp133 = _tmp16 - 1;
  const Scalar _tmp134 = _tmp133 + _tmp22;
  const Scalar _tmp135 = -_tmp12;
  const Scalar _tmp136 = _tmp135 + _tmp25;
  const Scalar _tmp137 = _tmp132 * _tmp85 + _tmp134 * _tmp92 + _tmp136 * _tmp99;
  const Scalar _tmp138 = _tmp129 + _tmp6;
  const Scalar _tmp139 = _tmp11 + _tmp135;
  const Scalar _tmp140 = _tmp133 + _tmp14;
  const Scalar _tmp141 = _tmp138 * _tmp85 + _tmp139 * _tmp92 + _tmp140 * _tmp99;
  const Scalar _tmp142 = _tmp3 * _tmp31;
  const Scalar _tmp143 = _tmp2 * _tmp33;
  const Scalar _tmp144 = _tmp142 + _tmp143;
  const Scalar _tmp145 = -2 * (_tmp0 * _tmp0);
  const Scalar _tmp146 = _tmp145 + _tmp97 + 1;
  const Scalar _tmp147 = -_tmp90 + _tmp91;
  const Scalar _tmp148 = _tmp144 * _tmp82 + _tmp146 * _tmp89 + _tmp147 * _tmp96;
  const Scalar _tmp149 = _tmp104 * _tmp146 + _tmp107 * _tmp144 + _tmp110 * _tmp147;
  const Scalar _tmp150 = _tmp114 * _tmp144 + _tmp116 * _tmp146 + _tmp119 * _tmp147;
  const Scalar _tmp151 = _tmp122 * _tmp144 + _tmp123 * _tmp146 + _tmp124 * _tmp147;
  const Scalar _tmp152 = _tmp126 * _tmp144 + _tmp128 * _tmp146 + _tmp130 * _tmp147;
  const Scalar _tmp153 = _tmp132 * _tmp144 + _tmp134 * _tmp146 + _tmp136 * _tmp147;
  const Scalar _tmp154 = _tmp138 * _tmp144 + _tmp139 * _tmp146 + _tmp140 * _tmp147;
  const Scalar _tmp155 = _tmp145 + _tmp98;
  const Scalar _tmp156 = -_tmp142 + _tmp143;
  const Scalar _tmp157 = _tmp83 + _tmp84;
  const Scalar _tmp158 = _tmp155 * _tmp82 + _tmp156 * _tmp89 + _tmp157 * _tmp96;
  const Scalar _tmp159 = _tmp114 * _tmp155 + _tmp116 * _tmp156 + _tmp119 * _tmp157;
  const Scalar _tmp160 = _tmp104 * _tmp156 + _tmp107 * _tmp155 + _tmp110 * _tmp157;
  const Scalar _tmp161 = _tmp122 * _tmp155 + _tmp123 * _tmp156 + _tmp124 * _tmp157;
  const Scalar _tmp162 = _tmp126 * _tmp155 + _tmp128 * _tmp156 + _tmp130 * _tmp157;
  const Scalar _tmp163 = _tmp132 * _tmp155 + _tmp134 * _tmp156 + _tmp136 * _tmp157;
  const Scalar _tmp164 = _tmp138 * _tmp155 + _tmp139 * _tmp156 + _tmp140 * _tmp157;
  const Scalar _tmp165 = _tmp0 * _tmp4;
  const Scalar _tmp166 = _tmp2 * _tmp80;
  const Scalar _tmp167 = _tmp1 * _tmp10;
  const Scalar _tmp168 = _tmp3 * _tmp7;
  const Scalar _tmp169 = -_tmp165 - _tmp166 + _tmp167 - _tmp168;
  const Scalar _tmp170 = (1.0 / 2.0) * _b[0];
  const Scalar _tmp171 = -_tmp169 * _tmp170;
  const Scalar _tmp172 = _tmp0 * _tmp80;
  const Scalar _tmp173 = _tmp1 * _tmp7;
  const Scalar _tmp174 = _tmp2 * _tmp4;
  const Scalar _tmp175 = _tmp10 * _tmp3;
  const Scalar _tmp176 =
      -1.0 / 2.0 * _tmp172 + (1.0 / 2.0) * _tmp173 + (1.0 / 2.0) * _tmp174 + (1.0 / 2.0) * _tmp175;
  const Scalar _tmp177 = -_tmp0 * _tmp7 - _tmp1 * _tmp80 - _tmp10 * _tmp2 + _tmp3 * _tmp4;
  const Scalar _tmp178 = (1.0 / 2.0) * _tmp177;
  const Scalar _tmp179 = _b[3] * _tmp178;
  const Scalar _tmp180 = _tmp0 * _tmp10;
  const Scalar _tmp181 = _tmp1 * _tmp4;
  const Scalar _tmp182 = _tmp2 * _tmp7;
  const Scalar _tmp183 = _tmp3 * _tmp80;
  const Scalar _tmp184 = -_tmp180 - _tmp181 + _tmp182 - _tmp183;
  const Scalar _tmp185 = (1.0 / 2.0) * _b[1];
  const Scalar _tmp186 = _tmp179 - _tmp184 * _tmp185;
  const Scalar _tmp187 = _tmp170 * _tmp184;
  const Scalar _tmp188 = _b[2] * _tmp178;
  const Scalar _tmp189 = (1.0 / 2.0) * _tmp169;
  const Scalar _tmp190 = _b[2] * _tmp189;
  const Scalar _tmp191 = (1.0 / 2.0) * _b[3];
  const Scalar _tmp192 = _tmp177 * _tmp185;
  const Scalar _tmp193 = _tmp165 + _tmp166 - _tmp167 + _tmp168;
  const Scalar _tmp194 =
      (1.0 / 2.0) * _tmp172 - 1.0 / 2.0 * _tmp173 - 1.0 / 2.0 * _tmp174 - 1.0 / 2.0 * _tmp175;
  const Scalar _tmp195 = -_b[2] * _tmp194;
  const Scalar _tmp196 = (1.0 / 2.0) * _b[2];
  const Scalar _tmp197 = _tmp170 * _tmp177;
  const Scalar _tmp198 = _b[1] * _tmp194;
  const Scalar _tmp199 = _tmp180 + _tmp181 - _tmp182 + _tmp183;
  const Scalar _tmp200 = _b[3] * _tmp39;
  const Scalar _tmp201 = _b[0] * _tmp55;
  const Scalar _tmp202 = _tmp200 + _tmp201;
  const Scalar _tmp203 = _tmp13 * _tmp99 + _tmp24 * _tmp92 + _tmp29 * _tmp85;
  const Scalar _tmp204 = _b[1] * _tmp62;
  const Scalar _tmp205 = _b[0] * _tmp39;
  const Scalar _tmp206 = -_tmp204 + _tmp205;
  const Scalar _tmp207 = _tmp21 * _tmp92 + _tmp27 * _tmp85 + _tmp9 * _tmp99;
  const Scalar _tmp208 = -2 * (_b[1] * _b[1]);
  const Scalar _tmp209 = 1 - 2 * (_b[2] * _b[2]);
  const Scalar _tmp210 = _tmp208 + _tmp209;
  const Scalar _tmp211 = _tmp18 * _tmp99 + _tmp26 * _tmp92 + _tmp30 * _tmp85;
  const Scalar _tmp212 = _b[0] * _tmp62;
  const Scalar _tmp213 = _b[1] * _tmp39;
  const Scalar _tmp214 = _tmp212 + _tmp213;
  const Scalar _tmp215 = -2 * (_b[0] * _b[0]);
  const Scalar _tmp216 = _tmp209 + _tmp215;
  const Scalar _tmp217 = -_tmp200 + _tmp201;
  const Scalar _tmp218 = _tmp208 + _tmp215 + 1;
  const Scalar _tmp219 = -_tmp212 + _tmp213;
  const Scalar _tmp220 = _tmp204 + _tmp205;
  const Scalar _tmp221 = _tmp144 * _tmp27 + _tmp146 * _tmp21 + _tmp147 * _tmp9;
  const Scalar _tmp222 = _tmp13 * _tmp147 + _tmp144 * _tmp29 + _tmp146 * _tmp24;
  const Scalar _tmp223 = _tmp144 * _tmp30 + _tmp146 * _tmp26 + _tmp147 * _tmp18;
  const Scalar _tmp224 = _tmp155 * _tmp27 + _tmp156 * _tmp21 + _tmp157 * _tmp9;
  const Scalar _tmp225 = _tmp13 * _tmp157 + _tmp155 * _tmp29 + _tmp156 * _tmp24;
  const Scalar _tmp226 = _tmp155 * _tmp30 + _tmp156 * _tmp26 + _tmp157 * _tmp18;

  // Output terms (3)
  Eigen::Matrix<Scalar, 7, 1> _res;

  _res[0] = _tmp0;
  _res[1] = _tmp1;
  _res[2] = _tmp2;
  _res[3] = _tmp3;
  _res[4] = -_a[4] * _tmp18 - _a[5] * _tmp13 - _a[6] * _tmp9 + _b[4] * _tmp18 + _b[5] * _tmp13 +
            _b[6] * _tmp9;
  _res[5] = -_a[4] * _tmp26 - _a[5] * _tmp24 - _a[6] * _tmp21 + _b[4] * _tmp26 + _b[5] * _tmp24 +
            _b[6] * _tmp21;
  _res[6] = -_a[4] * _tmp30 - _a[5] * _tmp29 - _a[6] * _tmp27 + _b[4] * _tmp30 + _b[5] * _tmp29 +
            _b[6] * _tmp27;

  if (res_D_a != nullptr) {
    Eigen::Matrix<Scalar, 6, 6>& _res_D_a = (*res_D_a);

    _res_D_a(0, 0) = _tmp41 * _tmp42 - _tmp49 * _tmp50 - _tmp57 * _tmp58 + _tmp65 * _tmp66;
    _res_D_a(0, 1) = _tmp41 * _tmp66 - _tmp42 * _tmp65 - _tmp49 * _tmp58 + _tmp50 * _tmp57;
    _res_D_a(0, 2) = -_tmp41 * _tmp50 - _tmp42 * _tmp49 + _tmp57 * _tmp66 + _tmp58 * _tmp65;
    _res_D_a(0, 3) = 0;
    _res_D_a(0, 4) = 0;
    _res_D_a(0, 5) = 0;
    _res_D_a(1, 0) = _tmp42 * _tmp71 - _tmp50 * _tmp68 - _tmp58 * _tmp70 + _tmp66 * _tmp73;
    _res_D_a(1, 1) = -_tmp42 * _tmp73 + _tmp50 * _tmp70 - _tmp58 * _tmp68 + _tmp66 * _tmp71;
    _res_D_a(1, 2) = -_tmp42 * _tmp68 - _tmp50 * _tmp71 + _tmp58 * _tmp73 + _tmp66 * _tmp70;
    _res_D_a(1, 3) = 0;
    _res_D_a(1, 4) = 0;
    _res_D_a(1, 5) = 0;
    _res_D_a(2, 0) = _tmp42 * _tmp76 - _tmp50 * _tmp75 - _tmp58 * _tmp74 + _tmp66 * _tmp77;
    _res_D_a(2, 1) = -_tmp42 * _tmp77 + _tmp50 * _tmp74 - _tmp58 * _tmp75 + _tmp66 * _tmp76;
    _res_D_a(2, 2) = -_tmp42 * _tmp75 - _tmp50 * _tmp76 + _tmp58 * _tmp77 + _tmp66 * _tmp74;
    _res_D_a(2, 3) = 0;
    _res_D_a(2, 4) = 0;
    _res_D_a(2, 5) = 0;
    _res_D_a(3, 0) = _a[3] * _tmp125 - _tmp100 * _tmp50 - _tmp111 * _tmp58 + _tmp120 * _tmp42;
    _res_D_a(3, 1) = -_a[2] * _tmp125 - _tmp100 * _tmp58 + _tmp111 * _tmp50 + _tmp120 * _tmp66;
    _res_D_a(3, 2) = _a[1] * _tmp125 - _tmp100 * _tmp42 + _tmp111 * _tmp66 - _tmp120 * _tmp50;
    _res_D_a(3, 3) = _tmp13 * _tmp137 + _tmp131 * _tmp9 + _tmp141 * _tmp18;
    _res_D_a(3, 4) = _tmp131 * _tmp21 + _tmp137 * _tmp24 + _tmp141 * _tmp26;
    _res_D_a(3, 5) = _tmp131 * _tmp27 + _tmp137 * _tmp29 + _tmp141 * _tmp30;
    _res_D_a(4, 0) = -_tmp148 * _tmp50 - _tmp149 * _tmp58 + _tmp150 * _tmp42 + _tmp151 * _tmp66;
    _res_D_a(4, 1) = -_tmp148 * _tmp58 + _tmp149 * _tmp50 + _tmp150 * _tmp66 - _tmp151 * _tmp42;
    _res_D_a(4, 2) = -_tmp148 * _tmp42 + _tmp149 * _tmp66 - _tmp150 * _tmp50 + _tmp151 * _tmp58;
    _res_D_a(4, 3) = _tmp13 * _tmp153 + _tmp152 * _tmp9 + _tmp154 * _tmp18;
    _res_D_a(4, 4) = _tmp152 * _tmp21 + _tmp153 * _tmp24 + _tmp154 * _tmp26;
    _res_D_a(4, 5) = _tmp152 * _tmp27 + _tmp153 * _tmp29 + _tmp154 * _tmp30;
    _res_D_a(5, 0) = -_tmp158 * _tmp50 + _tmp159 * _tmp42 - _tmp160 * _tmp58 + _tmp161 * _tmp66;
    _res_D_a(5, 1) = -_tmp158 * _tmp58 + _tmp159 * _tmp66 + _tmp160 * _tmp50 - _tmp161 * _tmp42;
    _res_D_a(5, 2) = -_tmp158 * _tmp42 - _tmp159 * _tmp50 + _tmp160 * _tmp66 + _tmp161 * _tmp58;
    _res_D_a(5, 3) = _tmp13 * _tmp163 + _tmp162 * _tmp9 + _tmp164 * _tmp18;
    _res_D_a(5, 4) = _tmp162 * _tmp21 + _tmp163 * _tmp24 + _tmp164 * _tmp26;
    _res_D_a(5, 5) = _tmp162 * _tmp27 + _tmp163 * _tmp29 + _tmp164 * _tmp30;
  }

  if (res_D_b != nullptr) {
    Eigen::Matrix<Scalar, 6, 6>& _res_D_b = (*res_D_b);

    _res_D_b(0, 0) = _b[2] * _tmp176 + _tmp171 + _tmp186;
    _res_D_b(0, 1) = _b[3] * _tmp176 - _tmp169 * _tmp185 + _tmp187 - _tmp188;
    _res_D_b(0, 2) = -_b[0] * _tmp176 + _tmp184 * _tmp191 - _tmp190 + _tmp192;
    _res_D_b(0, 3) = 0;
    _res_D_b(0, 4) = 0;
    _res_D_b(0, 5) = 0;
    _res_D_b(1, 0) = _b[3] * _tmp194 - _tmp185 * _tmp193 - _tmp187 + _tmp188;
    _res_D_b(1, 1) = _tmp170 * _tmp193 + _tmp186 + _tmp195;
    _res_D_b(1, 2) = -_tmp184 * _tmp196 + _tmp191 * _tmp193 - _tmp197 + _tmp198;
    _res_D_b(1, 3) = 0;
    _res_D_b(1, 4) = 0;
    _res_D_b(1, 5) = 0;
    _res_D_b(2, 0) = -_b[0] * _tmp194 + _tmp190 + _tmp191 * _tmp199 - _tmp192;
    _res_D_b(2, 1) = _b[3] * _tmp189 - _tmp196 * _tmp199 + _tmp197 - _tmp198;
    _res_D_b(2, 2) = _tmp171 + _tmp179 + _tmp185 * _tmp199 + _tmp195;
    _res_D_b(2, 3) = 0;
    _res_D_b(2, 4) = 0;
    _res_D_b(2, 5) = 0;
    _res_D_b(3, 0) = 0;
    _res_D_b(3, 1) = 0;
    _res_D_b(3, 2) = 0;
    _res_D_b(3, 3) = _tmp202 * _tmp203 + _tmp206 * _tmp207 + _tmp210 * _tmp211;
    _res_D_b(3, 4) = _tmp203 * _tmp216 + _tmp207 * _tmp214 + _tmp211 * _tmp217;
    _res_D_b(3, 5) = _tmp203 * _tmp219 + _tmp207 * _tmp218 + _tmp211 * _tmp220;
    _res_D_b(4, 0) = 0;
    _res_D_b(4, 1) = 0;
    _res_D_b(4, 2) = 0;
    _res_D_b(4, 3) = _tmp202 * _tmp222 + _tmp206 * _tmp221 + _tmp210 * _tmp223;
    _res_D_b(4, 4) = _tmp214 * _tmp221 + _tmp216 * _tmp222 + _tmp217 * _tmp223;
    _res_D_b(4, 5) = _tmp218 * _tmp221 + _tmp219 * _tmp222 + _tmp220 * _tmp223;
    _res_D_b(5, 0) = 0;
    _res_D_b(5, 1) = 0;
    _res_D_b(5, 2) = 0;
    _res_D_b(5, 3) = _tmp202 * _tmp225 + _tmp206 * _tmp224 + _tmp210 * _tmp226;
    _res_D_b(5, 4) = _tmp214 * _tmp224 + _tmp216 * _tmp225 + _tmp217 * _tmp226;
    _res_D_b(5, 5) = _tmp218 * _tmp224 + _tmp219 * _tmp225 + _tmp220 * _tmp226;
  }

  return sym::Pose3<Scalar>(_res);
}

}  // namespace pose3
}  // namespace sym

// Explicit instantiation
template struct sym::pose3::GroupOps<double>;
template struct sym::pose3::GroupOps<float>;
