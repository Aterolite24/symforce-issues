//  -----------------------------------------------------------------------------
// This file was autogenerated by symforce. Do NOT modify by hand.
// -----------------------------------------------------------------------------
#pragma once

#include <Eigen/Dense>

#include "../lie_group_ops.h"

// Forward declare class, without including header
namespace sym {
template <typename ScalarType>
class Pose3;
}  // namespace sym

namespace sym {

/**
 * C++ LieGroupOps implementation for <class 'symforce.geo.pose3.Pose3'>.
 */
template <typename Scalar>
struct LieGroupOps<Pose3<Scalar>> {
  static constexpr int32_t TangentDim() {
    return 6;
  }

  using TangentVec = Eigen::Matrix<Scalar, TangentDim(), 1>;

  static sym::Pose3<Scalar> FromTangent(const Eigen::Matrix<Scalar, 6, 1>& vec,
                                        const Scalar epsilon);
  static Eigen::Matrix<Scalar, 6, 1> ToTangent(const sym::Pose3<Scalar>& a, const Scalar epsilon);
  static sym::Pose3<Scalar> Retract(const sym::Pose3<Scalar>& a,
                                    const Eigen::Matrix<Scalar, 6, 1>& vec, const Scalar epsilon);
  static Eigen::Matrix<Scalar, 6, 1> LocalCoordinates(const sym::Pose3<Scalar>& a,
                                                      const sym::Pose3<Scalar>& b,
                                                      const Scalar epsilon);
};

}  // namespace sym

// Explicit instantiation
extern template struct sym::LieGroupOps<sym::Pose3<double>>;
extern template struct sym::LieGroupOps<sym::Pose3<float>>;
