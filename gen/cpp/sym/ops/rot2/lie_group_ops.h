//  -----------------------------------------------------------------------------
// This file was autogenerated by symforce. Do NOT modify by hand.
// -----------------------------------------------------------------------------
#pragma once

#include <Eigen/Dense>

#include "../lie_group_ops.h"

// Forward declare class, without including header
namespace sym {
template <typename ScalarType>
class Rot2;
}  // namespace sym

namespace sym {

/**
 * C++ LieGroupOps implementation for <class 'symforce.geo.rot2.Rot2'>.
 */
template <typename Scalar>
struct LieGroupOps<Rot2<Scalar>> {
  static constexpr int32_t TangentDim() {
    return 1;
  }

  using TangentVec = Eigen::Matrix<Scalar, TangentDim(), 1>;

  static sym::Rot2<Scalar> FromTangent(const Eigen::Matrix<Scalar, 1, 1>& vec,
                                       const Scalar epsilon);
  static Eigen::Matrix<Scalar, 1, 1> ToTangent(const sym::Rot2<Scalar>& a, const Scalar epsilon);
  static sym::Rot2<Scalar> Retract(const sym::Rot2<Scalar>& a,
                                   const Eigen::Matrix<Scalar, 1, 1>& vec, const Scalar epsilon);
  static Eigen::Matrix<Scalar, 1, 1> LocalCoordinates(const sym::Rot2<Scalar>& a,
                                                      const sym::Rot2<Scalar>& b,
                                                      const Scalar epsilon);
};

}  // namespace sym
