//  -----------------------------------------------------------------------------
// This file was autogenerated by symforce. Do NOT modify by hand.
// -----------------------------------------------------------------------------
#pragma once

#include <sym/rot2.h>

#include <lcmtypes/symforce/type_t.hpp>

namespace sym {
namespace rot2 {

/**
 * C++ StorageOps implementation for <class 'symforce.geo.rot2.Rot2'>.
 */
template <typename ScalarType>
struct StorageOps {
  using Scalar = typename sym::Rot2<ScalarType>::Scalar;

  static constexpr int32_t StorageDim() {
    return 2;
  }

  static void ToStorage(const sym::Rot2<ScalarType>& a, ScalarType* out);
  static sym::Rot2<ScalarType> FromStorage(const ScalarType* data);

  static symforce::type_t TypeEnum() {
    return symforce::type_t::ROT2;
  }
};

}  // namespace rot2

// Wrapper to specialize the public concept
template <>
struct StorageOps<Rot2<double>> : public rot2::StorageOps<double> {};
template <>
struct StorageOps<Rot2<float>> : public rot2::StorageOps<float> {};

}  // namespace sym
