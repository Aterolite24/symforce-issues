// -----------------------------------------------------------------------------
// This file was autogenerated by symforce. Do NOT modify by hand.
// -----------------------------------------------------------------------------
#pragma once

#include <Eigen/Dense>

#include <geo/rot3.h>


namespace sym {


/**
* Residual that penalizes the difference between a value and prior (desired / measured value).
*
* In vector space terms that would be:
*     prior - value
*
* In lie group terms:
*     to_tangent(compose(inverse(value), prior))
*
* Args:
*     sqrt_info: Square root information matrix to whiten residual. This can be computed from
*                a covariance matrix as the cholesky decomposition of the inverse. In the case
*                of a diagonal it will contain 1/sigma values. Must match the tangent dim.
*
*/
template <typename Scalar>
void PriorFactorRot3(const geo::Rot3<Scalar>& value, const geo::Rot3<Scalar>& prior, const Eigen::Matrix<Scalar, 3, 3>& sqrt_info, const Scalar epsilon, Eigen::Matrix<Scalar, 3, 1>* const res, Eigen::Matrix<Scalar, 3, 3>* const jac) {
    // Input arrays
    const Eigen::Matrix<Scalar, 4, 1>& _value = value.Data();
    const Eigen::Matrix<Scalar, 4, 1>& _prior = prior.Data();
    assert( res != nullptr );
    assert( jac != nullptr );

    // Intermediate terms (75)
    const Scalar _tmp0 = -_prior[0]*_value[1] + _prior[1]*_value[0] - _prior[2]*_value[3] + _prior[3]*_value[2];
    const Scalar _tmp1 = _prior[0]*_value[0] + _prior[1]*_value[1] + _prior[2]*_value[2] + _prior[3]*_value[3];
    const Scalar _tmp2 = -(_tmp1 * _tmp1);
    const Scalar _tmp3 = std::max<Scalar>(epsilon, _tmp2 + 1);
    const Scalar _tmp4 = std::pow(_tmp3, -1.0/2.0);
    const Scalar _tmp5 = -epsilon + 1;
    const Scalar _tmp6 = std::min<Scalar>(_tmp1, _tmp5);
    const Scalar _tmp7 = epsilon - 1;
    const Scalar _tmp8 = std::max<Scalar>(_tmp6, _tmp7);
    const Scalar _tmp9 = std::acos(_tmp8);
    const Scalar _tmp10 = 2*_tmp9;
    const Scalar _tmp11 = _tmp10*_tmp4;
    const Scalar _tmp12 = _tmp0*_tmp11;
    const Scalar _tmp13 = _prior[0]*_value[2] - _prior[1]*_value[3] - _prior[2]*_value[0] + _prior[3]*_value[1];
    const Scalar _tmp14 = _tmp13*sqrt_info(0, 1);
    const Scalar _tmp15 = -_prior[0]*_value[3] - _prior[1]*_value[2] + _prior[2]*_value[1] + _prior[3]*_value[0];
    const Scalar _tmp16 = _tmp15*sqrt_info(0, 0);
    const Scalar _tmp17 = _tmp4*sqrt_info(1, 2);
    const Scalar _tmp18 = _tmp0*_tmp17;
    const Scalar _tmp19 = _tmp13*sqrt_info(1, 1);
    const Scalar _tmp20 = _tmp4*sqrt_info(1, 0);
    const Scalar _tmp21 = _tmp10*_tmp15;
    const Scalar _tmp22 = _tmp4*sqrt_info(2, 1);
    const Scalar _tmp23 = _tmp13*_tmp22;
    const Scalar _tmp24 = _tmp4*sqrt_info(2, 0);
    const Scalar _tmp25 = _prior[0]*_tmp9;
    const Scalar _tmp26 = 2*_tmp25;
    const Scalar _tmp27 = _tmp26*_tmp4;
    const Scalar _tmp28 = _prior[1]*_tmp10;
    const Scalar _tmp29 = _tmp28*_tmp4;
    const Scalar _tmp30 = _tmp1*((((_tmp2 + _tmp5) > 0) - ((_tmp2 + _tmp5) < 0)) + 1)/(_tmp3 * std::sqrt(_tmp3));
    const Scalar _tmp31 = _tmp30*_tmp9;
    const Scalar _tmp32 = _prior[3]*_tmp31;
    const Scalar _tmp33 = _tmp0*sqrt_info(0, 2);
    const Scalar _tmp34 = (1.0/2.0)*((((-_tmp1 + _tmp5) > 0) - ((-_tmp1 + _tmp5) < 0)) + 1)*((((_tmp6 - _tmp7) > 0) - ((_tmp6 - _tmp7) < 0)) + 1)/std::sqrt(-(_tmp8 * _tmp8) + 1);
    const Scalar _tmp35 = _tmp34*_tmp4;
    const Scalar _tmp36 = _prior[3]*_tmp35;
    const Scalar _tmp37 = _prior[2]*_tmp10;
    const Scalar _tmp38 = _tmp37*_tmp4;
    const Scalar _tmp39 = (1.0/2.0)*_tmp14*_tmp32 - 1.0/2.0*_tmp14*_tmp36 + (1.0/2.0)*_tmp16*_tmp32 - 1.0/2.0*_tmp16*_tmp36 - 1.0/2.0*_tmp27*sqrt_info(0, 0) - 1.0/2.0*_tmp29*sqrt_info(0, 1) + (1.0/2.0)*_tmp32*_tmp33 - 1.0/2.0*_tmp33*_tmp36 - 1.0/2.0*_tmp38*sqrt_info(0, 2);
    const Scalar _tmp40 = _prior[2]*_tmp31;
    const Scalar _tmp41 = _prior[2]*_tmp35;
    const Scalar _tmp42 = _prior[3]*_tmp10;
    const Scalar _tmp43 = _tmp4*_tmp42;
    const Scalar _tmp44 = _tmp14*_tmp40 - _tmp14*_tmp41 + _tmp16*_tmp40 - _tmp16*_tmp41 + _tmp27*sqrt_info(0, 1) - _tmp29*sqrt_info(0, 0) + _tmp33*_tmp40 - _tmp33*_tmp41 + _tmp43*sqrt_info(0, 2);
    const Scalar _tmp45 = (1.0/2.0)*_value[1];
    const Scalar _tmp46 = _prior[1]*_tmp31;
    const Scalar _tmp47 = _prior[1]*_tmp35;
    const Scalar _tmp48 = _prior[1]*_tmp33;
    const Scalar _tmp49 = _tmp14*_tmp46 - _tmp14*_tmp47 + _tmp16*_tmp46 - _tmp16*_tmp47 - _tmp27*sqrt_info(0, 2) + _tmp31*_tmp48 - _tmp35*_tmp48 + _tmp38*sqrt_info(0, 0) + _tmp43*sqrt_info(0, 1);
    const Scalar _tmp50 = (1.0/2.0)*_value[2];
    const Scalar _tmp51 = _prior[0]*_tmp35;
    const Scalar _tmp52 = _tmp25*_tmp30;
    const Scalar _tmp53 = -_tmp14*_tmp51 + _tmp14*_tmp52 - _tmp16*_tmp51 + _tmp16*_tmp52 + _tmp29*sqrt_info(0, 2) - _tmp33*_tmp51 + _tmp33*_tmp52 - _tmp38*sqrt_info(0, 1) + _tmp43*sqrt_info(0, 0);
    const Scalar _tmp54 = (1.0/2.0)*_value[3];
    const Scalar _tmp55 = (1.0/2.0)*_value[0];
    const Scalar _tmp56 = _tmp15*sqrt_info(1, 0);
    const Scalar _tmp57 = _tmp18*_tmp34;
    const Scalar _tmp58 = _tmp0*sqrt_info(1, 2);
    const Scalar _tmp59 = _tmp15*_tmp34;
    const Scalar _tmp60 = _tmp20*_tmp59;
    const Scalar _tmp61 = -1.0/2.0*_prior[3]*_tmp57 - 1.0/2.0*_prior[3]*_tmp60 + (1.0/2.0)*_tmp19*_tmp32 - 1.0/2.0*_tmp19*_tmp36 - 1.0/2.0*_tmp27*sqrt_info(1, 0) - 1.0/2.0*_tmp29*sqrt_info(1, 1) + (1.0/2.0)*_tmp32*_tmp56 + (1.0/2.0)*_tmp32*_tmp58 - 1.0/2.0*_tmp38*sqrt_info(1, 2);
    const Scalar _tmp62 = -_prior[2]*_tmp57 - _prior[2]*_tmp60 + _tmp17*_tmp42 + _tmp19*_tmp40 - _tmp19*_tmp41 + _tmp27*sqrt_info(1, 1) - _tmp29*sqrt_info(1, 0) + _tmp40*_tmp56 + _tmp40*_tmp58;
    const Scalar _tmp63 = -_prior[1]*_tmp57 - _prior[1]*_tmp60 + _tmp19*_tmp46 - _tmp19*_tmp47 + _tmp20*_tmp37 - _tmp27*sqrt_info(1, 2) + _tmp43*sqrt_info(1, 1) + _tmp46*_tmp56 + _tmp46*_tmp58;
    const Scalar _tmp64 = -_prior[0]*_tmp57 - _prior[0]*_tmp60 - _tmp19*_tmp51 + _tmp19*_tmp52 + _tmp20*_tmp42 + _tmp29*sqrt_info(1, 2) - _tmp38*sqrt_info(1, 1) + _tmp52*_tmp56 + _tmp52*_tmp58;
    const Scalar _tmp65 = _tmp13*sqrt_info(2, 1);
    const Scalar _tmp66 = _tmp0*sqrt_info(2, 2);
    const Scalar _tmp67 = _tmp23*_tmp34;
    const Scalar _tmp68 = _tmp15*sqrt_info(2, 0);
    const Scalar _tmp69 = _tmp24*_tmp59;
    const Scalar _tmp70 = -_prior[2]*_tmp67 - _prior[2]*_tmp69 + _tmp22*_tmp26 - _tmp24*_tmp28 + _tmp40*_tmp65 + _tmp40*_tmp66 + _tmp40*_tmp68 - _tmp41*_tmp66 + _tmp43*sqrt_info(2, 2);
    const Scalar _tmp71 = _tmp35*_tmp66;
    const Scalar _tmp72 = -_prior[1]*_tmp67 - _prior[1]*_tmp69 - _prior[1]*_tmp71 + _tmp22*_tmp42 + _tmp24*_tmp37 - _tmp27*sqrt_info(2, 2) + _tmp46*_tmp65 + _tmp46*_tmp66 + _tmp46*_tmp68;
    const Scalar _tmp73 = -1.0/2.0*_prior[3]*_tmp67 - 1.0/2.0*_prior[3]*_tmp69 - 1.0/2.0*_tmp22*_tmp28 - 1.0/2.0*_tmp27*sqrt_info(2, 0) + (1.0/2.0)*_tmp32*_tmp65 + (1.0/2.0)*_tmp32*_tmp66 + (1.0/2.0)*_tmp32*_tmp68 - 1.0/2.0*_tmp36*_tmp66 - 1.0/2.0*_tmp38*sqrt_info(2, 2);
    const Scalar _tmp74 = -_prior[0]*_tmp67 - _prior[0]*_tmp69 - _prior[0]*_tmp71 - _tmp22*_tmp37 + _tmp24*_tmp42 + _tmp29*sqrt_info(2, 2) + _tmp52*_tmp65 + _tmp52*_tmp66 + _tmp52*_tmp68;

    // Output terms (2)
    Eigen::Matrix<Scalar, 3, 1>& _res = (*res);
    Eigen::Matrix<Scalar, 3, 3>& _jac = (*jac);

    _res(0, 0) = _tmp11*_tmp14 + _tmp11*_tmp16 + _tmp12*sqrt_info(0, 2);
    _res(1, 0) = _tmp10*_tmp18 + _tmp11*_tmp19 + _tmp20*_tmp21;
    _res(2, 0) = _tmp10*_tmp23 + _tmp12*sqrt_info(2, 2) + _tmp21*_tmp24;
    _jac(0, 0) = -_tmp39*_value[0] - _tmp44*_tmp45 + _tmp49*_tmp50 + _tmp53*_tmp54;
    _jac(0, 1) = -_tmp39*_value[1] + _tmp44*_tmp55 + _tmp49*_tmp54 - _tmp50*_tmp53;
    _jac(0, 2) = -_tmp39*_value[2] + _tmp44*_tmp54 + _tmp45*_tmp53 - _tmp49*_tmp55;
    _jac(1, 0) = -_tmp45*_tmp62 + _tmp50*_tmp63 + _tmp54*_tmp64 - _tmp61*_value[0];
    _jac(1, 1) = -_tmp50*_tmp64 + _tmp54*_tmp63 + _tmp55*_tmp62 - _tmp61*_value[1];
    _jac(1, 2) = _tmp45*_tmp64 + _tmp54*_tmp62 - _tmp55*_tmp63 - _tmp61*_value[2];
    _jac(2, 0) = -_tmp45*_tmp70 + _tmp50*_tmp72 + _tmp54*_tmp74 - _tmp73*_value[0];
    _jac(2, 1) = -_tmp50*_tmp74 + _tmp54*_tmp72 + _tmp55*_tmp70 - _tmp73*_value[1];
    _jac(2, 2) = _tmp45*_tmp74 + _tmp54*_tmp70 - _tmp55*_tmp72 - _tmp73*_value[2];



}

}  // namespace sym
