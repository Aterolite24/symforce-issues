// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     cpp_templates/function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>
#include <sym/rot3.h>

namespace sym {

/**
 * Residual that penalizes the difference between a value and prior (desired / measured value).
 *
 * In vector space terms that would be:
 *     prior - value
 *
 * In lie group terms:
 *     to_tangent(compose(inverse(value), prior))
 *
 * Args:
 *     sqrt_info: Square root information matrix to whiten residual. This can be computed from
 *                a covariance matrix as the cholesky decomposition of the inverse. In the case
 *                of a diagonal it will contain 1/sigma values. Must match the tangent dim.
 *     jacobian: (3x3) jacobian of res wrt arg value (3)
 *     hessian: (3x3) Gauss-Newton hessian for arg value (3)
 *     rhs: (3x1) Gauss-Newton rhs for arg value (3)
 */
template <typename Scalar>
void PriorFactorRot3(const sym::Rot3<Scalar>& value, const sym::Rot3<Scalar>& prior,
                     const Eigen::Matrix<Scalar, 3, 3>& sqrt_info, const Scalar epsilon,
                     Eigen::Matrix<Scalar, 3, 1>* const res = nullptr,
                     Eigen::Matrix<Scalar, 3, 3>* const jacobian = nullptr,
                     Eigen::Matrix<Scalar, 3, 3>* const hessian = nullptr,
                     Eigen::Matrix<Scalar, 3, 1>* const rhs = nullptr) {
  // Total ops: 511

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _value = value.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _prior = prior.Data();

  // Intermediate terms (80)
  const Scalar _tmp0 =
      _prior[0] * _value[0] + _prior[1] * _value[1] + _prior[2] * _value[2] + _prior[3] * _value[3];
  const Scalar _tmp1 = (((_tmp0) > 0) - ((_tmp0) < 0));
  const Scalar _tmp2 = 2 * std::min<Scalar>(0, _tmp1) + 1;
  const Scalar _tmp3 = std::fabs(_tmp0);
  const Scalar _tmp4 = 1 - epsilon;
  const Scalar _tmp5 = std::min<Scalar>(_tmp3, _tmp4);
  const Scalar _tmp6 = std::acos(_tmp5);
  const Scalar _tmp7 = 1 - std::pow(_tmp5, Scalar(2));
  const Scalar _tmp8 = 2 * _tmp6 / std::sqrt(_tmp7);
  const Scalar _tmp9 = _tmp2 * _tmp8;
  const Scalar _tmp10 =
      _prior[0] * _value[2] - _prior[1] * _value[3] - _prior[2] * _value[0] + _prior[3] * _value[1];
  const Scalar _tmp11 = _tmp10 * sqrt_info(0, 1);
  const Scalar _tmp12 = -_prior[0] * _value[3] - _prior[1] * _value[2] + _prior[2] * _value[1] +
                        _prior[3] * _value[0];
  const Scalar _tmp13 = _tmp12 * _tmp9;
  const Scalar _tmp14 = -_prior[0] * _value[1] + _prior[1] * _value[0] - _prior[2] * _value[3] +
                        _prior[3] * _value[2];
  const Scalar _tmp15 = _tmp14 * _tmp9;
  const Scalar _tmp16 = _tmp11 * _tmp9 + _tmp13 * sqrt_info(0, 0) + _tmp15 * sqrt_info(0, 2);
  const Scalar _tmp17 = _tmp10 * _tmp9;
  const Scalar _tmp18 =
      _tmp13 * sqrt_info(1, 0) + _tmp15 * sqrt_info(1, 2) + _tmp17 * sqrt_info(1, 1);
  const Scalar _tmp19 = _tmp9 * sqrt_info(2, 0);
  const Scalar _tmp20 = _tmp12 * _tmp19 + _tmp15 * sqrt_info(2, 2) + _tmp17 * sqrt_info(2, 1);
  const Scalar _tmp21 = _tmp12 * sqrt_info(0, 0);
  const Scalar _tmp22 = _tmp1 * ((((-_tmp3 + _tmp4) > 0) - ((-_tmp3 + _tmp4) < 0)) + 1);
  const Scalar _tmp23 = _tmp22 * _tmp5 * _tmp6 / (_tmp7 * std::sqrt(_tmp7));
  const Scalar _tmp24 = _tmp2 * _tmp23;
  const Scalar _tmp25 = _prior[3] * _tmp24;
  const Scalar _tmp26 = _tmp22 / _tmp7;
  const Scalar _tmp27 = _tmp2 * _tmp26;
  const Scalar _tmp28 = _prior[3] * _tmp27;
  const Scalar _tmp29 = _tmp14 * sqrt_info(0, 2);
  const Scalar _tmp30 = _tmp11 * _tmp23;
  const Scalar _tmp31 = _tmp2 * _tmp30;
  const Scalar _tmp32 = _prior[2] * _tmp9;
  const Scalar _tmp33 = _prior[0] * _tmp9;
  const Scalar _tmp34 = _prior[1] * _tmp2;
  const Scalar _tmp35 = _tmp34 * _tmp8;
  const Scalar _tmp36 = _prior[3] * _tmp31 - _tmp11 * _tmp28 + _tmp21 * _tmp25 - _tmp21 * _tmp28 +
                        _tmp25 * _tmp29 - _tmp28 * _tmp29 - _tmp32 * sqrt_info(0, 2) -
                        _tmp33 * sqrt_info(0, 0) - _tmp35 * sqrt_info(0, 1);
  const Scalar _tmp37 = (Scalar(1) / Scalar(2)) * _tmp36;
  const Scalar _tmp38 = _tmp34 * sqrt_info(0, 0);
  const Scalar _tmp39 = _tmp12 * _tmp38;
  const Scalar _tmp40 = _tmp26 * _tmp34;
  const Scalar _tmp41 = _tmp23 * _tmp34;
  const Scalar _tmp42 = _prior[3] * _tmp9;
  const Scalar _tmp43 =
      -Scalar(1) / Scalar(2) * _tmp11 * _tmp40 + (Scalar(1) / Scalar(2)) * _tmp23 * _tmp39 -
      Scalar(1) / Scalar(2) * _tmp26 * _tmp39 - Scalar(1) / Scalar(2) * _tmp29 * _tmp40 +
      (Scalar(1) / Scalar(2)) * _tmp29 * _tmp41 + (Scalar(1) / Scalar(2)) * _tmp30 * _tmp34 +
      (Scalar(1) / Scalar(2)) * _tmp32 * sqrt_info(0, 0) -
      Scalar(1) / Scalar(2) * _tmp33 * sqrt_info(0, 2) +
      (Scalar(1) / Scalar(2)) * _tmp42 * sqrt_info(0, 1);
  const Scalar _tmp44 = _prior[2] * _tmp24;
  const Scalar _tmp45 = _prior[2] * _tmp27;
  const Scalar _tmp46 = _tmp14 * _tmp45;
  const Scalar _tmp47 =
      (Scalar(1) / Scalar(2)) * _prior[2] * _tmp31 - Scalar(1) / Scalar(2) * _tmp11 * _tmp45 +
      (Scalar(1) / Scalar(2)) * _tmp21 * _tmp44 - Scalar(1) / Scalar(2) * _tmp21 * _tmp45 +
      (Scalar(1) / Scalar(2)) * _tmp29 * _tmp44 +
      (Scalar(1) / Scalar(2)) * _tmp33 * sqrt_info(0, 1) - Scalar(1) / Scalar(2) * _tmp38 * _tmp8 +
      (Scalar(1) / Scalar(2)) * _tmp42 * sqrt_info(0, 2) -
      Scalar(1) / Scalar(2) * _tmp46 * sqrt_info(0, 2);
  const Scalar _tmp48 = _prior[0] * _tmp24;
  const Scalar _tmp49 = _prior[0] * _tmp27;
  const Scalar _tmp50 =
      (Scalar(1) / Scalar(2)) * _prior[0] * _tmp31 - Scalar(1) / Scalar(2) * _tmp11 * _tmp49 +
      (Scalar(1) / Scalar(2)) * _tmp21 * _tmp48 - Scalar(1) / Scalar(2) * _tmp21 * _tmp49 +
      (Scalar(1) / Scalar(2)) * _tmp29 * _tmp48 - Scalar(1) / Scalar(2) * _tmp29 * _tmp49 -
      Scalar(1) / Scalar(2) * _tmp32 * sqrt_info(0, 1) +
      (Scalar(1) / Scalar(2)) * _tmp35 * sqrt_info(0, 2) +
      (Scalar(1) / Scalar(2)) * _tmp42 * sqrt_info(0, 0);
  const Scalar _tmp51 =
      -_tmp37 * _value[0] + _tmp43 * _value[2] - _tmp47 * _value[1] + _tmp50 * _value[3];
  const Scalar _tmp52 =
      -_tmp37 * _value[1] + _tmp43 * _value[3] + _tmp47 * _value[0] - _tmp50 * _value[2];
  const Scalar _tmp53 = (Scalar(1) / Scalar(2)) * _value[2];
  const Scalar _tmp54 =
      -_tmp36 * _tmp53 - _tmp43 * _value[0] + _tmp47 * _value[3] + _tmp50 * _value[1];
  const Scalar _tmp55 = _tmp12 * sqrt_info(1, 0);
  const Scalar _tmp56 = _tmp14 * sqrt_info(1, 2);
  const Scalar _tmp57 = _tmp10 * sqrt_info(1, 1);
  const Scalar _tmp58 = _tmp12 * _tmp28;
  const Scalar _tmp59 = _tmp25 * _tmp55 + _tmp25 * _tmp56 + _tmp25 * _tmp57 - _tmp28 * _tmp56 -
                        _tmp28 * _tmp57 - _tmp32 * sqrt_info(1, 2) - _tmp33 * sqrt_info(1, 0) -
                        _tmp35 * sqrt_info(1, 1) - _tmp58 * sqrt_info(1, 0);
  const Scalar _tmp60 = (Scalar(1) / Scalar(2)) * _tmp59;
  const Scalar _tmp61 =
      (Scalar(1) / Scalar(2)) * _tmp32 * sqrt_info(1, 0) -
      Scalar(1) / Scalar(2) * _tmp33 * sqrt_info(1, 2) - Scalar(1) / Scalar(2) * _tmp40 * _tmp55 -
      Scalar(1) / Scalar(2) * _tmp40 * _tmp56 - Scalar(1) / Scalar(2) * _tmp40 * _tmp57 +
      (Scalar(1) / Scalar(2)) * _tmp41 * _tmp55 + (Scalar(1) / Scalar(2)) * _tmp41 * _tmp56 +
      (Scalar(1) / Scalar(2)) * _tmp41 * _tmp57 +
      (Scalar(1) / Scalar(2)) * _tmp42 * sqrt_info(1, 1);
  const Scalar _tmp62 = -_tmp32 * sqrt_info(1, 1) + _tmp35 * sqrt_info(1, 2) +
                        _tmp42 * sqrt_info(1, 0) + _tmp48 * _tmp55 + _tmp48 * _tmp56 +
                        _tmp48 * _tmp57 - _tmp49 * _tmp55 - _tmp49 * _tmp56 - _tmp49 * _tmp57;
  const Scalar _tmp63 = (Scalar(1) / Scalar(2)) * _tmp62;
  const Scalar _tmp64 =
      (Scalar(1) / Scalar(2)) * _tmp33 * sqrt_info(1, 1) -
      Scalar(1) / Scalar(2) * _tmp35 * sqrt_info(1, 0) +
      (Scalar(1) / Scalar(2)) * _tmp42 * sqrt_info(1, 2) +
      (Scalar(1) / Scalar(2)) * _tmp44 * _tmp55 + (Scalar(1) / Scalar(2)) * _tmp44 * _tmp56 +
      (Scalar(1) / Scalar(2)) * _tmp44 * _tmp57 - Scalar(1) / Scalar(2) * _tmp45 * _tmp55 -
      Scalar(1) / Scalar(2) * _tmp45 * _tmp57 - Scalar(1) / Scalar(2) * _tmp46 * sqrt_info(1, 2);
  const Scalar _tmp65 =
      -_tmp60 * _value[0] + _tmp61 * _value[2] + _tmp63 * _value[3] - _tmp64 * _value[1];
  const Scalar _tmp66 =
      -_tmp53 * _tmp62 - _tmp60 * _value[1] + _tmp61 * _value[3] + _tmp64 * _value[0];
  const Scalar _tmp67 =
      -_tmp53 * _tmp59 - _tmp61 * _value[0] + _tmp63 * _value[1] + _tmp64 * _value[3];
  const Scalar _tmp68 = _tmp12 * sqrt_info(2, 0);
  const Scalar _tmp69 = _tmp14 * sqrt_info(2, 2);
  const Scalar _tmp70 = _tmp10 * sqrt_info(2, 1);
  const Scalar _tmp71 = -_tmp32 * sqrt_info(2, 1) + _tmp35 * sqrt_info(2, 2) +
                        _tmp42 * sqrt_info(2, 0) + _tmp48 * _tmp68 + _tmp48 * _tmp69 +
                        _tmp48 * _tmp70 - _tmp49 * _tmp68 - _tmp49 * _tmp69 - _tmp49 * _tmp70;
  const Scalar _tmp72 = (Scalar(1) / Scalar(2)) * _tmp71;
  const Scalar _tmp73 =
      (Scalar(1) / Scalar(2)) * _tmp33 * sqrt_info(2, 1) -
      Scalar(1) / Scalar(2) * _tmp35 * sqrt_info(2, 0) +
      (Scalar(1) / Scalar(2)) * _tmp42 * sqrt_info(2, 2) +
      (Scalar(1) / Scalar(2)) * _tmp44 * _tmp68 + (Scalar(1) / Scalar(2)) * _tmp44 * _tmp69 +
      (Scalar(1) / Scalar(2)) * _tmp44 * _tmp70 - Scalar(1) / Scalar(2) * _tmp45 * _tmp68 -
      Scalar(1) / Scalar(2) * _tmp45 * _tmp70 - Scalar(1) / Scalar(2) * _tmp46 * sqrt_info(2, 2);
  const Scalar _tmp74 = _prior[2] * _tmp19 - _tmp33 * sqrt_info(2, 2) - _tmp40 * _tmp68 -
                        _tmp40 * _tmp69 - _tmp40 * _tmp70 + _tmp41 * _tmp68 + _tmp41 * _tmp69 +
                        _tmp41 * _tmp70 + _tmp42 * sqrt_info(2, 1);
  const Scalar _tmp75 =
      (Scalar(1) / Scalar(2)) * _tmp25 * _tmp68 + (Scalar(1) / Scalar(2)) * _tmp25 * _tmp69 +
      (Scalar(1) / Scalar(2)) * _tmp25 * _tmp70 - Scalar(1) / Scalar(2) * _tmp28 * _tmp69 -
      Scalar(1) / Scalar(2) * _tmp28 * _tmp70 - Scalar(1) / Scalar(2) * _tmp32 * sqrt_info(2, 2) -
      Scalar(1) / Scalar(2) * _tmp33 * sqrt_info(2, 0) -
      Scalar(1) / Scalar(2) * _tmp35 * sqrt_info(2, 1) -
      Scalar(1) / Scalar(2) * _tmp58 * sqrt_info(2, 0);
  const Scalar _tmp76 =
      _tmp53 * _tmp74 + _tmp72 * _value[3] - _tmp73 * _value[1] - _tmp75 * _value[0];
  const Scalar _tmp77 = (Scalar(1) / Scalar(2)) * _tmp74;
  const Scalar _tmp78 =
      -_tmp53 * _tmp71 + _tmp73 * _value[0] - _tmp75 * _value[1] + _tmp77 * _value[3];
  const Scalar _tmp79 =
      _tmp72 * _value[1] + _tmp73 * _value[3] - _tmp75 * _value[2] - _tmp77 * _value[0];

  // Output terms (4)
  if (res != nullptr) {
    Eigen::Matrix<Scalar, 3, 1>& _res = (*res);

    _res(0, 0) = _tmp16;
    _res(1, 0) = _tmp18;
    _res(2, 0) = _tmp20;
  }

  if (jacobian != nullptr) {
    Eigen::Matrix<Scalar, 3, 3>& _jacobian = (*jacobian);

    _jacobian(0, 0) = _tmp51;
    _jacobian(0, 1) = _tmp52;
    _jacobian(0, 2) = _tmp54;
    _jacobian(1, 0) = _tmp65;
    _jacobian(1, 1) = _tmp66;
    _jacobian(1, 2) = _tmp67;
    _jacobian(2, 0) = _tmp76;
    _jacobian(2, 1) = _tmp78;
    _jacobian(2, 2) = _tmp79;
  }

  if (hessian != nullptr) {
    Eigen::Matrix<Scalar, 3, 3>& _hessian = (*hessian);

    _hessian(0, 0) =
        std::pow(_tmp51, Scalar(2)) + std::pow(_tmp65, Scalar(2)) + std::pow(_tmp76, Scalar(2));
    _hessian(0, 1) = 0;
    _hessian(0, 2) = 0;
    _hessian(1, 0) = _tmp51 * _tmp52 + _tmp65 * _tmp66 + _tmp76 * _tmp78;
    _hessian(1, 1) =
        std::pow(_tmp52, Scalar(2)) + std::pow(_tmp66, Scalar(2)) + std::pow(_tmp78, Scalar(2));
    _hessian(1, 2) = 0;
    _hessian(2, 0) = _tmp51 * _tmp54 + _tmp65 * _tmp67 + _tmp76 * _tmp79;
    _hessian(2, 1) = _tmp52 * _tmp54 + _tmp66 * _tmp67 + _tmp78 * _tmp79;
    _hessian(2, 2) =
        std::pow(_tmp54, Scalar(2)) + std::pow(_tmp67, Scalar(2)) + std::pow(_tmp79, Scalar(2));
  }

  if (rhs != nullptr) {
    Eigen::Matrix<Scalar, 3, 1>& _rhs = (*rhs);

    _rhs(0, 0) = _tmp16 * _tmp51 + _tmp18 * _tmp65 + _tmp20 * _tmp76;
    _rhs(1, 0) = _tmp16 * _tmp52 + _tmp18 * _tmp66 + _tmp20 * _tmp78;
    _rhs(2, 0) = _tmp16 * _tmp54 + _tmp18 * _tmp67 + _tmp20 * _tmp79;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
