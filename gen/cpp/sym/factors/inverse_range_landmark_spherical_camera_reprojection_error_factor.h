// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     cpp_templates/function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/pose3.h>

namespace sym {

/**
 * Return the 2dof residual of reprojecting the landmark ray into the target spherical camera and
 * comparing it against the correspondence.
 *
 * The landmark is specified as a camera point in the source camera with an inverse range; this
 * means the landmark is fixed in the source camera and always has residual 0 there (this 0 residual
 * is not returned, only the residual in the target camera is returned).
 *
 * The norm of the residual is whitened using the Barron noise model.  Whitening each component of
 * the reprojection error separately would result in rejecting individual components as outliers.
 * Instead, we minimize the whitened norm of the full reprojection error for each point.  See the
 * docstring for `NoiseModel.whiten_norm` for more information on this, and the docstring of
 * `BarronNoiseModel` for more information on the noise model.
 *
 * Args:
 *     source_pose: The pose of the source camera
 *     target_pose: The pose of the target camera
 *     target_calibration_storage: The storage vector of the target spherical camera calibration
 *     source_inverse_range: The inverse range of the landmark in the source camera
 *     p_camera_source: The location of the landmark in the source camera coordinate, will be
 * normalized target_pixel: The location of the correspondence in the target camera weight: The
 * weight of the factor gnc_mu: The mu convexity parameter for the Barron noise model gnc_scale: The
 * scale parameter for the Barron noise model epsilon: Small positive value
 *
 * Outputs:
 *     res: 2dof whiten residual of the reprojection
 *     jacobian: (2x13) jacobian of res wrt args source_pose (6), target_pose (6),
 *               source_inverse_range (1)
 *     hessian: (13x13) Gauss-Newton hessian for args source_pose (6), target_pose (6),
 *              source_inverse_range (1)
 *     rhs: (13x1) Gauss-Newton rhs for args source_pose (6), target_pose (6), source_inverse_range
 *          (1)
 */
template <typename Scalar>
void InverseRangeLandmarkSphericalCameraReprojectionErrorFactor(
    const sym::Pose3<Scalar>& source_pose, const sym::Pose3<Scalar>& target_pose,
    const Eigen::Matrix<Scalar, 9, 1>& target_calibration_storage,
    const Scalar source_inverse_range, const Eigen::Matrix<Scalar, 3, 1>& p_camera_source,
    const Eigen::Matrix<Scalar, 2, 1>& target_pixel, const Scalar weight, const Scalar gnc_mu,
    const Scalar gnc_scale, const Scalar epsilon, Eigen::Matrix<Scalar, 2, 1>* const res = nullptr,
    Eigen::Matrix<Scalar, 2, 13>* const jacobian = nullptr,
    Eigen::Matrix<Scalar, 13, 13>* const hessian = nullptr,
    Eigen::Matrix<Scalar, 13, 1>* const rhs = nullptr) {
  // Total ops: 1289

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _source_pose = source_pose.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _target_pose = target_pose.Data();

  // Intermediate terms (313)
  const Scalar _tmp0 = std::pow(_target_pose[1], Scalar(2));
  const Scalar _tmp1 = -2 * _tmp0;
  const Scalar _tmp2 = std::pow(_target_pose[2], Scalar(2));
  const Scalar _tmp3 = 1 - 2 * _tmp2;
  const Scalar _tmp4 = _tmp1 + _tmp3;
  const Scalar _tmp5 = 2 * _source_pose[0];
  const Scalar _tmp6 = _source_pose[1] * _tmp5;
  const Scalar _tmp7 = 2 * _source_pose[2] * _source_pose[3];
  const Scalar _tmp8 = -_tmp7;
  const Scalar _tmp9 = std::pow(Scalar(epsilon + std::pow(p_camera_source(0, 0), Scalar(2)) +
                                       std::pow(p_camera_source(1, 0), Scalar(2)) +
                                       std::pow(p_camera_source(2, 0), Scalar(2))),
                                Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp10 = _tmp9 * (_tmp6 + _tmp8);
  const Scalar _tmp11 = _source_pose[2] * _tmp5;
  const Scalar _tmp12 = 2 * _source_pose[1];
  const Scalar _tmp13 = _source_pose[3] * _tmp12;
  const Scalar _tmp14 = _tmp11 + _tmp13;
  const Scalar _tmp15 = _tmp9 * p_camera_source(2, 0);
  const Scalar _tmp16 = std::pow(_source_pose[2], Scalar(2));
  const Scalar _tmp17 = -2 * _tmp16;
  const Scalar _tmp18 = std::pow(_source_pose[1], Scalar(2));
  const Scalar _tmp19 = -2 * _tmp18;
  const Scalar _tmp20 = _tmp9 * p_camera_source(0, 0);
  const Scalar _tmp21 = _source_pose[4] - _target_pose[4];
  const Scalar _tmp22 = _tmp10 * p_camera_source(1, 0) + _tmp14 * _tmp15 +
                        _tmp20 * (_tmp17 + _tmp19 + 1) + _tmp21 * source_inverse_range;
  const Scalar _tmp23 = 2 * _target_pose[2];
  const Scalar _tmp24 = _target_pose[0] * _tmp23;
  const Scalar _tmp25 = 2 * _target_pose[1];
  const Scalar _tmp26 = _target_pose[3] * _tmp25;
  const Scalar _tmp27 = -_tmp26;
  const Scalar _tmp28 = _tmp24 + _tmp27;
  const Scalar _tmp29 = _source_pose[3] * _tmp5;
  const Scalar _tmp30 = _source_pose[2] * _tmp12;
  const Scalar _tmp31 = _tmp29 + _tmp30;
  const Scalar _tmp32 = _tmp9 * p_camera_source(1, 0);
  const Scalar _tmp33 = -_tmp13;
  const Scalar _tmp34 = _tmp11 + _tmp33;
  const Scalar _tmp35 = std::pow(_source_pose[0], Scalar(2));
  const Scalar _tmp36 = 1 - 2 * _tmp35;
  const Scalar _tmp37 = _source_pose[6] - _target_pose[6];
  const Scalar _tmp38 = _tmp15 * (_tmp19 + _tmp36) + _tmp20 * _tmp34 + _tmp31 * _tmp32 +
                        _tmp37 * source_inverse_range;
  const Scalar _tmp39 = _target_pose[3] * _tmp23;
  const Scalar _tmp40 = _target_pose[0] * _tmp25;
  const Scalar _tmp41 = _tmp39 + _tmp40;
  const Scalar _tmp42 = _tmp6 + _tmp7;
  const Scalar _tmp43 = -_tmp29;
  const Scalar _tmp44 = _tmp30 + _tmp43;
  const Scalar _tmp45 = _source_pose[5] - _target_pose[5];
  const Scalar _tmp46 = _tmp15 * _tmp44 + _tmp20 * _tmp42 + _tmp32 * (_tmp17 + _tmp36) +
                        _tmp45 * source_inverse_range;
  const Scalar _tmp47 = _tmp28 * _tmp38 + _tmp41 * _tmp46;
  const Scalar _tmp48 = _tmp22 * _tmp4 + _tmp47;
  const Scalar _tmp49 = std::pow(_tmp48, Scalar(2));
  const Scalar _tmp50 = std::pow(_target_pose[0], Scalar(2));
  const Scalar _tmp51 = -2 * _tmp50;
  const Scalar _tmp52 = _tmp3 + _tmp51;
  const Scalar _tmp53 = _target_pose[2] * _tmp25;
  const Scalar _tmp54 = 2 * _target_pose[0] * _target_pose[3];
  const Scalar _tmp55 = _tmp53 + _tmp54;
  const Scalar _tmp56 = -_tmp39;
  const Scalar _tmp57 = _tmp40 + _tmp56;
  const Scalar _tmp58 = _tmp22 * _tmp57 + _tmp38 * _tmp55;
  const Scalar _tmp59 = _tmp46 * _tmp52 + _tmp58;
  const Scalar _tmp60 = std::pow(_tmp59, Scalar(2));
  const Scalar _tmp61 = _tmp49 + _tmp60 + epsilon;
  const Scalar _tmp62 = std::sqrt(_tmp61);
  const Scalar _tmp63 = _tmp1 + _tmp51 + 1;
  const Scalar _tmp64 = -_tmp54;
  const Scalar _tmp65 = _tmp53 + _tmp64;
  const Scalar _tmp66 = _tmp24 + _tmp26;
  const Scalar _tmp67 = _tmp22 * _tmp66 + _tmp46 * _tmp65;
  const Scalar _tmp68 = _tmp38 * _tmp63 + _tmp67;
  const Scalar _tmp69 = std::atan2(_tmp62, _tmp68);
  const Scalar _tmp70 = -epsilon;
  const Scalar _tmp71 = std::min<Scalar>(_tmp69, _tmp70 + target_calibration_storage(4, 0));
  const Scalar _tmp72 = std::pow(_tmp71, Scalar(9)) * target_calibration_storage(8, 0) +
                        std::pow(_tmp71, Scalar(7)) * target_calibration_storage(7, 0) +
                        std::pow(_tmp71, Scalar(5)) * target_calibration_storage(6, 0) +
                        [&]() {
                          const Scalar base = _tmp71;
                          return base * base * base;
                        }() *
                            target_calibration_storage(5, 0) +
                        _tmp71;
  const Scalar _tmp73 = Scalar(1.0) / (_tmp62);
  const Scalar _tmp74 = _tmp48 * _tmp73;
  const Scalar _tmp75 = _tmp74 * target_calibration_storage(0, 0);
  const Scalar _tmp76 = _tmp72 * _tmp75 + target_calibration_storage(2, 0) - target_pixel(0, 0);
  const Scalar _tmp77 = _tmp59 * _tmp73;
  const Scalar _tmp78 = _tmp77 * target_calibration_storage(1, 0);
  const Scalar _tmp79 = _tmp72 * _tmp78 + target_calibration_storage(3, 0) - target_pixel(1, 0);
  const Scalar _tmp80 = std::pow(_tmp76, Scalar(2)) + std::pow(_tmp79, Scalar(2)) + epsilon;
  const Scalar _tmp81 = std::pow(_tmp80, Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp82 = -_tmp69 + target_calibration_storage(4, 0);
  const Scalar _tmp83 =
      std::sqrt(weight) * std::sqrt(std::max<Scalar>(0, (((_tmp82) > 0) - ((_tmp82) < 0))));
  const Scalar _tmp84 = Scalar(1.0) / (epsilon - gnc_mu + 1);
  const Scalar _tmp85 = epsilon + std::fabs(_tmp84);
  const Scalar _tmp86 = std::pow(gnc_scale, Scalar(-2));
  const Scalar _tmp87 = _tmp80 * _tmp86 / _tmp85 + 1;
  const Scalar _tmp88 = 2 - _tmp84;
  const Scalar _tmp89 =
      _tmp88 + epsilon * (2 * std::min<Scalar>(0, (((_tmp88) > 0) - ((_tmp88) < 0))) + 1);
  const Scalar _tmp90 = (Scalar(1) / Scalar(2)) * _tmp89;
  const Scalar _tmp91 = std::sqrt(2) * std::sqrt(_tmp85 * (std::pow(_tmp87, _tmp90) - 1) / _tmp89);
  const Scalar _tmp92 = _tmp83 * _tmp91;
  const Scalar _tmp93 = _tmp81 * _tmp92;
  const Scalar _tmp94 = _tmp76 * _tmp93;
  const Scalar _tmp95 = _tmp79 * _tmp93;
  const Scalar _tmp96 = std::pow(_source_pose[3], Scalar(2));
  const Scalar _tmp97 = -_tmp96;
  const Scalar _tmp98 = -_tmp18;
  const Scalar _tmp99 = _tmp15 * (_tmp16 + _tmp35 + _tmp97 + _tmp98) + _tmp32 * _tmp44;
  const Scalar _tmp100 = -_tmp30;
  const Scalar _tmp101 = _tmp96 + _tmp98;
  const Scalar _tmp102 = -_tmp35;
  const Scalar _tmp103 = _tmp102 + _tmp16;
  const Scalar _tmp104 = _tmp15 * (_tmp100 + _tmp43) + _tmp32 * (_tmp101 + _tmp103);
  const Scalar _tmp105 = -_tmp6;
  const Scalar _tmp106 = _tmp14 * _tmp32 + _tmp15 * (_tmp105 + _tmp7);
  const Scalar _tmp107 = std::pow(_tmp68, Scalar(2));
  const Scalar _tmp108 = _tmp62 / _tmp107;
  const Scalar _tmp109 = _tmp104 * _tmp55 + _tmp106 * _tmp57 + _tmp52 * _tmp99;
  const Scalar _tmp110 = 2 * _tmp59;
  const Scalar _tmp111 = _tmp104 * _tmp28 + _tmp106 * _tmp4 + _tmp41 * _tmp99;
  const Scalar _tmp112 = 2 * _tmp48;
  const Scalar _tmp113 = _tmp109 * _tmp110 + _tmp111 * _tmp112;
  const Scalar _tmp114 = Scalar(1.0) / (_tmp68);
  const Scalar _tmp115 = _tmp114 * _tmp73;
  const Scalar _tmp116 = (Scalar(1) / Scalar(2)) * _tmp115;
  const Scalar _tmp117 =
      -_tmp108 * (_tmp104 * _tmp63 + _tmp106 * _tmp66 + _tmp65 * _tmp99) + _tmp113 * _tmp116;
  const Scalar _tmp118 =
      ((((_tmp70 + _tmp82) > 0) - ((_tmp70 + _tmp82) < 0)) + 1) / (_tmp107 + _tmp61);
  const Scalar _tmp119 = _tmp107 * _tmp118;
  const Scalar _tmp120 = (Scalar(1) / Scalar(2)) * _tmp119;
  const Scalar _tmp121 = std::pow(_tmp71, Scalar(4)) * target_calibration_storage(6, 0);
  const Scalar _tmp122 = (Scalar(5) / Scalar(2)) * _tmp121;
  const Scalar _tmp123 = _tmp119 * _tmp122;
  const Scalar _tmp124 = std::pow(_tmp71, Scalar(6)) * target_calibration_storage(7, 0);
  const Scalar _tmp125 = (Scalar(7) / Scalar(2)) * _tmp124;
  const Scalar _tmp126 = _tmp119 * _tmp125;
  const Scalar _tmp127 = std::pow(_tmp71, Scalar(8)) * target_calibration_storage(8, 0);
  const Scalar _tmp128 = (Scalar(9) / Scalar(2)) * _tmp127;
  const Scalar _tmp129 = _tmp119 * _tmp128;
  const Scalar _tmp130 = std::pow(_tmp71, Scalar(2)) * target_calibration_storage(5, 0);
  const Scalar _tmp131 = (Scalar(3) / Scalar(2)) * _tmp130;
  const Scalar _tmp132 = _tmp119 * _tmp131;
  const Scalar _tmp133 = _tmp117 * _tmp120 + _tmp117 * _tmp123 + _tmp117 * _tmp126 +
                         _tmp117 * _tmp129 + _tmp117 * _tmp132;
  const Scalar _tmp134 = _tmp72 * _tmp73;
  const Scalar _tmp135 = _tmp134 * target_calibration_storage(0, 0);
  const Scalar _tmp136 = _tmp72 / (_tmp61 * std::sqrt(_tmp61));
  const Scalar _tmp137 = _tmp136 * target_calibration_storage(0, 0);
  const Scalar _tmp138 = _tmp137 * _tmp48;
  const Scalar _tmp139 = (Scalar(1) / Scalar(2)) * _tmp113;
  const Scalar _tmp140 = _tmp111 * _tmp135 + _tmp133 * _tmp75 - _tmp138 * _tmp139;
  const Scalar _tmp141 = 2 * _tmp76;
  const Scalar _tmp142 = _tmp136 * target_calibration_storage(1, 0);
  const Scalar _tmp143 = _tmp142 * _tmp59;
  const Scalar _tmp144 = _tmp134 * target_calibration_storage(1, 0);
  const Scalar _tmp145 = _tmp109 * _tmp144 + _tmp133 * _tmp78 - _tmp139 * _tmp143;
  const Scalar _tmp146 = 2 * _tmp79;
  const Scalar _tmp147 = _tmp140 * _tmp141 + _tmp145 * _tmp146;
  const Scalar _tmp148 = (Scalar(1) / Scalar(2)) * _tmp76;
  const Scalar _tmp149 = _tmp81 * _tmp83 * _tmp86 * std::pow(_tmp87, Scalar(_tmp90 - 1)) / _tmp91;
  const Scalar _tmp150 = _tmp148 * _tmp149;
  const Scalar _tmp151 = _tmp92 / (_tmp80 * std::sqrt(_tmp80));
  const Scalar _tmp152 = _tmp148 * _tmp151;
  const Scalar _tmp153 = _tmp140 * _tmp93 + _tmp147 * _tmp150 - _tmp147 * _tmp152;
  const Scalar _tmp154 = -_tmp11;
  const Scalar _tmp155 = -_tmp16;
  const Scalar _tmp156 = _tmp155 + _tmp35;
  const Scalar _tmp157 = _tmp15 * (_tmp101 + _tmp156) + _tmp20 * (_tmp154 + _tmp33);
  const Scalar _tmp158 = _tmp18 + _tmp97;
  const Scalar _tmp159 = _tmp15 * _tmp34 + _tmp20 * (_tmp156 + _tmp158);
  const Scalar _tmp160 = _tmp15 * _tmp42 + _tmp20 * (_tmp100 + _tmp29);
  const Scalar _tmp161 = _tmp157 * _tmp57 + _tmp159 * _tmp55 + _tmp160 * _tmp52;
  const Scalar _tmp162 = _tmp157 * _tmp4 + _tmp159 * _tmp28 + _tmp160 * _tmp41;
  const Scalar _tmp163 = _tmp110 * _tmp161 + _tmp112 * _tmp162;
  const Scalar _tmp164 = (Scalar(1) / Scalar(2)) * _tmp143;
  const Scalar _tmp165 =
      -_tmp108 * (_tmp157 * _tmp66 + _tmp159 * _tmp63 + _tmp160 * _tmp65) + _tmp116 * _tmp163;
  const Scalar _tmp166 = _tmp119 * _tmp165;
  const Scalar _tmp167 = _tmp120 * _tmp165 + _tmp122 * _tmp166 + _tmp125 * _tmp166 +
                         _tmp128 * _tmp166 + _tmp131 * _tmp166;
  const Scalar _tmp168 = _tmp144 * _tmp161 - _tmp163 * _tmp164 + _tmp167 * _tmp78;
  const Scalar _tmp169 = (Scalar(1) / Scalar(2)) * _tmp138;
  const Scalar _tmp170 = _tmp135 * _tmp162 - _tmp163 * _tmp169 + _tmp167 * _tmp75;
  const Scalar _tmp171 = _tmp141 * _tmp170 + _tmp146 * _tmp168;
  const Scalar _tmp172 = _tmp150 * _tmp171 - _tmp152 * _tmp171 + _tmp170 * _tmp93;
  const Scalar _tmp173 = _tmp20 * _tmp31 + _tmp32 * (_tmp13 + _tmp154);
  const Scalar _tmp174 =
      _tmp20 * (_tmp102 + _tmp155 + _tmp18 + _tmp96) + _tmp32 * (_tmp105 + _tmp8);
  const Scalar _tmp175 = _tmp10 * p_camera_source(0, 0) + _tmp32 * (_tmp103 + _tmp158);
  const Scalar _tmp176 = _tmp173 * _tmp28 + _tmp174 * _tmp41 + _tmp175 * _tmp4;
  const Scalar _tmp177 = _tmp173 * _tmp55 + _tmp174 * _tmp52 + _tmp175 * _tmp57;
  const Scalar _tmp178 = _tmp110 * _tmp177 + _tmp112 * _tmp176;
  const Scalar _tmp179 =
      -_tmp108 * (_tmp173 * _tmp63 + _tmp174 * _tmp65 + _tmp175 * _tmp66) + _tmp116 * _tmp178;
  const Scalar _tmp180 = _tmp120 * _tmp179 + _tmp123 * _tmp179 + _tmp126 * _tmp179 +
                         _tmp129 * _tmp179 + _tmp132 * _tmp179;
  const Scalar _tmp181 = (Scalar(1) / Scalar(2)) * _tmp178;
  const Scalar _tmp182 = -_tmp143 * _tmp181 + _tmp144 * _tmp177 + _tmp180 * _tmp78;
  const Scalar _tmp183 = _tmp135 * _tmp176 - _tmp138 * _tmp181 + _tmp180 * _tmp75;
  const Scalar _tmp184 = _tmp141 * _tmp183 + _tmp146 * _tmp182;
  const Scalar _tmp185 = _tmp150 * _tmp184 - _tmp152 * _tmp184 + _tmp183 * _tmp93;
  const Scalar _tmp186 = _tmp112 * source_inverse_range;
  const Scalar _tmp187 = _tmp186 * _tmp4;
  const Scalar _tmp188 = _tmp110 * source_inverse_range;
  const Scalar _tmp189 = _tmp188 * _tmp57;
  const Scalar _tmp190 = _tmp187 + _tmp189;
  const Scalar _tmp191 = _tmp108 * source_inverse_range;
  const Scalar _tmp192 = _tmp191 * _tmp66;
  const Scalar _tmp193 = _tmp116 * _tmp190 - _tmp192;
  const Scalar _tmp194 = _tmp120 * _tmp193 + _tmp123 * _tmp193 + _tmp126 * _tmp193 +
                         _tmp129 * _tmp193 + _tmp132 * _tmp193;
  const Scalar _tmp195 = _tmp135 * source_inverse_range;
  const Scalar _tmp196 = _tmp195 * _tmp4;
  const Scalar _tmp197 = -_tmp169 * _tmp190 + _tmp194 * _tmp75 + _tmp196;
  const Scalar _tmp198 = _tmp144 * source_inverse_range;
  const Scalar _tmp199 = _tmp198 * _tmp57;
  const Scalar _tmp200 = -_tmp164 * _tmp190 + _tmp194 * _tmp78 + _tmp199;
  const Scalar _tmp201 = _tmp141 * _tmp197 + _tmp146 * _tmp200;
  const Scalar _tmp202 = _tmp150 * _tmp201 - _tmp152 * _tmp201 + _tmp197 * _tmp93;
  const Scalar _tmp203 = _tmp198 * _tmp52;
  const Scalar _tmp204 = _tmp191 * _tmp65;
  const Scalar _tmp205 = _tmp186 * _tmp41;
  const Scalar _tmp206 = _tmp188 * _tmp52;
  const Scalar _tmp207 = _tmp205 + _tmp206;
  const Scalar _tmp208 = _tmp116 * _tmp207 - _tmp204;
  const Scalar _tmp209 = _tmp119 * _tmp208;
  const Scalar _tmp210 = _tmp120 * _tmp208 + _tmp122 * _tmp209 + _tmp125 * _tmp209 +
                         _tmp128 * _tmp209 + _tmp131 * _tmp209;
  const Scalar _tmp211 = -_tmp164 * _tmp207 + _tmp203 + _tmp210 * _tmp78;
  const Scalar _tmp212 = _tmp195 * _tmp41;
  const Scalar _tmp213 = -_tmp169 * _tmp207 + _tmp210 * _tmp75 + _tmp212;
  const Scalar _tmp214 = _tmp141 * _tmp213 + _tmp146 * _tmp211;
  const Scalar _tmp215 = _tmp150 * _tmp214 - _tmp152 * _tmp214 + _tmp213 * _tmp93;
  const Scalar _tmp216 = _tmp191 * _tmp63;
  const Scalar _tmp217 = _tmp186 * _tmp28;
  const Scalar _tmp218 = _tmp188 * _tmp55;
  const Scalar _tmp219 = _tmp217 + _tmp218;
  const Scalar _tmp220 = _tmp116 * _tmp219 - _tmp216;
  const Scalar _tmp221 = _tmp120 * _tmp220 + _tmp123 * _tmp220 + _tmp126 * _tmp220 +
                         _tmp129 * _tmp220 + _tmp132 * _tmp220;
  const Scalar _tmp222 = _tmp195 * _tmp28;
  const Scalar _tmp223 = -_tmp169 * _tmp219 + _tmp221 * _tmp75 + _tmp222;
  const Scalar _tmp224 = _tmp198 * _tmp55;
  const Scalar _tmp225 = -_tmp164 * _tmp219 + _tmp221 * _tmp78 + _tmp224;
  const Scalar _tmp226 = _tmp141 * _tmp223 + _tmp146 * _tmp225;
  const Scalar _tmp227 = _tmp150 * _tmp226 - _tmp152 * _tmp226 + _tmp223 * _tmp93;
  const Scalar _tmp228 = -_tmp53;
  const Scalar _tmp229 = std::pow(_target_pose[3], Scalar(2));
  const Scalar _tmp230 = -_tmp229;
  const Scalar _tmp231 = -_tmp0;
  const Scalar _tmp232 = -_tmp40;
  const Scalar _tmp233 = -_tmp50;
  const Scalar _tmp234 = _tmp2 + _tmp233;
  const Scalar _tmp235 = _tmp229 + _tmp231;
  const Scalar _tmp236 = _tmp38 * (_tmp234 + _tmp235) + _tmp67;
  const Scalar _tmp237 = -_tmp108 * (_tmp22 * (_tmp232 + _tmp39) + _tmp38 * (_tmp228 + _tmp64) +
                                     _tmp46 * (_tmp2 + _tmp230 + _tmp231 + _tmp50)) +
                         _tmp114 * _tmp236 * _tmp77;
  const Scalar _tmp238 = _tmp119 * _tmp237;
  const Scalar _tmp239 = _tmp120 * _tmp237 + _tmp122 * _tmp238 + _tmp125 * _tmp238 +
                         _tmp128 * _tmp238 + _tmp131 * _tmp238;
  const Scalar _tmp240 = -_tmp138 * _tmp236 * _tmp59 + _tmp239 * _tmp75;
  const Scalar _tmp241 = -_tmp142 * _tmp236 * _tmp60 + _tmp144 * _tmp236 + _tmp239 * _tmp78;
  const Scalar _tmp242 = _tmp141 * _tmp240 + _tmp146 * _tmp241;
  const Scalar _tmp243 = _tmp151 * _tmp242;
  const Scalar _tmp244 = -_tmp148 * _tmp243 + _tmp150 * _tmp242 + _tmp240 * _tmp93;
  const Scalar _tmp245 = -_tmp2;
  const Scalar _tmp246 = _tmp245 + _tmp50;
  const Scalar _tmp247 = _tmp0 + _tmp230;
  const Scalar _tmp248 = -_tmp24;
  const Scalar _tmp249 =
      _tmp22 * (_tmp248 + _tmp27) + _tmp38 * (_tmp246 + _tmp247) + _tmp46 * (_tmp228 + _tmp54);
  const Scalar _tmp250 =
      -_tmp108 * (_tmp22 * (_tmp235 + _tmp246) + _tmp47) + _tmp114 * _tmp249 * _tmp74;
  const Scalar _tmp251 = _tmp120 * _tmp250 + _tmp123 * _tmp250 + _tmp126 * _tmp250 +
                         _tmp129 * _tmp250 + _tmp132 * _tmp250;
  const Scalar _tmp252 = -_tmp143 * _tmp249 * _tmp48 + _tmp251 * _tmp78;
  const Scalar _tmp253 = _tmp135 * _tmp249 - _tmp137 * _tmp249 * _tmp49 + _tmp251 * _tmp75;
  const Scalar _tmp254 = _tmp141 * _tmp253 + _tmp146 * _tmp252;
  const Scalar _tmp255 = _tmp150 * _tmp254 - _tmp152 * _tmp254 + _tmp253 * _tmp93;
  const Scalar _tmp256 = _tmp46 * (_tmp0 + _tmp229 + _tmp233 + _tmp245) + _tmp58;
  const Scalar _tmp257 =
      _tmp22 * (_tmp234 + _tmp247) + _tmp38 * (_tmp248 + _tmp26) + _tmp46 * (_tmp232 + _tmp56);
  const Scalar _tmp258 = _tmp110 * _tmp257 + _tmp112 * _tmp256;
  const Scalar _tmp259 = _tmp118 * _tmp258 * _tmp68 * _tmp73;
  const Scalar _tmp260 =
      (Scalar(5) / Scalar(4)) * _tmp121 * _tmp259 + (Scalar(7) / Scalar(4)) * _tmp124 * _tmp259 +
      (Scalar(9) / Scalar(4)) * _tmp127 * _tmp259 + (Scalar(3) / Scalar(4)) * _tmp130 * _tmp259 +
      (Scalar(1) / Scalar(4)) * _tmp259;
  const Scalar _tmp261 = _tmp135 * _tmp256 - _tmp169 * _tmp258 + _tmp260 * _tmp75;
  const Scalar _tmp262 = _tmp144 * _tmp257 - _tmp164 * _tmp258 + _tmp260 * _tmp78;
  const Scalar _tmp263 = _tmp141 * _tmp261 + _tmp146 * _tmp262;
  const Scalar _tmp264 = _tmp150 * _tmp263 - _tmp152 * _tmp263 + _tmp261 * _tmp93;
  const Scalar _tmp265 = -_tmp187 - _tmp189;
  const Scalar _tmp266 = _tmp116 * _tmp265 + _tmp192;
  const Scalar _tmp267 = _tmp120 * _tmp266 + _tmp123 * _tmp266 + _tmp126 * _tmp266 +
                         _tmp129 * _tmp266 + _tmp132 * _tmp266;
  const Scalar _tmp268 = -_tmp169 * _tmp265 - _tmp196 + _tmp267 * _tmp75;
  const Scalar _tmp269 = -_tmp164 * _tmp265 - _tmp199 + _tmp267 * _tmp78;
  const Scalar _tmp270 = _tmp141 * _tmp268 + _tmp146 * _tmp269;
  const Scalar _tmp271 = _tmp150 * _tmp270 - _tmp152 * _tmp270 + _tmp268 * _tmp93;
  const Scalar _tmp272 = -_tmp205 - _tmp206;
  const Scalar _tmp273 = _tmp116 * _tmp272 + _tmp204;
  const Scalar _tmp274 = _tmp120 * _tmp273 + _tmp123 * _tmp273 + _tmp126 * _tmp273 +
                         _tmp129 * _tmp273 + _tmp132 * _tmp273;
  const Scalar _tmp275 = -_tmp164 * _tmp272 - _tmp203 + _tmp274 * _tmp78;
  const Scalar _tmp276 = -_tmp169 * _tmp272 - _tmp212 + _tmp274 * _tmp75;
  const Scalar _tmp277 = _tmp141 * _tmp276 + _tmp146 * _tmp275;
  const Scalar _tmp278 = _tmp148 * _tmp277;
  const Scalar _tmp279 = _tmp149 * _tmp278 - _tmp151 * _tmp278 + _tmp276 * _tmp93;
  const Scalar _tmp280 = -_tmp217 - _tmp218;
  const Scalar _tmp281 = _tmp116 * _tmp280 + _tmp216;
  const Scalar _tmp282 = _tmp119 * _tmp281;
  const Scalar _tmp283 = _tmp120 * _tmp281 + _tmp122 * _tmp282 + _tmp125 * _tmp282 +
                         _tmp128 * _tmp282 + _tmp131 * _tmp282;
  const Scalar _tmp284 = -_tmp169 * _tmp280 - _tmp222 + _tmp283 * _tmp75;
  const Scalar _tmp285 = -_tmp164 * _tmp280 - _tmp224 + _tmp283 * _tmp78;
  const Scalar _tmp286 = _tmp141 * _tmp284 + _tmp146 * _tmp285;
  const Scalar _tmp287 = _tmp150 * _tmp286 - _tmp152 * _tmp286 + _tmp284 * _tmp93;
  const Scalar _tmp288 = _tmp21 * _tmp4 + _tmp28 * _tmp37 + _tmp41 * _tmp45;
  const Scalar _tmp289 = _tmp21 * _tmp57 + _tmp37 * _tmp55 + _tmp45 * _tmp52;
  const Scalar _tmp290 =
      (Scalar(1) / Scalar(2)) * _tmp110 * _tmp289 + (Scalar(1) / Scalar(2)) * _tmp112 * _tmp288;
  const Scalar _tmp291 =
      -_tmp108 * (_tmp21 * _tmp66 + _tmp37 * _tmp63 + _tmp45 * _tmp65) + _tmp115 * _tmp290;
  const Scalar _tmp292 = _tmp120 * _tmp291 + _tmp123 * _tmp291 + _tmp126 * _tmp291 +
                         _tmp129 * _tmp291 + _tmp132 * _tmp291;
  const Scalar _tmp293 = _tmp135 * _tmp288 - _tmp138 * _tmp290 + _tmp292 * _tmp75;
  const Scalar _tmp294 = -_tmp143 * _tmp290 + _tmp144 * _tmp289 + _tmp292 * _tmp78;
  const Scalar _tmp295 = _tmp141 * _tmp293 + _tmp146 * _tmp294;
  const Scalar _tmp296 = _tmp150 * _tmp295 - _tmp152 * _tmp295 + _tmp293 * _tmp93;
  const Scalar _tmp297 = (Scalar(1) / Scalar(2)) * _tmp79;
  const Scalar _tmp298 = _tmp149 * _tmp297;
  const Scalar _tmp299 = _tmp151 * _tmp297;
  const Scalar _tmp300 = _tmp145 * _tmp93 + _tmp147 * _tmp298 - _tmp147 * _tmp299;
  const Scalar _tmp301 = _tmp168 * _tmp93 + _tmp171 * _tmp298 - _tmp171 * _tmp299;
  const Scalar _tmp302 = _tmp182 * _tmp93 + _tmp184 * _tmp298 - _tmp184 * _tmp299;
  const Scalar _tmp303 = _tmp200 * _tmp93 + _tmp201 * _tmp298 - _tmp201 * _tmp299;
  const Scalar _tmp304 = _tmp211 * _tmp93 + _tmp214 * _tmp298 - _tmp214 * _tmp299;
  const Scalar _tmp305 = _tmp225 * _tmp93 + _tmp226 * _tmp298 - _tmp226 * _tmp299;
  const Scalar _tmp306 = _tmp241 * _tmp93 + _tmp242 * _tmp298 - _tmp243 * _tmp297;
  const Scalar _tmp307 = _tmp252 * _tmp93 + _tmp254 * _tmp298 - _tmp254 * _tmp299;
  const Scalar _tmp308 = _tmp262 * _tmp93 + _tmp263 * _tmp298 - _tmp263 * _tmp299;
  const Scalar _tmp309 = _tmp269 * _tmp93 + _tmp270 * _tmp298 - _tmp270 * _tmp299;
  const Scalar _tmp310 = _tmp275 * _tmp93 + _tmp277 * _tmp298 - _tmp277 * _tmp299;
  const Scalar _tmp311 = _tmp285 * _tmp93 + _tmp286 * _tmp298 - _tmp286 * _tmp299;
  const Scalar _tmp312 = _tmp294 * _tmp93 + _tmp295 * _tmp298 - _tmp295 * _tmp299;

  // Output terms (4)
  if (res != nullptr) {
    Eigen::Matrix<Scalar, 2, 1>& _res = (*res);

    _res(0, 0) = _tmp94;
    _res(1, 0) = _tmp95;
  }

  if (jacobian != nullptr) {
    Eigen::Matrix<Scalar, 2, 13>& _jacobian = (*jacobian);

    _jacobian(0, 0) = _tmp153;
    _jacobian(0, 1) = _tmp172;
    _jacobian(0, 2) = _tmp185;
    _jacobian(0, 3) = _tmp202;
    _jacobian(0, 4) = _tmp215;
    _jacobian(0, 5) = _tmp227;
    _jacobian(0, 6) = _tmp244;
    _jacobian(0, 7) = _tmp255;
    _jacobian(0, 8) = _tmp264;
    _jacobian(0, 9) = _tmp271;
    _jacobian(0, 10) = _tmp279;
    _jacobian(0, 11) = _tmp287;
    _jacobian(0, 12) = _tmp296;
    _jacobian(1, 0) = _tmp300;
    _jacobian(1, 1) = _tmp301;
    _jacobian(1, 2) = _tmp302;
    _jacobian(1, 3) = _tmp303;
    _jacobian(1, 4) = _tmp304;
    _jacobian(1, 5) = _tmp305;
    _jacobian(1, 6) = _tmp306;
    _jacobian(1, 7) = _tmp307;
    _jacobian(1, 8) = _tmp308;
    _jacobian(1, 9) = _tmp309;
    _jacobian(1, 10) = _tmp310;
    _jacobian(1, 11) = _tmp311;
    _jacobian(1, 12) = _tmp312;
  }

  if (hessian != nullptr) {
    Eigen::Matrix<Scalar, 13, 13>& _hessian = (*hessian);

    _hessian(0, 0) = std::pow(_tmp153, Scalar(2)) + std::pow(_tmp300, Scalar(2));
    _hessian(0, 1) = 0;
    _hessian(0, 2) = 0;
    _hessian(0, 3) = 0;
    _hessian(0, 4) = 0;
    _hessian(0, 5) = 0;
    _hessian(0, 6) = 0;
    _hessian(0, 7) = 0;
    _hessian(0, 8) = 0;
    _hessian(0, 9) = 0;
    _hessian(0, 10) = 0;
    _hessian(0, 11) = 0;
    _hessian(0, 12) = 0;
    _hessian(1, 0) = _tmp153 * _tmp172 + _tmp300 * _tmp301;
    _hessian(1, 1) = std::pow(_tmp172, Scalar(2)) + std::pow(_tmp301, Scalar(2));
    _hessian(1, 2) = 0;
    _hessian(1, 3) = 0;
    _hessian(1, 4) = 0;
    _hessian(1, 5) = 0;
    _hessian(1, 6) = 0;
    _hessian(1, 7) = 0;
    _hessian(1, 8) = 0;
    _hessian(1, 9) = 0;
    _hessian(1, 10) = 0;
    _hessian(1, 11) = 0;
    _hessian(1, 12) = 0;
    _hessian(2, 0) = _tmp153 * _tmp185 + _tmp300 * _tmp302;
    _hessian(2, 1) = _tmp172 * _tmp185 + _tmp301 * _tmp302;
    _hessian(2, 2) = std::pow(_tmp185, Scalar(2)) + std::pow(_tmp302, Scalar(2));
    _hessian(2, 3) = 0;
    _hessian(2, 4) = 0;
    _hessian(2, 5) = 0;
    _hessian(2, 6) = 0;
    _hessian(2, 7) = 0;
    _hessian(2, 8) = 0;
    _hessian(2, 9) = 0;
    _hessian(2, 10) = 0;
    _hessian(2, 11) = 0;
    _hessian(2, 12) = 0;
    _hessian(3, 0) = _tmp153 * _tmp202 + _tmp300 * _tmp303;
    _hessian(3, 1) = _tmp172 * _tmp202 + _tmp301 * _tmp303;
    _hessian(3, 2) = _tmp185 * _tmp202 + _tmp302 * _tmp303;
    _hessian(3, 3) = std::pow(_tmp202, Scalar(2)) + std::pow(_tmp303, Scalar(2));
    _hessian(3, 4) = 0;
    _hessian(3, 5) = 0;
    _hessian(3, 6) = 0;
    _hessian(3, 7) = 0;
    _hessian(3, 8) = 0;
    _hessian(3, 9) = 0;
    _hessian(3, 10) = 0;
    _hessian(3, 11) = 0;
    _hessian(3, 12) = 0;
    _hessian(4, 0) = _tmp153 * _tmp215 + _tmp300 * _tmp304;
    _hessian(4, 1) = _tmp172 * _tmp215 + _tmp301 * _tmp304;
    _hessian(4, 2) = _tmp185 * _tmp215 + _tmp302 * _tmp304;
    _hessian(4, 3) = _tmp202 * _tmp215 + _tmp303 * _tmp304;
    _hessian(4, 4) = std::pow(_tmp215, Scalar(2)) + std::pow(_tmp304, Scalar(2));
    _hessian(4, 5) = 0;
    _hessian(4, 6) = 0;
    _hessian(4, 7) = 0;
    _hessian(4, 8) = 0;
    _hessian(4, 9) = 0;
    _hessian(4, 10) = 0;
    _hessian(4, 11) = 0;
    _hessian(4, 12) = 0;
    _hessian(5, 0) = _tmp153 * _tmp227 + _tmp300 * _tmp305;
    _hessian(5, 1) = _tmp172 * _tmp227 + _tmp301 * _tmp305;
    _hessian(5, 2) = _tmp185 * _tmp227 + _tmp302 * _tmp305;
    _hessian(5, 3) = _tmp202 * _tmp227 + _tmp303 * _tmp305;
    _hessian(5, 4) = _tmp215 * _tmp227 + _tmp304 * _tmp305;
    _hessian(5, 5) = std::pow(_tmp227, Scalar(2)) + std::pow(_tmp305, Scalar(2));
    _hessian(5, 6) = 0;
    _hessian(5, 7) = 0;
    _hessian(5, 8) = 0;
    _hessian(5, 9) = 0;
    _hessian(5, 10) = 0;
    _hessian(5, 11) = 0;
    _hessian(5, 12) = 0;
    _hessian(6, 0) = _tmp153 * _tmp244 + _tmp300 * _tmp306;
    _hessian(6, 1) = _tmp172 * _tmp244 + _tmp301 * _tmp306;
    _hessian(6, 2) = _tmp185 * _tmp244 + _tmp302 * _tmp306;
    _hessian(6, 3) = _tmp202 * _tmp244 + _tmp303 * _tmp306;
    _hessian(6, 4) = _tmp215 * _tmp244 + _tmp304 * _tmp306;
    _hessian(6, 5) = _tmp227 * _tmp244 + _tmp305 * _tmp306;
    _hessian(6, 6) = std::pow(_tmp244, Scalar(2)) + std::pow(_tmp306, Scalar(2));
    _hessian(6, 7) = 0;
    _hessian(6, 8) = 0;
    _hessian(6, 9) = 0;
    _hessian(6, 10) = 0;
    _hessian(6, 11) = 0;
    _hessian(6, 12) = 0;
    _hessian(7, 0) = _tmp153 * _tmp255 + _tmp300 * _tmp307;
    _hessian(7, 1) = _tmp172 * _tmp255 + _tmp301 * _tmp307;
    _hessian(7, 2) = _tmp185 * _tmp255 + _tmp302 * _tmp307;
    _hessian(7, 3) = _tmp202 * _tmp255 + _tmp303 * _tmp307;
    _hessian(7, 4) = _tmp215 * _tmp255 + _tmp304 * _tmp307;
    _hessian(7, 5) = _tmp227 * _tmp255 + _tmp305 * _tmp307;
    _hessian(7, 6) = _tmp244 * _tmp255 + _tmp306 * _tmp307;
    _hessian(7, 7) = std::pow(_tmp255, Scalar(2)) + std::pow(_tmp307, Scalar(2));
    _hessian(7, 8) = 0;
    _hessian(7, 9) = 0;
    _hessian(7, 10) = 0;
    _hessian(7, 11) = 0;
    _hessian(7, 12) = 0;
    _hessian(8, 0) = _tmp153 * _tmp264 + _tmp300 * _tmp308;
    _hessian(8, 1) = _tmp172 * _tmp264 + _tmp301 * _tmp308;
    _hessian(8, 2) = _tmp185 * _tmp264 + _tmp302 * _tmp308;
    _hessian(8, 3) = _tmp202 * _tmp264 + _tmp303 * _tmp308;
    _hessian(8, 4) = _tmp215 * _tmp264 + _tmp304 * _tmp308;
    _hessian(8, 5) = _tmp227 * _tmp264 + _tmp305 * _tmp308;
    _hessian(8, 6) = _tmp244 * _tmp264 + _tmp306 * _tmp308;
    _hessian(8, 7) = _tmp255 * _tmp264 + _tmp307 * _tmp308;
    _hessian(8, 8) = std::pow(_tmp264, Scalar(2)) + std::pow(_tmp308, Scalar(2));
    _hessian(8, 9) = 0;
    _hessian(8, 10) = 0;
    _hessian(8, 11) = 0;
    _hessian(8, 12) = 0;
    _hessian(9, 0) = _tmp153 * _tmp271 + _tmp300 * _tmp309;
    _hessian(9, 1) = _tmp172 * _tmp271 + _tmp301 * _tmp309;
    _hessian(9, 2) = _tmp185 * _tmp271 + _tmp302 * _tmp309;
    _hessian(9, 3) = _tmp202 * _tmp271 + _tmp303 * _tmp309;
    _hessian(9, 4) = _tmp215 * _tmp271 + _tmp304 * _tmp309;
    _hessian(9, 5) = _tmp227 * _tmp271 + _tmp305 * _tmp309;
    _hessian(9, 6) = _tmp244 * _tmp271 + _tmp306 * _tmp309;
    _hessian(9, 7) = _tmp255 * _tmp271 + _tmp307 * _tmp309;
    _hessian(9, 8) = _tmp264 * _tmp271 + _tmp308 * _tmp309;
    _hessian(9, 9) = std::pow(_tmp271, Scalar(2)) + std::pow(_tmp309, Scalar(2));
    _hessian(9, 10) = 0;
    _hessian(9, 11) = 0;
    _hessian(9, 12) = 0;
    _hessian(10, 0) = _tmp153 * _tmp279 + _tmp300 * _tmp310;
    _hessian(10, 1) = _tmp172 * _tmp279 + _tmp301 * _tmp310;
    _hessian(10, 2) = _tmp185 * _tmp279 + _tmp302 * _tmp310;
    _hessian(10, 3) = _tmp202 * _tmp279 + _tmp303 * _tmp310;
    _hessian(10, 4) = _tmp215 * _tmp279 + _tmp304 * _tmp310;
    _hessian(10, 5) = _tmp227 * _tmp279 + _tmp305 * _tmp310;
    _hessian(10, 6) = _tmp244 * _tmp279 + _tmp306 * _tmp310;
    _hessian(10, 7) = _tmp255 * _tmp279 + _tmp307 * _tmp310;
    _hessian(10, 8) = _tmp264 * _tmp279 + _tmp308 * _tmp310;
    _hessian(10, 9) = _tmp271 * _tmp279 + _tmp309 * _tmp310;
    _hessian(10, 10) = std::pow(_tmp279, Scalar(2)) + std::pow(_tmp310, Scalar(2));
    _hessian(10, 11) = 0;
    _hessian(10, 12) = 0;
    _hessian(11, 0) = _tmp153 * _tmp287 + _tmp300 * _tmp311;
    _hessian(11, 1) = _tmp172 * _tmp287 + _tmp301 * _tmp311;
    _hessian(11, 2) = _tmp185 * _tmp287 + _tmp302 * _tmp311;
    _hessian(11, 3) = _tmp202 * _tmp287 + _tmp303 * _tmp311;
    _hessian(11, 4) = _tmp215 * _tmp287 + _tmp304 * _tmp311;
    _hessian(11, 5) = _tmp227 * _tmp287 + _tmp305 * _tmp311;
    _hessian(11, 6) = _tmp244 * _tmp287 + _tmp306 * _tmp311;
    _hessian(11, 7) = _tmp255 * _tmp287 + _tmp307 * _tmp311;
    _hessian(11, 8) = _tmp264 * _tmp287 + _tmp308 * _tmp311;
    _hessian(11, 9) = _tmp271 * _tmp287 + _tmp309 * _tmp311;
    _hessian(11, 10) = _tmp279 * _tmp287 + _tmp310 * _tmp311;
    _hessian(11, 11) = std::pow(_tmp287, Scalar(2)) + std::pow(_tmp311, Scalar(2));
    _hessian(11, 12) = 0;
    _hessian(12, 0) = _tmp153 * _tmp296 + _tmp300 * _tmp312;
    _hessian(12, 1) = _tmp172 * _tmp296 + _tmp301 * _tmp312;
    _hessian(12, 2) = _tmp185 * _tmp296 + _tmp302 * _tmp312;
    _hessian(12, 3) = _tmp202 * _tmp296 + _tmp303 * _tmp312;
    _hessian(12, 4) = _tmp215 * _tmp296 + _tmp304 * _tmp312;
    _hessian(12, 5) = _tmp227 * _tmp296 + _tmp305 * _tmp312;
    _hessian(12, 6) = _tmp244 * _tmp296 + _tmp306 * _tmp312;
    _hessian(12, 7) = _tmp255 * _tmp296 + _tmp307 * _tmp312;
    _hessian(12, 8) = _tmp264 * _tmp296 + _tmp308 * _tmp312;
    _hessian(12, 9) = _tmp271 * _tmp296 + _tmp309 * _tmp312;
    _hessian(12, 10) = _tmp279 * _tmp296 + _tmp310 * _tmp312;
    _hessian(12, 11) = _tmp287 * _tmp296 + _tmp311 * _tmp312;
    _hessian(12, 12) = std::pow(_tmp296, Scalar(2)) + std::pow(_tmp312, Scalar(2));
  }

  if (rhs != nullptr) {
    Eigen::Matrix<Scalar, 13, 1>& _rhs = (*rhs);

    _rhs(0, 0) = _tmp153 * _tmp94 + _tmp300 * _tmp95;
    _rhs(1, 0) = _tmp172 * _tmp94 + _tmp301 * _tmp95;
    _rhs(2, 0) = _tmp185 * _tmp94 + _tmp302 * _tmp95;
    _rhs(3, 0) = _tmp202 * _tmp94 + _tmp303 * _tmp95;
    _rhs(4, 0) = _tmp215 * _tmp94 + _tmp304 * _tmp95;
    _rhs(5, 0) = _tmp227 * _tmp94 + _tmp305 * _tmp95;
    _rhs(6, 0) = _tmp244 * _tmp94 + _tmp306 * _tmp95;
    _rhs(7, 0) = _tmp255 * _tmp94 + _tmp307 * _tmp95;
    _rhs(8, 0) = _tmp264 * _tmp94 + _tmp308 * _tmp95;
    _rhs(9, 0) = _tmp271 * _tmp94 + _tmp309 * _tmp95;
    _rhs(10, 0) = _tmp279 * _tmp94 + _tmp310 * _tmp95;
    _rhs(11, 0) = _tmp287 * _tmp94 + _tmp311 * _tmp95;
    _rhs(12, 0) = _tmp296 * _tmp94 + _tmp312 * _tmp95;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
