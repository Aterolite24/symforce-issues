// -----------------------------------------------------------------------------
// This file was autogenerated by symforce. Do NOT modify by hand.
// -----------------------------------------------------------------------------
#pragma once

#include <Eigen/Dense>
#include <sym/pose2.h>

namespace sym {

/**
 * Residual that penalizes the difference between a value and prior (desired / measured value).
 *
 * In vector space terms that would be:
 *     prior - value
 *
 * In lie group terms:
 *     to_tangent(compose(inverse(value), prior))
 *
 * Args:
 *     sqrt_info: Square root information matrix to whiten residual. This can be computed from
 *                a covariance matrix as the cholesky decomposition of the inverse. In the case
 *                of a diagonal it will contain 1/sigma values. Must match the tangent dim.
 *     geo.Matrix: Jacobian for args 0 (value)
 */
template <typename Scalar>
void PriorFactorPose2(const sym::Pose2<Scalar>& value, const sym::Pose2<Scalar>& prior,
                      const Eigen::Matrix<Scalar, 3, 3>& sqrt_info, const Scalar epsilon,
                      Eigen::Matrix<Scalar, 3, 1>* const res = nullptr,
                      Eigen::Matrix<Scalar, 3, 3>* const jacobian = nullptr) {
  // Total ops: 68

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _value = value.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _prior = prior.Data();

  // Intermediate terms (17)
  const Scalar _tmp0 = -_prior[2] + _value[2];
  const Scalar _tmp1 = -_prior[3] + _value[3];
  const Scalar _tmp2 = 1.0 / ((_prior[0] * _prior[0]) + (_prior[1] * _prior[1]));
  const Scalar _tmp3 = _prior[0] * _tmp2;
  const Scalar _tmp4 = _prior[1] * _tmp2;
  const Scalar _tmp5 = _tmp3 * _value[1] - _tmp4 * _value[0];
  const Scalar _tmp6 = _tmp3 * _value[0] + _tmp4 * _value[1];
  const Scalar _tmp7 = std::atan2(_tmp5, _tmp6);
  const Scalar _tmp8 = (_tmp6 * _tmp6);
  const Scalar _tmp9 = _tmp5 / _tmp8;
  const Scalar _tmp10 = _tmp2 / _tmp6;
  const Scalar _tmp11 = _value[0] * (_prior[0] * _tmp10 - _tmp4 * _tmp9);
  const Scalar _tmp12 = _tmp8 / ((_tmp5 * _tmp5) + _tmp8);
  const Scalar _tmp13 = _tmp12 * sqrt_info(0, 2);
  const Scalar _tmp14 = _value[1] * (-_prior[1] * _tmp10 - _tmp3 * _tmp9);
  const Scalar _tmp15 = _tmp12 * sqrt_info(1, 2);
  const Scalar _tmp16 = _tmp12 * sqrt_info(2, 2);

  // Output terms (2)
  if (res != nullptr) {
    Eigen::Matrix<Scalar, 3, 1>& _res = (*res);

    _res(0, 0) = _tmp0 * sqrt_info(0, 0) + _tmp1 * sqrt_info(0, 1) + _tmp7 * sqrt_info(0, 2);
    _res(1, 0) = _tmp0 * sqrt_info(1, 0) + _tmp1 * sqrt_info(1, 1) + _tmp7 * sqrt_info(1, 2);
    _res(2, 0) = _tmp0 * sqrt_info(2, 0) + _tmp1 * sqrt_info(2, 1) + _tmp7 * sqrt_info(2, 2);
  }

  if (jacobian != nullptr) {
    Eigen::Matrix<Scalar, 3, 3>& _jacobian = (*jacobian);

    _jacobian(0, 0) = sqrt_info(0, 0);
    _jacobian(0, 1) = sqrt_info(0, 1);
    _jacobian(0, 2) = _tmp11 * _tmp13 - _tmp13 * _tmp14;
    _jacobian(1, 0) = sqrt_info(1, 0);
    _jacobian(1, 1) = sqrt_info(1, 1);
    _jacobian(1, 2) = _tmp11 * _tmp15 - _tmp14 * _tmp15;
    _jacobian(2, 0) = sqrt_info(2, 0);
    _jacobian(2, 1) = sqrt_info(2, 1);
    _jacobian(2, 2) = _tmp11 * _tmp16 - _tmp14 * _tmp16;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
