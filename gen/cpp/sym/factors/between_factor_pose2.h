// -----------------------------------------------------------------------------
// This file was autogenerated by symforce. Do NOT modify by hand.
// -----------------------------------------------------------------------------
#pragma once

#include <Eigen/Dense>
#include <sym/pose2.h>

namespace sym {

/**
 * Residual that penalizes the difference between between(a, b) and a_T_b.
 *
 * In vector space terms that would be:
 *     (b - a) - a_T_b
 *
 * In lie group terms:
 *     local_coordinates(a_T_b, between(a, b))
 *     to_tangent(compose(inverse(a_T_b), compose(inverse(a), b)))
 *
 * Args:
 *     sqrt_info: Square root information matrix to whiten residual. This can be computed from
 *                a covariance matrix as the cholesky decomposition of the inverse. In the case
 *                of a diagonal it will contain 1/sigma values. Must match the tangent dim.
 *     geo.Matrix: Jacobian for args 0 (a), 1 (b)
 */
template <typename Scalar>
void BetweenFactorPose2(const sym::Pose2<Scalar>& a, const sym::Pose2<Scalar>& b,
                        const sym::Pose2<Scalar>& a_T_b,
                        const Eigen::Matrix<Scalar, 3, 3>& sqrt_info, const Scalar epsilon,
                        Eigen::Matrix<Scalar, 3, 1>* const res = nullptr,
                        Eigen::Matrix<Scalar, 3, 6>* const jacobian = nullptr) {
  // Total ops: 283

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _a = a.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _b = b.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _a_T_b = a_T_b.Data();

  // Intermediate terms (66)
  const Scalar _tmp0 = (_a[0] * _a[0]);
  const Scalar _tmp1 = (_a[1] * _a[1]);
  const Scalar _tmp2 = _tmp0 + _tmp1;
  const Scalar _tmp3 = 1.0 / (_tmp2);
  const Scalar _tmp4 = _a[3] * _tmp3;
  const Scalar _tmp5 = _a[2] * _tmp3;
  const Scalar _tmp6 = _b[3] * _tmp3;
  const Scalar _tmp7 = _b[2] * _tmp3;
  const Scalar _tmp8 = -_a[0] * _tmp5 + _a[0] * _tmp7 - _a[1] * _tmp4 + _a[1] * _tmp6 - _a_T_b[2];
  const Scalar _tmp9 = -_a[0] * _tmp4 + _a[0] * _tmp6 + _a[1] * _tmp5 - _a[1] * _tmp7 - _a_T_b[3];
  const Scalar _tmp10 = 1.0 / ((_a_T_b[0] * _a_T_b[0]) + (_a_T_b[1] * _a_T_b[1]));
  const Scalar _tmp11 = _b[0] * _tmp3;
  const Scalar _tmp12 = _b[1] * _tmp3;
  const Scalar _tmp13 = _tmp10 * (_a[0] * _tmp12 - _a[1] * _tmp11);
  const Scalar _tmp14 = _tmp10 * (_a[0] * _tmp11 + _a[1] * _tmp12);
  const Scalar _tmp15 = _a_T_b[0] * _tmp13 - _a_T_b[1] * _tmp14;
  const Scalar _tmp16 = _a_T_b[0] * _tmp14 + _a_T_b[1] * _tmp13;
  const Scalar _tmp17 = std::atan2(_tmp15, _tmp16);
  const Scalar _tmp18 = _a[1] * _tmp3;
  const Scalar _tmp19 = _tmp18 * sqrt_info(0, 1);
  const Scalar _tmp20 = _a[0] * _tmp3;
  const Scalar _tmp21 = _tmp20 * sqrt_info(0, 0);
  const Scalar _tmp22 = _tmp18 * sqrt_info(0, 0);
  const Scalar _tmp23 = _tmp20 * sqrt_info(0, 1);
  const Scalar _tmp24 = 2 / (_tmp2 * _tmp2);
  const Scalar _tmp25 = _a[0] * _a[1] * _tmp24;
  const Scalar _tmp26 = _b[0] * _tmp25;
  const Scalar _tmp27 = _tmp0 * _tmp24;
  const Scalar _tmp28 = -_b[1] * _tmp27 + _tmp12 + _tmp26;
  const Scalar _tmp29 = _a_T_b[0] * _tmp10;
  const Scalar _tmp30 = -_b[1] * _tmp25;
  const Scalar _tmp31 = -_b[0] * _tmp27 + _tmp11 + _tmp30;
  const Scalar _tmp32 = _a_T_b[1] * _tmp10;
  const Scalar _tmp33 = 1.0 / (_tmp16);
  const Scalar _tmp34 = (_tmp16 * _tmp16);
  const Scalar _tmp35 = _tmp15 / _tmp34;
  const Scalar _tmp36 = _tmp34 / ((_tmp15 * _tmp15) + _tmp34);
  const Scalar _tmp37 = _tmp36 * (_tmp33 * (_tmp28 * _tmp29 - _tmp31 * _tmp32) -
                                  _tmp35 * (_tmp28 * _tmp32 + _tmp29 * _tmp31));
  const Scalar _tmp38 = _b[2] * _tmp25;
  const Scalar _tmp39 = _a[2] * _tmp25;
  const Scalar _tmp40 = -_tmp4 + _tmp6;
  const Scalar _tmp41 = _a[3] * _tmp27 - _b[3] * _tmp27 + _tmp38 - _tmp39 + _tmp40;
  const Scalar _tmp42 = _a[3] * _tmp25 - _b[3] * _tmp25;
  const Scalar _tmp43 = _a[2] * _tmp27 - _b[2] * _tmp27 + _tmp42 - _tmp5 + _tmp7;
  const Scalar _tmp44 = _tmp1 * _tmp24;
  const Scalar _tmp45 = _a[3] * _tmp44 - _b[3] * _tmp44 - _tmp38 + _tmp39 + _tmp40;
  const Scalar _tmp46 = -_a[2] * _tmp44 + _b[2] * _tmp44 + _tmp42 + _tmp5 - _tmp7;
  const Scalar _tmp47 = _b[0] * _tmp44 - _tmp11 + _tmp30;
  const Scalar _tmp48 = -_b[1] * _tmp44 + _tmp12 - _tmp26;
  const Scalar _tmp49 = _tmp36 * (_tmp33 * (_tmp29 * _tmp47 - _tmp32 * _tmp48) -
                                  _tmp35 * (_tmp29 * _tmp48 + _tmp32 * _tmp47));
  const Scalar _tmp50 = _tmp36 * sqrt_info(0, 2);
  const Scalar _tmp51 = _tmp20 * _tmp32;
  const Scalar _tmp52 = _tmp18 * _tmp29;
  const Scalar _tmp53 = -_tmp18 * _tmp32 + _tmp20 * _tmp29;
  const Scalar _tmp54 = _b[1] * (_tmp33 * (-_tmp51 - _tmp52) - _tmp35 * _tmp53);
  const Scalar _tmp55 = _b[0] * (_tmp33 * _tmp53 - _tmp35 * (_tmp51 + _tmp52));
  const Scalar _tmp56 = _tmp20 * sqrt_info(1, 0);
  const Scalar _tmp57 = _tmp18 * sqrt_info(1, 1);
  const Scalar _tmp58 = _tmp20 * sqrt_info(1, 1);
  const Scalar _tmp59 = _tmp18 * sqrt_info(1, 0);
  const Scalar _tmp60 = _tmp36 * _tmp54;
  const Scalar _tmp61 = _tmp36 * _tmp55;
  const Scalar _tmp62 = _tmp18 * sqrt_info(2, 1);
  const Scalar _tmp63 = _tmp20 * sqrt_info(2, 0);
  const Scalar _tmp64 = _tmp18 * sqrt_info(2, 0);
  const Scalar _tmp65 = _tmp20 * sqrt_info(2, 1);

  // Output terms (2)
  if (res != nullptr) {
    Eigen::Matrix<Scalar, 3, 1>& _res = (*res);

    _res(0, 0) = _tmp17 * sqrt_info(0, 2) + _tmp8 * sqrt_info(0, 0) + _tmp9 * sqrt_info(0, 1);
    _res(1, 0) = _tmp17 * sqrt_info(1, 2) + _tmp8 * sqrt_info(1, 0) + _tmp9 * sqrt_info(1, 1);
    _res(2, 0) = _tmp17 * sqrt_info(2, 2) + _tmp8 * sqrt_info(2, 0) + _tmp9 * sqrt_info(2, 1);
  }

  if (jacobian != nullptr) {
    Eigen::Matrix<Scalar, 3, 6>& _jacobian = (*jacobian);

    _jacobian(0, 0) = _tmp19 - _tmp21;
    _jacobian(0, 1) = -_tmp22 - _tmp23;
    _jacobian(0, 2) =
        _a[0] * (_tmp45 * sqrt_info(0, 0) + _tmp46 * sqrt_info(0, 1) + _tmp49 * sqrt_info(0, 2)) -
        _a[1] * (_tmp37 * sqrt_info(0, 2) + _tmp41 * sqrt_info(0, 1) + _tmp43 * sqrt_info(0, 0));
    _jacobian(0, 3) = -_tmp19 + _tmp21;
    _jacobian(0, 4) = _tmp22 + _tmp23;
    _jacobian(0, 5) = -_tmp50 * _tmp54 + _tmp50 * _tmp55;
    _jacobian(1, 0) = -_tmp56 + _tmp57;
    _jacobian(1, 1) = -_tmp58 - _tmp59;
    _jacobian(1, 2) =
        _a[0] * (_tmp45 * sqrt_info(1, 0) + _tmp46 * sqrt_info(1, 1) + _tmp49 * sqrt_info(1, 2)) -
        _a[1] * (_tmp37 * sqrt_info(1, 2) + _tmp41 * sqrt_info(1, 1) + _tmp43 * sqrt_info(1, 0));
    _jacobian(1, 3) = _tmp56 - _tmp57;
    _jacobian(1, 4) = _tmp58 + _tmp59;
    _jacobian(1, 5) = -_tmp60 * sqrt_info(1, 2) + _tmp61 * sqrt_info(1, 2);
    _jacobian(2, 0) = _tmp62 - _tmp63;
    _jacobian(2, 1) = -_tmp64 - _tmp65;
    _jacobian(2, 2) =
        _a[0] * (_tmp45 * sqrt_info(2, 0) + _tmp46 * sqrt_info(2, 1) + _tmp49 * sqrt_info(2, 2)) -
        _a[1] * (_tmp37 * sqrt_info(2, 2) + _tmp41 * sqrt_info(2, 1) + _tmp43 * sqrt_info(2, 0));
    _jacobian(2, 3) = -_tmp62 + _tmp63;
    _jacobian(2, 4) = _tmp64 + _tmp65;
    _jacobian(2, 5) = -_tmp60 * sqrt_info(2, 2) + _tmp61 * sqrt_info(2, 2);
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
