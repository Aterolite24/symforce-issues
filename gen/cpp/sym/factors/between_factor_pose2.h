// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     cpp_templates/function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/pose2.h>

namespace sym {

/**
 * Residual that penalizes the difference between between(a, b) and a_T_b.
 *
 * In vector space terms that would be:
 *     (b - a) - a_T_b
 *
 * In lie group terms:
 *     local_coordinates(a_T_b, between(a, b))
 *     to_tangent(compose(inverse(a_T_b), compose(inverse(a), b)))
 *
 * Args:
 *     sqrt_info: Square root information matrix to whiten residual. This can be computed from
 *                a covariance matrix as the cholesky decomposition of the inverse. In the case
 *                of a diagonal it will contain 1/sigma values. Must match the tangent dim.
 *     jacobian: (3x6) jacobian of res wrt args a (3), b (3)
 *     hessian: (6x6) Gauss-Newton hessian for args a (3), b (3)
 *     rhs: (6x1) Gauss-Newton rhs for args a (3), b (3)
 */
template <typename Scalar>
void BetweenFactorPose2(const sym::Pose2<Scalar>& a, const sym::Pose2<Scalar>& b,
                        const sym::Pose2<Scalar>& a_T_b,
                        const Eigen::Matrix<Scalar, 3, 3>& sqrt_info, const Scalar epsilon,
                        Eigen::Matrix<Scalar, 3, 1>* const res = nullptr,
                        Eigen::Matrix<Scalar, 3, 6>* const jacobian = nullptr,
                        Eigen::Matrix<Scalar, 6, 6>* const hessian = nullptr,
                        Eigen::Matrix<Scalar, 6, 1>* const rhs = nullptr) {
  // Total ops: 290

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _a = a.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _b = b.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _a_T_b = a_T_b.Data();

  // Intermediate terms (69)
  const Scalar _tmp0 = _a[0] * _a[3];
  const Scalar _tmp1 = _a[1] * _a[2];
  const Scalar _tmp2 = _a[0] * _b[3] - _a[1] * _b[2];
  const Scalar _tmp3 = -_a_T_b[3] - _tmp0 + _tmp1 + _tmp2;
  const Scalar _tmp4 = _a[0] * _a[2] + _a[1] * _a[3];
  const Scalar _tmp5 = _a[1] * _b[3];
  const Scalar _tmp6 = _a[0] * _b[2];
  const Scalar _tmp7 = -_a_T_b[2] - _tmp4 + _tmp5 + _tmp6;
  const Scalar _tmp8 = _a[1] * _b[1];
  const Scalar _tmp9 = _a[0] * _b[0];
  const Scalar _tmp10 = _tmp8 + _tmp9;
  const Scalar _tmp11 = _a_T_b[1] * _tmp10;
  const Scalar _tmp12 = _a[1] * _b[0];
  const Scalar _tmp13 = _a[0] * _b[1];
  const Scalar _tmp14 = -_tmp12 + _tmp13;
  const Scalar _tmp15 = _a_T_b[0] * _tmp14;
  const Scalar _tmp16 = -_tmp11 + _tmp15;
  const Scalar _tmp17 = _a_T_b[0] * _tmp10;
  const Scalar _tmp18 = _a_T_b[1] * _tmp14;
  const Scalar _tmp19 = _tmp17 + _tmp18;
  const Scalar _tmp20 = std::atan2(_tmp16, _tmp19);
  const Scalar _tmp21 =
      _tmp20 * sqrt_info(0, 2) + _tmp3 * sqrt_info(0, 1) + _tmp7 * sqrt_info(0, 0);
  const Scalar _tmp22 =
      _tmp20 * sqrt_info(1, 2) + _tmp3 * sqrt_info(1, 1) + _tmp7 * sqrt_info(1, 0);
  const Scalar _tmp23 =
      _tmp20 * sqrt_info(2, 2) + _tmp3 * sqrt_info(2, 1) + _tmp7 * sqrt_info(2, 0);
  const Scalar _tmp24 = _a[0] * sqrt_info(0, 0);
  const Scalar _tmp25 = _a[1] * sqrt_info(0, 1);
  const Scalar _tmp26 = -_tmp24 + _tmp25;
  const Scalar _tmp27 = _a[0] * sqrt_info(0, 1);
  const Scalar _tmp28 = _a[1] * sqrt_info(0, 0);
  const Scalar _tmp29 = -_tmp27 - _tmp28;
  const Scalar _tmp30 = -_tmp8 - _tmp9;
  const Scalar _tmp31 = Scalar(1.0) / (_tmp19);
  const Scalar _tmp32 = std::pow(_tmp19, Scalar(2));
  const Scalar _tmp33 = _tmp16 / _tmp32;
  const Scalar _tmp34 =
      _tmp31 * (_a_T_b[0] * _tmp30 - _tmp18) - _tmp33 * (_a_T_b[1] * _tmp30 + _tmp15);
  const Scalar _tmp35 = std::pow(_tmp16, Scalar(2)) + _tmp32;
  const Scalar _tmp36 = _tmp32 / _tmp35;
  const Scalar _tmp37 = _tmp36 * sqrt_info(0, 2);
  const Scalar _tmp38 = -_tmp0 + _tmp1 + _tmp2;
  const Scalar _tmp39 = _tmp4 - _tmp5 - _tmp6;
  const Scalar _tmp40 = _tmp34 * _tmp37 + _tmp38 * sqrt_info(0, 0) + _tmp39 * sqrt_info(0, 1);
  const Scalar _tmp41 = _tmp24 - _tmp25;
  const Scalar _tmp42 = _tmp27 + _tmp28;
  const Scalar _tmp43 = _tmp12 - _tmp13;
  const Scalar _tmp44 =
      _tmp31 * (-_a_T_b[1] * _tmp43 + _tmp17) - _tmp33 * (_a_T_b[0] * _tmp43 + _tmp11);
  const Scalar _tmp45 = _tmp37 * _tmp44;
  const Scalar _tmp46 = _a[1] * sqrt_info(1, 1);
  const Scalar _tmp47 = _a[0] * sqrt_info(1, 0);
  const Scalar _tmp48 = _tmp46 - _tmp47;
  const Scalar _tmp49 = _a[1] * sqrt_info(1, 0);
  const Scalar _tmp50 = _a[0] * sqrt_info(1, 1);
  const Scalar _tmp51 = -_tmp49 - _tmp50;
  const Scalar _tmp52 = _tmp34 * _tmp36;
  const Scalar _tmp53 =
      _tmp38 * sqrt_info(1, 0) + _tmp39 * sqrt_info(1, 1) + _tmp52 * sqrt_info(1, 2);
  const Scalar _tmp54 = -_tmp46 + _tmp47;
  const Scalar _tmp55 = _tmp49 + _tmp50;
  const Scalar _tmp56 = _tmp36 * _tmp44;
  const Scalar _tmp57 = _tmp56 * sqrt_info(1, 2);
  const Scalar _tmp58 = _a[1] * sqrt_info(2, 1);
  const Scalar _tmp59 = _a[0] * sqrt_info(2, 0);
  const Scalar _tmp60 = _tmp58 - _tmp59;
  const Scalar _tmp61 = _a[1] * sqrt_info(2, 0);
  const Scalar _tmp62 = _a[0] * sqrt_info(2, 1);
  const Scalar _tmp63 = -_tmp61 - _tmp62;
  const Scalar _tmp64 =
      _tmp38 * sqrt_info(2, 0) + _tmp39 * sqrt_info(2, 1) + _tmp52 * sqrt_info(2, 2);
  const Scalar _tmp65 = -_tmp58 + _tmp59;
  const Scalar _tmp66 = _tmp61 + _tmp62;
  const Scalar _tmp67 = _tmp56 * sqrt_info(2, 2);
  const Scalar _tmp68 =
      std::pow(_tmp19, Scalar(4)) * std::pow(_tmp44, Scalar(2)) / std::pow(_tmp35, Scalar(2));

  // Output terms (4)
  if (res != nullptr) {
    Eigen::Matrix<Scalar, 3, 1>& _res = (*res);

    _res(0, 0) = _tmp21;
    _res(1, 0) = _tmp22;
    _res(2, 0) = _tmp23;
  }

  if (jacobian != nullptr) {
    Eigen::Matrix<Scalar, 3, 6>& _jacobian = (*jacobian);

    _jacobian(0, 0) = _tmp26;
    _jacobian(0, 1) = _tmp29;
    _jacobian(0, 2) = _tmp40;
    _jacobian(0, 3) = _tmp41;
    _jacobian(0, 4) = _tmp42;
    _jacobian(0, 5) = _tmp45;
    _jacobian(1, 0) = _tmp48;
    _jacobian(1, 1) = _tmp51;
    _jacobian(1, 2) = _tmp53;
    _jacobian(1, 3) = _tmp54;
    _jacobian(1, 4) = _tmp55;
    _jacobian(1, 5) = _tmp57;
    _jacobian(2, 0) = _tmp60;
    _jacobian(2, 1) = _tmp63;
    _jacobian(2, 2) = _tmp64;
    _jacobian(2, 3) = _tmp65;
    _jacobian(2, 4) = _tmp66;
    _jacobian(2, 5) = _tmp67;
  }

  if (hessian != nullptr) {
    Eigen::Matrix<Scalar, 6, 6>& _hessian = (*hessian);

    _hessian(0, 0) =
        std::pow(_tmp26, Scalar(2)) + std::pow(_tmp48, Scalar(2)) + std::pow(_tmp60, Scalar(2));
    _hessian(0, 1) = 0;
    _hessian(0, 2) = 0;
    _hessian(0, 3) = 0;
    _hessian(0, 4) = 0;
    _hessian(0, 5) = 0;
    _hessian(1, 0) = _tmp26 * _tmp29 + _tmp48 * _tmp51 + _tmp60 * _tmp63;
    _hessian(1, 1) =
        std::pow(_tmp29, Scalar(2)) + std::pow(_tmp51, Scalar(2)) + std::pow(_tmp63, Scalar(2));
    _hessian(1, 2) = 0;
    _hessian(1, 3) = 0;
    _hessian(1, 4) = 0;
    _hessian(1, 5) = 0;
    _hessian(2, 0) = _tmp26 * _tmp40 + _tmp48 * _tmp53 + _tmp60 * _tmp64;
    _hessian(2, 1) = _tmp29 * _tmp40 + _tmp51 * _tmp53 + _tmp63 * _tmp64;
    _hessian(2, 2) =
        std::pow(_tmp40, Scalar(2)) + std::pow(_tmp53, Scalar(2)) + std::pow(_tmp64, Scalar(2));
    _hessian(2, 3) = 0;
    _hessian(2, 4) = 0;
    _hessian(2, 5) = 0;
    _hessian(3, 0) = _tmp26 * _tmp41 + _tmp48 * _tmp54 + _tmp60 * _tmp65;
    _hessian(3, 1) = _tmp29 * _tmp41 + _tmp51 * _tmp54 + _tmp63 * _tmp65;
    _hessian(3, 2) = _tmp40 * _tmp41 + _tmp53 * _tmp54 + _tmp64 * _tmp65;
    _hessian(3, 3) =
        std::pow(_tmp41, Scalar(2)) + std::pow(_tmp54, Scalar(2)) + std::pow(_tmp65, Scalar(2));
    _hessian(3, 4) = 0;
    _hessian(3, 5) = 0;
    _hessian(4, 0) = _tmp26 * _tmp42 + _tmp48 * _tmp55 + _tmp60 * _tmp66;
    _hessian(4, 1) = _tmp29 * _tmp42 + _tmp51 * _tmp55 + _tmp63 * _tmp66;
    _hessian(4, 2) = _tmp40 * _tmp42 + _tmp53 * _tmp55 + _tmp64 * _tmp66;
    _hessian(4, 3) = _tmp41 * _tmp42 + _tmp54 * _tmp55 + _tmp65 * _tmp66;
    _hessian(4, 4) =
        std::pow(_tmp42, Scalar(2)) + std::pow(_tmp55, Scalar(2)) + std::pow(_tmp66, Scalar(2));
    _hessian(4, 5) = 0;
    _hessian(5, 0) = _tmp26 * _tmp45 + _tmp48 * _tmp57 + _tmp60 * _tmp67;
    _hessian(5, 1) = _tmp29 * _tmp45 + _tmp51 * _tmp57 + _tmp63 * _tmp67;
    _hessian(5, 2) = _tmp40 * _tmp45 + _tmp53 * _tmp57 + _tmp64 * _tmp67;
    _hessian(5, 3) = _tmp41 * _tmp45 + _tmp54 * _tmp57 + _tmp65 * _tmp67;
    _hessian(5, 4) = _tmp42 * _tmp45 + _tmp55 * _tmp57 + _tmp66 * _tmp67;
    _hessian(5, 5) = _tmp68 * std::pow(sqrt_info(0, 2), Scalar(2)) +
                     _tmp68 * std::pow(sqrt_info(1, 2), Scalar(2)) +
                     _tmp68 * std::pow(sqrt_info(2, 2), Scalar(2));
  }

  if (rhs != nullptr) {
    Eigen::Matrix<Scalar, 6, 1>& _rhs = (*rhs);

    _rhs(0, 0) = _tmp21 * _tmp26 + _tmp22 * _tmp48 + _tmp23 * _tmp60;
    _rhs(1, 0) = _tmp21 * _tmp29 + _tmp22 * _tmp51 + _tmp23 * _tmp63;
    _rhs(2, 0) = _tmp21 * _tmp40 + _tmp22 * _tmp53 + _tmp23 * _tmp64;
    _rhs(3, 0) = _tmp21 * _tmp41 + _tmp22 * _tmp54 + _tmp23 * _tmp65;
    _rhs(4, 0) = _tmp21 * _tmp42 + _tmp22 * _tmp55 + _tmp23 * _tmp66;
    _rhs(5, 0) = _tmp21 * _tmp45 + _tmp22 * _tmp57 + _tmp23 * _tmp67;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
