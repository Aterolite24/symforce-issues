// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     cpp_templates/function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>
#include <sym/pose3.h>
#include <sym/rot3.h>

namespace sym {

/**
 * Residual that penalizes the difference between between(a, b) and a_R_b.
 *
 * In vector space terms that would be:
 *     (b - a) - a_R_b
 *
 * In lie group terms:
 *     local_coordinates(a_R_b, between(a, b))
 *     to_tangent(compose(inverse(a_R_b), compose(inverse(a), b)))
 *
 * Args:
 *     sqrt_info: Square root information matrix to whiten residual. This can be computed from
 *                a covariance matrix as the cholesky decomposition of the inverse. In the case
 *                of a diagonal it will contain 1/sigma values. Must match the tangent dim.
 *     jacobian: (3x12) jacobian of res wrt args a (6), b (6)
 *     hessian: (12x12) Gauss-Newton hessian for args a (6), b (6)
 *     rhs: (12x1) Gauss-Newton rhs for args a (6), b (6)
 */
template <typename Scalar>
void BetweenFactorPose3Rotation(const sym::Pose3<Scalar>& a, const sym::Pose3<Scalar>& b,
                                const sym::Rot3<Scalar>& a_R_b,
                                const Eigen::Matrix<Scalar, 3, 3>& sqrt_info, const Scalar epsilon,
                                Eigen::Matrix<Scalar, 3, 1>* const res = nullptr,
                                Eigen::Matrix<Scalar, 3, 12>* const jacobian = nullptr,
                                Eigen::Matrix<Scalar, 12, 12>* const hessian = nullptr,
                                Eigen::Matrix<Scalar, 12, 1>* const rhs = nullptr) {
  // Total ops: 1109

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _a = a.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _b = b.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _a_R_b = a_R_b.Data();

  // Intermediate terms (214)
  const Scalar _tmp0 = _a[0] * _b[0] + _a[1] * _b[1] + _a[2] * _b[2] + _a[3] * _b[3];
  const Scalar _tmp1 = -_a[0] * _b[3] - _a[1] * _b[2] + _a[2] * _b[1] + _a[3] * _b[0];
  const Scalar _tmp2 = _a[0] * _b[2] - _a[1] * _b[3] - _a[2] * _b[0] + _a[3] * _b[1];
  const Scalar _tmp3 = -_a[0] * _b[1] + _a[1] * _b[0] - _a[2] * _b[3] + _a[3] * _b[2];
  const Scalar _tmp4 =
      _a_R_b[0] * _tmp3 - _a_R_b[1] * _tmp0 - _a_R_b[2] * _tmp1 + _a_R_b[3] * _tmp2;
  const Scalar _tmp5 =
      _a_R_b[0] * _tmp1 + _a_R_b[1] * _tmp2 + _a_R_b[2] * _tmp3 + _a_R_b[3] * _tmp0;
  const Scalar _tmp6 = (((_tmp5) > 0) - ((_tmp5) < 0));
  const Scalar _tmp7 = 2 * std::min<Scalar>(0, _tmp6) + 1;
  const Scalar _tmp8 = std::fabs(_tmp5);
  const Scalar _tmp9 = 1 - epsilon;
  const Scalar _tmp10 = std::min<Scalar>(_tmp8, _tmp9);
  const Scalar _tmp11 = 1 - std::pow(_tmp10, Scalar(2));
  const Scalar _tmp12 = std::acos(_tmp10);
  const Scalar _tmp13 = 2 * _tmp12 / std::sqrt(_tmp11);
  const Scalar _tmp14 = _tmp13 * _tmp7;
  const Scalar _tmp15 = _tmp14 * _tmp4;
  const Scalar _tmp16 =
      -_a_R_b[0] * _tmp0 - _a_R_b[1] * _tmp3 + _a_R_b[2] * _tmp2 + _a_R_b[3] * _tmp1;
  const Scalar _tmp17 = _tmp14 * _tmp16;
  const Scalar _tmp18 =
      _tmp7 * (-_a_R_b[0] * _tmp2 + _a_R_b[1] * _tmp1 - _a_R_b[2] * _tmp0 + _a_R_b[3] * _tmp3);
  const Scalar _tmp19 = _tmp13 * _tmp18;
  const Scalar _tmp20 =
      _tmp15 * sqrt_info(0, 1) + _tmp17 * sqrt_info(0, 0) + _tmp19 * sqrt_info(0, 2);
  const Scalar _tmp21 = _tmp18 * sqrt_info(1, 2);
  const Scalar _tmp22 = _tmp13 * _tmp21 + _tmp15 * sqrt_info(1, 1) + _tmp17 * sqrt_info(1, 0);
  const Scalar _tmp23 =
      _tmp15 * sqrt_info(2, 1) + _tmp17 * sqrt_info(2, 0) + _tmp19 * sqrt_info(2, 2);
  const Scalar _tmp24 = _a_R_b[2] * _b[2];
  const Scalar _tmp25 = _a_R_b[1] * _b[1];
  const Scalar _tmp26 = _a_R_b[3] * _b[3];
  const Scalar _tmp27 = -_tmp26;
  const Scalar _tmp28 = _a_R_b[0] * _b[0];
  const Scalar _tmp29 = _tmp27 + _tmp28;
  const Scalar _tmp30 = _tmp14 * (_tmp24 - _tmp25 + _tmp29);
  const Scalar _tmp31 = _a_R_b[3] * _b[1];
  const Scalar _tmp32 = _a_R_b[2] * _b[0];
  const Scalar _tmp33 = _a_R_b[1] * _b[3];
  const Scalar _tmp34 = -_tmp33;
  const Scalar _tmp35 = _a_R_b[0] * _b[2];
  const Scalar _tmp36 = -_tmp35;
  const Scalar _tmp37 = _tmp34 + _tmp36;
  const Scalar _tmp38 = _tmp31 + _tmp32 + _tmp37;
  const Scalar _tmp39 = _tmp6 * ((((-_tmp8 + _tmp9) > 0) - ((-_tmp8 + _tmp9) < 0)) + 1);
  const Scalar _tmp40 = _tmp10 * _tmp12 * _tmp39 / (_tmp11 * std::sqrt(_tmp11));
  const Scalar _tmp41 = _tmp38 * _tmp40;
  const Scalar _tmp42 = _tmp4 * _tmp7;
  const Scalar _tmp43 = _tmp42 * sqrt_info(0, 1);
  const Scalar _tmp44 = _tmp18 * _tmp41;
  const Scalar _tmp45 = _tmp16 * _tmp7;
  const Scalar _tmp46 = _tmp45 * sqrt_info(0, 0);
  const Scalar _tmp47 = _tmp39 / _tmp11;
  const Scalar _tmp48 = _tmp38 * _tmp47;
  const Scalar _tmp49 = _tmp18 * _tmp48;
  const Scalar _tmp50 = _a_R_b[0] * _b[1];
  const Scalar _tmp51 = -_tmp50;
  const Scalar _tmp52 = _a_R_b[3] * _b[2];
  const Scalar _tmp53 = _a_R_b[1] * _b[0];
  const Scalar _tmp54 = -_tmp53;
  const Scalar _tmp55 = _a_R_b[2] * _b[3];
  const Scalar _tmp56 = -_tmp55;
  const Scalar _tmp57 = _tmp54 + _tmp56;
  const Scalar _tmp58 = _tmp51 - _tmp52 + _tmp57;
  const Scalar _tmp59 = _tmp14 * sqrt_info(0, 0);
  const Scalar _tmp60 = _a_R_b[1] * _b[2];
  const Scalar _tmp61 = -_tmp60;
  const Scalar _tmp62 = _a_R_b[0] * _b[3];
  const Scalar _tmp63 = _a_R_b[2] * _b[1];
  const Scalar _tmp64 = -_tmp63;
  const Scalar _tmp65 = _a_R_b[3] * _b[0];
  const Scalar _tmp66 = _tmp64 + _tmp65;
  const Scalar _tmp67 = _tmp61 + _tmp62 + _tmp66;
  const Scalar _tmp68 = _tmp14 * _tmp67;
  const Scalar _tmp69 = _tmp42 * _tmp48;
  const Scalar _tmp70 = _tmp30 * sqrt_info(0, 1) + _tmp41 * _tmp43 + _tmp41 * _tmp46 +
                        _tmp44 * sqrt_info(0, 2) - _tmp46 * _tmp48 - _tmp49 * sqrt_info(0, 2) +
                        _tmp58 * _tmp59 + _tmp68 * sqrt_info(0, 2) - _tmp69 * sqrt_info(0, 1);
  const Scalar _tmp71 = (Scalar(1) / Scalar(2)) * _tmp70;
  const Scalar _tmp72 = -_tmp32;
  const Scalar _tmp73 = _tmp31 + _tmp72;
  const Scalar _tmp74 = _tmp14 * (_tmp34 + _tmp35 + _tmp73);
  const Scalar _tmp75 = _tmp24 + _tmp25;
  const Scalar _tmp76 = _tmp26 + _tmp28 + _tmp75;
  const Scalar _tmp77 = _tmp40 * _tmp76;
  const Scalar _tmp78 = _tmp18 * _tmp77;
  const Scalar _tmp79 = _tmp51 + _tmp52;
  const Scalar _tmp80 = _tmp53 + _tmp56 + _tmp79;
  const Scalar _tmp81 = _tmp14 * _tmp80;
  const Scalar _tmp82 = -_tmp62;
  const Scalar _tmp83 = _tmp61 + _tmp82;
  const Scalar _tmp84 = _tmp63 + _tmp65 + _tmp83;
  const Scalar _tmp85 = _tmp18 * _tmp47;
  const Scalar _tmp86 = _tmp85 * sqrt_info(0, 2);
  const Scalar _tmp87 = _tmp42 * _tmp47;
  const Scalar _tmp88 = _tmp87 * sqrt_info(0, 1);
  const Scalar _tmp89 = _tmp47 * _tmp76;
  const Scalar _tmp90 =
      (Scalar(1) / Scalar(2)) * _tmp43 * _tmp77 + (Scalar(1) / Scalar(2)) * _tmp46 * _tmp77 -
      Scalar(1) / Scalar(2) * _tmp46 * _tmp89 + (Scalar(1) / Scalar(2)) * _tmp59 * _tmp84 +
      (Scalar(1) / Scalar(2)) * _tmp74 * sqrt_info(0, 1) - Scalar(1) / Scalar(2) * _tmp76 * _tmp86 -
      Scalar(1) / Scalar(2) * _tmp76 * _tmp88 + (Scalar(1) / Scalar(2)) * _tmp78 * sqrt_info(0, 2) +
      (Scalar(1) / Scalar(2)) * _tmp81 * sqrt_info(0, 2);
  const Scalar _tmp91 = _tmp33 + _tmp36 + _tmp73;
  const Scalar _tmp92 = _tmp14 * _tmp91;
  const Scalar _tmp93 = -_tmp24 + _tmp25 + _tmp29;
  const Scalar _tmp94 = _tmp14 * _tmp93;
  const Scalar _tmp95 = _tmp50 + _tmp52 + _tmp57;
  const Scalar _tmp96 = _tmp47 * _tmp95;
  const Scalar _tmp97 = _tmp45 * _tmp96;
  const Scalar _tmp98 = _tmp42 * _tmp96;
  const Scalar _tmp99 = _tmp14 * (_tmp64 - _tmp65 + _tmp83);
  const Scalar _tmp100 = _tmp18 * _tmp40;
  const Scalar _tmp101 = _tmp100 * sqrt_info(0, 2);
  const Scalar _tmp102 = _tmp40 * _tmp95;
  const Scalar _tmp103 = _tmp101 * _tmp95 + _tmp102 * _tmp43 + _tmp102 * _tmp46 - _tmp86 * _tmp95 +
                         _tmp92 * sqrt_info(0, 0) + _tmp94 * sqrt_info(0, 2) -
                         _tmp97 * sqrt_info(0, 0) - _tmp98 * sqrt_info(0, 1) +
                         _tmp99 * sqrt_info(0, 1);
  const Scalar _tmp104 = (Scalar(1) / Scalar(2)) * _tmp103;
  const Scalar _tmp105 = _tmp60 + _tmp66 + _tmp82;
  const Scalar _tmp106 = _tmp105 * _tmp40;
  const Scalar _tmp107 = -_tmp31 + _tmp37 + _tmp72;
  const Scalar _tmp108 = _tmp107 * _tmp14;
  const Scalar _tmp109 = _tmp105 * _tmp47;
  const Scalar _tmp110 = _tmp54 + _tmp55 + _tmp79;
  const Scalar _tmp111 = _tmp110 * _tmp14;
  const Scalar _tmp112 = _tmp27 - _tmp28 + _tmp75;
  const Scalar _tmp113 = _tmp112 * _tmp14;
  const Scalar _tmp114 =
      (Scalar(1) / Scalar(2)) * _tmp101 * _tmp105 - Scalar(1) / Scalar(2) * _tmp105 * _tmp86 -
      Scalar(1) / Scalar(2) * _tmp105 * _tmp88 + (Scalar(1) / Scalar(2)) * _tmp106 * _tmp43 +
      (Scalar(1) / Scalar(2)) * _tmp106 * _tmp46 +
      (Scalar(1) / Scalar(2)) * _tmp108 * sqrt_info(0, 2) -
      Scalar(1) / Scalar(2) * _tmp109 * _tmp46 +
      (Scalar(1) / Scalar(2)) * _tmp111 * sqrt_info(0, 1) +
      (Scalar(1) / Scalar(2)) * _tmp113 * sqrt_info(0, 0);
  const Scalar _tmp115 = -_a[0] * _tmp90 - _a[1] * _tmp104 + _a[2] * _tmp71 + _a[3] * _tmp114;
  const Scalar _tmp116 = (Scalar(1) / Scalar(2)) * _a[0];
  const Scalar _tmp117 = -_a[1] * _tmp90 - _a[2] * _tmp114 + _a[3] * _tmp71 + _tmp103 * _tmp116;
  const Scalar _tmp118 = _a[1] * _tmp114 - _a[2] * _tmp90 + _a[3] * _tmp104 - _tmp116 * _tmp70;
  const Scalar _tmp119 = _a[3] * _a_R_b[0];
  const Scalar _tmp120 = _a[1] * _a_R_b[2];
  const Scalar _tmp121 = _a[0] * _a_R_b[3];
  const Scalar _tmp122 = _a[2] * _a_R_b[1];
  const Scalar _tmp123 = -_tmp119 - _tmp120 - _tmp121 + _tmp122;
  const Scalar _tmp124 = _tmp123 * _tmp14;
  const Scalar _tmp125 = _a[3] * _a_R_b[2];
  const Scalar _tmp126 = _a[1] * _a_R_b[0];
  const Scalar _tmp127 = _a[0] * _a_R_b[1];
  const Scalar _tmp128 = _a[2] * _a_R_b[3];
  const Scalar _tmp129 = -_tmp125 + _tmp126 - _tmp127 - _tmp128;
  const Scalar _tmp130 = _tmp129 * _tmp14;
  const Scalar _tmp131 =
      -_a[0] * _a_R_b[0] - _a[1] * _a_R_b[1] - _a[2] * _a_R_b[2] + _a[3] * _a_R_b[3];
  const Scalar _tmp132 = _tmp131 * _tmp40;
  const Scalar _tmp133 = _a[3] * _a_R_b[1];
  const Scalar _tmp134 = _a[1] * _a_R_b[3];
  const Scalar _tmp135 = _a[0] * _a_R_b[2];
  const Scalar _tmp136 = _a[2] * _a_R_b[0];
  const Scalar _tmp137 = -_tmp133 - _tmp134 + _tmp135 - _tmp136;
  const Scalar _tmp138 = _tmp137 * _tmp14;
  const Scalar _tmp139 = _tmp131 * _tmp47;
  const Scalar _tmp140 = _tmp139 * _tmp42;
  const Scalar _tmp141 = _tmp139 * _tmp45;
  const Scalar _tmp142 = _tmp139 * _tmp18;
  const Scalar _tmp143 = _tmp101 * _tmp131 + _tmp124 * sqrt_info(0, 0) + _tmp130 * sqrt_info(0, 2) +
                         _tmp132 * _tmp43 + _tmp132 * _tmp46 + _tmp138 * sqrt_info(0, 1) -
                         _tmp140 * sqrt_info(0, 1) - _tmp141 * sqrt_info(0, 0) -
                         _tmp142 * sqrt_info(0, 2);
  const Scalar _tmp144 = (Scalar(1) / Scalar(2)) * _b[0];
  const Scalar _tmp145 = _tmp119 + _tmp120 + _tmp121 - _tmp122;
  const Scalar _tmp146 = _tmp14 * _tmp145;
  const Scalar _tmp147 = _tmp131 * _tmp14;
  const Scalar _tmp148 = _tmp125 - _tmp126 + _tmp127 + _tmp128;
  const Scalar _tmp149 = _tmp148 * _tmp40;
  const Scalar _tmp150 = _tmp148 * _tmp47;
  const Scalar _tmp151 = _tmp101 * _tmp148 + _tmp138 * sqrt_info(0, 0) + _tmp146 * sqrt_info(0, 1) +
                         _tmp147 * sqrt_info(0, 2) - _tmp148 * _tmp86 - _tmp148 * _tmp88 +
                         _tmp149 * _tmp43 + _tmp149 * _tmp46 - _tmp150 * _tmp46;
  const Scalar _tmp152 = (Scalar(1) / Scalar(2)) * _b[1];
  const Scalar _tmp153 = _tmp133 + _tmp134 - _tmp135 + _tmp136;
  const Scalar _tmp154 = _tmp153 * _tmp47;
  const Scalar _tmp155 = _tmp153 * _tmp40;
  const Scalar _tmp156 = _tmp155 * _tmp18;
  const Scalar _tmp157 = _tmp124 * sqrt_info(0, 2) + _tmp147 * sqrt_info(0, 1) + _tmp148 * _tmp59 -
                         _tmp153 * _tmp86 - _tmp153 * _tmp88 - _tmp154 * _tmp46 + _tmp155 * _tmp43 +
                         _tmp155 * _tmp46 + _tmp156 * sqrt_info(0, 2);
  const Scalar _tmp158 = (Scalar(1) / Scalar(2)) * _b[2];
  const Scalar _tmp159 = _tmp145 * _tmp47;
  const Scalar _tmp160 = _tmp100 * _tmp145;
  const Scalar _tmp161 = _tmp145 * _tmp40;
  const Scalar _tmp162 = _tmp14 * _tmp153;
  const Scalar _tmp163 = _tmp130 * sqrt_info(0, 1) - _tmp145 * _tmp86 - _tmp145 * _tmp88 +
                         _tmp147 * sqrt_info(0, 0) - _tmp159 * _tmp46 + _tmp160 * sqrt_info(0, 2) +
                         _tmp161 * _tmp43 + _tmp161 * _tmp46 + _tmp162 * sqrt_info(0, 2);
  const Scalar _tmp164 = (Scalar(1) / Scalar(2)) * _b[3];
  const Scalar _tmp165 =
      -_tmp143 * _tmp144 - _tmp151 * _tmp152 + _tmp157 * _tmp158 + _tmp163 * _tmp164;
  const Scalar _tmp166 =
      -_tmp143 * _tmp152 + _tmp144 * _tmp151 + _tmp157 * _tmp164 - _tmp158 * _tmp163;
  const Scalar _tmp167 =
      -_tmp143 * _tmp158 - _tmp144 * _tmp157 + _tmp151 * _tmp164 + _tmp152 * _tmp163;
  const Scalar _tmp168 = _tmp42 * sqrt_info(1, 1);
  const Scalar _tmp169 = _tmp45 * sqrt_info(1, 0);
  const Scalar _tmp170 = _tmp14 * sqrt_info(1, 0);
  const Scalar _tmp171 = _tmp168 * _tmp41 - _tmp168 * _tmp48 + _tmp169 * _tmp41 - _tmp169 * _tmp48 +
                         _tmp170 * _tmp58 + _tmp21 * _tmp41 - _tmp21 * _tmp48 +
                         _tmp30 * sqrt_info(1, 1) + _tmp68 * sqrt_info(1, 2);
  const Scalar _tmp172 = (Scalar(1) / Scalar(2)) * _tmp171;
  const Scalar _tmp173 = _tmp21 * _tmp47;
  const Scalar _tmp174 = _tmp45 * _tmp89;
  const Scalar _tmp175 =
      (Scalar(1) / Scalar(2)) * _tmp168 * _tmp77 - Scalar(1) / Scalar(2) * _tmp168 * _tmp89 +
      (Scalar(1) / Scalar(2)) * _tmp169 * _tmp77 + (Scalar(1) / Scalar(2)) * _tmp170 * _tmp84 -
      Scalar(1) / Scalar(2) * _tmp173 * _tmp76 - Scalar(1) / Scalar(2) * _tmp174 * sqrt_info(1, 0) +
      (Scalar(1) / Scalar(2)) * _tmp21 * _tmp77 +
      (Scalar(1) / Scalar(2)) * _tmp74 * sqrt_info(1, 1) +
      (Scalar(1) / Scalar(2)) * _tmp81 * sqrt_info(1, 2);
  const Scalar _tmp176 = _tmp21 * _tmp40;
  const Scalar _tmp177 = _tmp102 * _tmp168 + _tmp102 * _tmp169 - _tmp168 * _tmp96 +
                         _tmp176 * _tmp95 - _tmp21 * _tmp96 + _tmp92 * sqrt_info(1, 0) +
                         _tmp94 * sqrt_info(1, 2) - _tmp97 * sqrt_info(1, 0) +
                         _tmp99 * sqrt_info(1, 1);
  const Scalar _tmp178 = (Scalar(1) / Scalar(2)) * _tmp177;
  const Scalar _tmp179 =
      -Scalar(1) / Scalar(2) * _tmp105 * _tmp173 + (Scalar(1) / Scalar(2)) * _tmp105 * _tmp176 +
      (Scalar(1) / Scalar(2)) * _tmp106 * _tmp168 + (Scalar(1) / Scalar(2)) * _tmp106 * _tmp169 +
      (Scalar(1) / Scalar(2)) * _tmp108 * sqrt_info(1, 2) -
      Scalar(1) / Scalar(2) * _tmp109 * _tmp168 - Scalar(1) / Scalar(2) * _tmp109 * _tmp169 +
      (Scalar(1) / Scalar(2)) * _tmp111 * sqrt_info(1, 1) +
      (Scalar(1) / Scalar(2)) * _tmp113 * sqrt_info(1, 0);
  const Scalar _tmp180 = -_a[0] * _tmp175 - _a[1] * _tmp178 + _a[2] * _tmp172 + _a[3] * _tmp179;
  const Scalar _tmp181 = -_a[1] * _tmp175 - _a[2] * _tmp179 + _a[3] * _tmp172 + _tmp116 * _tmp177;
  const Scalar _tmp182 = _a[1] * _tmp179 - _a[2] * _tmp175 + _a[3] * _tmp178 - _tmp116 * _tmp171;
  const Scalar _tmp183 = _tmp124 * sqrt_info(1, 0) + _tmp130 * sqrt_info(1, 2) + _tmp131 * _tmp176 +
                         _tmp132 * _tmp168 + _tmp132 * _tmp169 + _tmp138 * sqrt_info(1, 1) -
                         _tmp139 * _tmp168 - _tmp139 * _tmp21 - _tmp141 * sqrt_info(1, 0);
  const Scalar _tmp184 = _tmp138 * sqrt_info(1, 0) + _tmp146 * sqrt_info(1, 1) +
                         _tmp147 * sqrt_info(1, 2) - _tmp148 * _tmp173 + _tmp148 * _tmp176 +
                         _tmp149 * _tmp168 + _tmp149 * _tmp169 - _tmp150 * _tmp168 -
                         _tmp150 * _tmp169;
  const Scalar _tmp185 = _tmp124 * sqrt_info(1, 2) + _tmp147 * sqrt_info(1, 1) + _tmp148 * _tmp170 -
                         _tmp153 * _tmp173 + _tmp153 * _tmp176 - _tmp154 * _tmp168 -
                         _tmp154 * _tmp169 + _tmp155 * _tmp168 + _tmp155 * _tmp169;
  const Scalar _tmp186 = _tmp130 * sqrt_info(1, 1) - _tmp145 * _tmp173 + _tmp145 * _tmp176 +
                         _tmp147 * sqrt_info(1, 0) - _tmp159 * _tmp168 - _tmp159 * _tmp169 +
                         _tmp161 * _tmp168 + _tmp161 * _tmp169 + _tmp162 * sqrt_info(1, 2);
  const Scalar _tmp187 =
      -_tmp144 * _tmp183 - _tmp152 * _tmp184 + _tmp158 * _tmp185 + _tmp164 * _tmp186;
  const Scalar _tmp188 =
      _tmp144 * _tmp184 - _tmp152 * _tmp183 - _tmp158 * _tmp186 + _tmp164 * _tmp185;
  const Scalar _tmp189 =
      -_tmp144 * _tmp185 + _tmp152 * _tmp186 - _tmp158 * _tmp183 + _tmp164 * _tmp184;
  const Scalar _tmp190 = _tmp42 * sqrt_info(2, 1);
  const Scalar _tmp191 = _tmp45 * sqrt_info(2, 0);
  const Scalar _tmp192 = _tmp14 * sqrt_info(2, 0);
  const Scalar _tmp193 = _tmp14 * sqrt_info(2, 2);
  const Scalar _tmp194 = _tmp190 * _tmp41 + _tmp191 * _tmp41 - _tmp191 * _tmp48 + _tmp192 * _tmp58 +
                         _tmp193 * _tmp67 + _tmp30 * sqrt_info(2, 1) + _tmp44 * sqrt_info(2, 2) -
                         _tmp49 * sqrt_info(2, 2) - _tmp69 * sqrt_info(2, 1);
  const Scalar _tmp195 = (Scalar(1) / Scalar(2)) * _tmp194;
  const Scalar _tmp196 = _tmp85 * sqrt_info(2, 2);
  const Scalar _tmp197 = _tmp87 * sqrt_info(2, 1);
  const Scalar _tmp198 =
      -Scalar(1) / Scalar(2) * _tmp174 * sqrt_info(2, 0) +
      (Scalar(1) / Scalar(2)) * _tmp190 * _tmp77 + (Scalar(1) / Scalar(2)) * _tmp191 * _tmp77 +
      (Scalar(1) / Scalar(2)) * _tmp192 * _tmp84 + (Scalar(1) / Scalar(2)) * _tmp193 * _tmp80 -
      Scalar(1) / Scalar(2) * _tmp196 * _tmp76 - Scalar(1) / Scalar(2) * _tmp197 * _tmp76 +
      (Scalar(1) / Scalar(2)) * _tmp74 * sqrt_info(2, 1) +
      (Scalar(1) / Scalar(2)) * _tmp78 * sqrt_info(2, 2);
  const Scalar _tmp199 = _tmp100 * sqrt_info(2, 2);
  const Scalar _tmp200 = _tmp102 * _tmp190 + _tmp102 * _tmp191 + _tmp192 * _tmp91 +
                         _tmp193 * _tmp93 - _tmp196 * _tmp95 + _tmp199 * _tmp95 -
                         _tmp97 * sqrt_info(2, 0) - _tmp98 * sqrt_info(2, 1) +
                         _tmp99 * sqrt_info(2, 1);
  const Scalar _tmp201 = (Scalar(1) / Scalar(2)) * _tmp200;
  const Scalar _tmp202 = _tmp14 * sqrt_info(2, 1);
  const Scalar _tmp203 =
      -Scalar(1) / Scalar(2) * _tmp105 * _tmp196 - Scalar(1) / Scalar(2) * _tmp105 * _tmp197 +
      (Scalar(1) / Scalar(2)) * _tmp105 * _tmp199 + (Scalar(1) / Scalar(2)) * _tmp106 * _tmp190 +
      (Scalar(1) / Scalar(2)) * _tmp106 * _tmp191 + (Scalar(1) / Scalar(2)) * _tmp107 * _tmp193 -
      Scalar(1) / Scalar(2) * _tmp109 * _tmp191 + (Scalar(1) / Scalar(2)) * _tmp110 * _tmp202 +
      (Scalar(1) / Scalar(2)) * _tmp112 * _tmp192;
  const Scalar _tmp204 = -_a[0] * _tmp198 - _a[1] * _tmp201 + _a[2] * _tmp195 + _a[3] * _tmp203;
  const Scalar _tmp205 = -_a[1] * _tmp198 - _a[2] * _tmp203 + _a[3] * _tmp195 + _tmp116 * _tmp200;
  const Scalar _tmp206 = _a[1] * _tmp203 - _a[2] * _tmp198 + _a[3] * _tmp201 - _tmp116 * _tmp194;
  const Scalar _tmp207 = _tmp123 * _tmp192 + _tmp129 * _tmp193 + _tmp131 * _tmp199 +
                         _tmp132 * _tmp190 + _tmp132 * _tmp191 + _tmp138 * sqrt_info(2, 1) -
                         _tmp140 * sqrt_info(2, 1) - _tmp141 * sqrt_info(2, 0) -
                         _tmp142 * sqrt_info(2, 2);
  const Scalar _tmp208 = _tmp131 * _tmp193 + _tmp137 * _tmp192 + _tmp146 * sqrt_info(2, 1) -
                         _tmp148 * _tmp196 - _tmp148 * _tmp197 + _tmp148 * _tmp199 +
                         _tmp149 * _tmp190 + _tmp149 * _tmp191 - _tmp150 * _tmp191;
  const Scalar _tmp209 = _tmp123 * _tmp193 + _tmp131 * _tmp202 + _tmp148 * _tmp192 -
                         _tmp153 * _tmp196 - _tmp153 * _tmp197 - _tmp154 * _tmp191 +
                         _tmp155 * _tmp190 + _tmp155 * _tmp191 + _tmp156 * sqrt_info(2, 2);
  const Scalar _tmp210 = _tmp129 * _tmp202 + _tmp131 * _tmp192 - _tmp145 * _tmp196 -
                         _tmp145 * _tmp197 + _tmp153 * _tmp193 - _tmp159 * _tmp191 +
                         _tmp160 * sqrt_info(2, 2) + _tmp161 * _tmp190 + _tmp161 * _tmp191;
  const Scalar _tmp211 =
      -_tmp144 * _tmp207 - _tmp152 * _tmp208 + _tmp158 * _tmp209 + _tmp164 * _tmp210;
  const Scalar _tmp212 =
      _tmp144 * _tmp208 - _tmp152 * _tmp207 - _tmp158 * _tmp210 + _tmp164 * _tmp209;
  const Scalar _tmp213 =
      -_tmp144 * _tmp209 + _tmp152 * _tmp210 - _tmp158 * _tmp207 + _tmp164 * _tmp208;

  // Output terms (4)
  if (res != nullptr) {
    Eigen::Matrix<Scalar, 3, 1>& _res = (*res);

    _res(0, 0) = _tmp20;
    _res(1, 0) = _tmp22;
    _res(2, 0) = _tmp23;
  }

  if (jacobian != nullptr) {
    Eigen::Matrix<Scalar, 3, 12>& _jacobian = (*jacobian);

    _jacobian(0, 0) = _tmp115;
    _jacobian(0, 1) = _tmp117;
    _jacobian(0, 2) = _tmp118;
    _jacobian(0, 3) = 0;
    _jacobian(0, 4) = 0;
    _jacobian(0, 5) = 0;
    _jacobian(0, 6) = _tmp165;
    _jacobian(0, 7) = _tmp166;
    _jacobian(0, 8) = _tmp167;
    _jacobian(0, 9) = 0;
    _jacobian(0, 10) = 0;
    _jacobian(0, 11) = 0;
    _jacobian(1, 0) = _tmp180;
    _jacobian(1, 1) = _tmp181;
    _jacobian(1, 2) = _tmp182;
    _jacobian(1, 3) = 0;
    _jacobian(1, 4) = 0;
    _jacobian(1, 5) = 0;
    _jacobian(1, 6) = _tmp187;
    _jacobian(1, 7) = _tmp188;
    _jacobian(1, 8) = _tmp189;
    _jacobian(1, 9) = 0;
    _jacobian(1, 10) = 0;
    _jacobian(1, 11) = 0;
    _jacobian(2, 0) = _tmp204;
    _jacobian(2, 1) = _tmp205;
    _jacobian(2, 2) = _tmp206;
    _jacobian(2, 3) = 0;
    _jacobian(2, 4) = 0;
    _jacobian(2, 5) = 0;
    _jacobian(2, 6) = _tmp211;
    _jacobian(2, 7) = _tmp212;
    _jacobian(2, 8) = _tmp213;
    _jacobian(2, 9) = 0;
    _jacobian(2, 10) = 0;
    _jacobian(2, 11) = 0;
  }

  if (hessian != nullptr) {
    Eigen::Matrix<Scalar, 12, 12>& _hessian = (*hessian);

    _hessian(0, 0) =
        std::pow(_tmp115, Scalar(2)) + std::pow(_tmp180, Scalar(2)) + std::pow(_tmp204, Scalar(2));
    _hessian(0, 1) = 0;
    _hessian(0, 2) = 0;
    _hessian(0, 3) = 0;
    _hessian(0, 4) = 0;
    _hessian(0, 5) = 0;
    _hessian(0, 6) = 0;
    _hessian(0, 7) = 0;
    _hessian(0, 8) = 0;
    _hessian(0, 9) = 0;
    _hessian(0, 10) = 0;
    _hessian(0, 11) = 0;
    _hessian(1, 0) = _tmp115 * _tmp117 + _tmp180 * _tmp181 + _tmp204 * _tmp205;
    _hessian(1, 1) =
        std::pow(_tmp117, Scalar(2)) + std::pow(_tmp181, Scalar(2)) + std::pow(_tmp205, Scalar(2));
    _hessian(1, 2) = 0;
    _hessian(1, 3) = 0;
    _hessian(1, 4) = 0;
    _hessian(1, 5) = 0;
    _hessian(1, 6) = 0;
    _hessian(1, 7) = 0;
    _hessian(1, 8) = 0;
    _hessian(1, 9) = 0;
    _hessian(1, 10) = 0;
    _hessian(1, 11) = 0;
    _hessian(2, 0) = _tmp115 * _tmp118 + _tmp180 * _tmp182 + _tmp204 * _tmp206;
    _hessian(2, 1) = _tmp117 * _tmp118 + _tmp181 * _tmp182 + _tmp205 * _tmp206;
    _hessian(2, 2) =
        std::pow(_tmp118, Scalar(2)) + std::pow(_tmp182, Scalar(2)) + std::pow(_tmp206, Scalar(2));
    _hessian(2, 3) = 0;
    _hessian(2, 4) = 0;
    _hessian(2, 5) = 0;
    _hessian(2, 6) = 0;
    _hessian(2, 7) = 0;
    _hessian(2, 8) = 0;
    _hessian(2, 9) = 0;
    _hessian(2, 10) = 0;
    _hessian(2, 11) = 0;
    _hessian(3, 0) = 0;
    _hessian(3, 1) = 0;
    _hessian(3, 2) = 0;
    _hessian(3, 3) = 0;
    _hessian(3, 4) = 0;
    _hessian(3, 5) = 0;
    _hessian(3, 6) = 0;
    _hessian(3, 7) = 0;
    _hessian(3, 8) = 0;
    _hessian(3, 9) = 0;
    _hessian(3, 10) = 0;
    _hessian(3, 11) = 0;
    _hessian(4, 0) = 0;
    _hessian(4, 1) = 0;
    _hessian(4, 2) = 0;
    _hessian(4, 3) = 0;
    _hessian(4, 4) = 0;
    _hessian(4, 5) = 0;
    _hessian(4, 6) = 0;
    _hessian(4, 7) = 0;
    _hessian(4, 8) = 0;
    _hessian(4, 9) = 0;
    _hessian(4, 10) = 0;
    _hessian(4, 11) = 0;
    _hessian(5, 0) = 0;
    _hessian(5, 1) = 0;
    _hessian(5, 2) = 0;
    _hessian(5, 3) = 0;
    _hessian(5, 4) = 0;
    _hessian(5, 5) = 0;
    _hessian(5, 6) = 0;
    _hessian(5, 7) = 0;
    _hessian(5, 8) = 0;
    _hessian(5, 9) = 0;
    _hessian(5, 10) = 0;
    _hessian(5, 11) = 0;
    _hessian(6, 0) = _tmp115 * _tmp165 + _tmp180 * _tmp187 + _tmp204 * _tmp211;
    _hessian(6, 1) = _tmp117 * _tmp165 + _tmp181 * _tmp187 + _tmp205 * _tmp211;
    _hessian(6, 2) = _tmp118 * _tmp165 + _tmp182 * _tmp187 + _tmp206 * _tmp211;
    _hessian(6, 3) = 0;
    _hessian(6, 4) = 0;
    _hessian(6, 5) = 0;
    _hessian(6, 6) =
        std::pow(_tmp165, Scalar(2)) + std::pow(_tmp187, Scalar(2)) + std::pow(_tmp211, Scalar(2));
    _hessian(6, 7) = 0;
    _hessian(6, 8) = 0;
    _hessian(6, 9) = 0;
    _hessian(6, 10) = 0;
    _hessian(6, 11) = 0;
    _hessian(7, 0) = _tmp115 * _tmp166 + _tmp180 * _tmp188 + _tmp204 * _tmp212;
    _hessian(7, 1) = _tmp117 * _tmp166 + _tmp181 * _tmp188 + _tmp205 * _tmp212;
    _hessian(7, 2) = _tmp118 * _tmp166 + _tmp182 * _tmp188 + _tmp206 * _tmp212;
    _hessian(7, 3) = 0;
    _hessian(7, 4) = 0;
    _hessian(7, 5) = 0;
    _hessian(7, 6) = _tmp165 * _tmp166 + _tmp187 * _tmp188 + _tmp211 * _tmp212;
    _hessian(7, 7) =
        std::pow(_tmp166, Scalar(2)) + std::pow(_tmp188, Scalar(2)) + std::pow(_tmp212, Scalar(2));
    _hessian(7, 8) = 0;
    _hessian(7, 9) = 0;
    _hessian(7, 10) = 0;
    _hessian(7, 11) = 0;
    _hessian(8, 0) = _tmp115 * _tmp167 + _tmp180 * _tmp189 + _tmp204 * _tmp213;
    _hessian(8, 1) = _tmp117 * _tmp167 + _tmp181 * _tmp189 + _tmp205 * _tmp213;
    _hessian(8, 2) = _tmp118 * _tmp167 + _tmp182 * _tmp189 + _tmp206 * _tmp213;
    _hessian(8, 3) = 0;
    _hessian(8, 4) = 0;
    _hessian(8, 5) = 0;
    _hessian(8, 6) = _tmp165 * _tmp167 + _tmp187 * _tmp189 + _tmp211 * _tmp213;
    _hessian(8, 7) = _tmp166 * _tmp167 + _tmp188 * _tmp189 + _tmp212 * _tmp213;
    _hessian(8, 8) =
        std::pow(_tmp167, Scalar(2)) + std::pow(_tmp189, Scalar(2)) + std::pow(_tmp213, Scalar(2));
    _hessian(8, 9) = 0;
    _hessian(8, 10) = 0;
    _hessian(8, 11) = 0;
    _hessian(9, 0) = 0;
    _hessian(9, 1) = 0;
    _hessian(9, 2) = 0;
    _hessian(9, 3) = 0;
    _hessian(9, 4) = 0;
    _hessian(9, 5) = 0;
    _hessian(9, 6) = 0;
    _hessian(9, 7) = 0;
    _hessian(9, 8) = 0;
    _hessian(9, 9) = 0;
    _hessian(9, 10) = 0;
    _hessian(9, 11) = 0;
    _hessian(10, 0) = 0;
    _hessian(10, 1) = 0;
    _hessian(10, 2) = 0;
    _hessian(10, 3) = 0;
    _hessian(10, 4) = 0;
    _hessian(10, 5) = 0;
    _hessian(10, 6) = 0;
    _hessian(10, 7) = 0;
    _hessian(10, 8) = 0;
    _hessian(10, 9) = 0;
    _hessian(10, 10) = 0;
    _hessian(10, 11) = 0;
    _hessian(11, 0) = 0;
    _hessian(11, 1) = 0;
    _hessian(11, 2) = 0;
    _hessian(11, 3) = 0;
    _hessian(11, 4) = 0;
    _hessian(11, 5) = 0;
    _hessian(11, 6) = 0;
    _hessian(11, 7) = 0;
    _hessian(11, 8) = 0;
    _hessian(11, 9) = 0;
    _hessian(11, 10) = 0;
    _hessian(11, 11) = 0;
  }

  if (rhs != nullptr) {
    Eigen::Matrix<Scalar, 12, 1>& _rhs = (*rhs);

    _rhs(0, 0) = _tmp115 * _tmp20 + _tmp180 * _tmp22 + _tmp204 * _tmp23;
    _rhs(1, 0) = _tmp117 * _tmp20 + _tmp181 * _tmp22 + _tmp205 * _tmp23;
    _rhs(2, 0) = _tmp118 * _tmp20 + _tmp182 * _tmp22 + _tmp206 * _tmp23;
    _rhs(3, 0) = 0;
    _rhs(4, 0) = 0;
    _rhs(5, 0) = 0;
    _rhs(6, 0) = _tmp165 * _tmp20 + _tmp187 * _tmp22 + _tmp211 * _tmp23;
    _rhs(7, 0) = _tmp166 * _tmp20 + _tmp188 * _tmp22 + _tmp212 * _tmp23;
    _rhs(8, 0) = _tmp167 * _tmp20 + _tmp189 * _tmp22 + _tmp213 * _tmp23;
    _rhs(9, 0) = 0;
    _rhs(10, 0) = 0;
    _rhs(11, 0) = 0;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
