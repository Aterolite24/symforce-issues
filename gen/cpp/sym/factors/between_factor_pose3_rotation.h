// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     cpp_templates/function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/pose3.h>
#include <sym/rot3.h>

namespace sym {

/**
 * Residual that penalizes the difference between between(a, b) and a_R_b.
 *
 * In vector space terms that would be:
 *     (b - a) - a_R_b
 *
 * In lie group terms:
 *     local_coordinates(a_R_b, between(a, b))
 *     to_tangent(compose(inverse(a_R_b), compose(inverse(a), b)))
 *
 * Args:
 *     sqrt_info: Square root information matrix to whiten residual. This can be computed from
 *                a covariance matrix as the cholesky decomposition of the inverse. In the case
 *                of a diagonal it will contain 1/sigma values. Must match the tangent dim.
 *     jacobian: (3x12) jacobian of res wrt args a (6), b (6)
 *     hessian: (12x12) Gauss-Newton hessian for args a (6), b (6)
 *     rhs: (12x1) Gauss-Newton rhs for args a (6), b (6)
 */
template <typename Scalar>
void BetweenFactorPose3Rotation(const sym::Pose3<Scalar>& a, const sym::Pose3<Scalar>& b,
                                const sym::Rot3<Scalar>& a_R_b,
                                const Eigen::Matrix<Scalar, 3, 3>& sqrt_info, const Scalar epsilon,
                                Eigen::Matrix<Scalar, 3, 1>* const res = nullptr,
                                Eigen::Matrix<Scalar, 3, 12>* const jacobian = nullptr,
                                Eigen::Matrix<Scalar, 12, 12>* const hessian = nullptr,
                                Eigen::Matrix<Scalar, 12, 1>* const rhs = nullptr) {
  // Total ops: 863

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _a = a.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _b = b.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _a_R_b = a_R_b.Data();

  // Intermediate terms (211)
  const Scalar _tmp0 = _a[3] * _b[3];
  const Scalar _tmp1 = _a[1] * _b[1];
  const Scalar _tmp2 = _a[0] * _b[0];
  const Scalar _tmp3 = _a[2] * _b[2];
  const Scalar _tmp4 = _tmp0 + _tmp1 + _tmp2 + _tmp3;
  const Scalar _tmp5 = _a_R_b[3] * _tmp4;
  const Scalar _tmp6 = _a[1] * _b[2];
  const Scalar _tmp7 = _a[0] * _b[3];
  const Scalar _tmp8 = _a[3] * _b[0];
  const Scalar _tmp9 = _a[2] * _b[1];
  const Scalar _tmp10 = -_tmp6 - _tmp7 + _tmp8 + _tmp9;
  const Scalar _tmp11 = _a_R_b[0] * _tmp10;
  const Scalar _tmp12 = _a[1] * _b[3];
  const Scalar _tmp13 = _a[0] * _b[2];
  const Scalar _tmp14 = _a[3] * _b[1];
  const Scalar _tmp15 = _a[2] * _b[0];
  const Scalar _tmp16 = -_tmp12 + _tmp13 + _tmp14 - _tmp15;
  const Scalar _tmp17 = _a_R_b[1] * _tmp16;
  const Scalar _tmp18 = _a[1] * _b[0];
  const Scalar _tmp19 = _a[0] * _b[1];
  const Scalar _tmp20 = _a[3] * _b[2];
  const Scalar _tmp21 = _a[2] * _b[3];
  const Scalar _tmp22 = _tmp18 - _tmp19 + _tmp20 - _tmp21;
  const Scalar _tmp23 = _a_R_b[2] * _tmp22;
  const Scalar _tmp24 = _tmp11 + _tmp17 + _tmp23 + _tmp5;
  const Scalar _tmp25 = 2 * std::min<Scalar>(0, (((_tmp24) > 0) - ((_tmp24) < 0))) + 1;
  const Scalar _tmp26 = 2 * _tmp25;
  const Scalar _tmp27 = 1 - epsilon;
  const Scalar _tmp28 = std::min<Scalar>(_tmp27, std::fabs(_tmp24));
  const Scalar _tmp29 = std::acos(_tmp28) / std::sqrt(1 - std::pow(_tmp28, Scalar(2)));
  const Scalar _tmp30 = _tmp26 * _tmp29;
  const Scalar _tmp31 =
      _a_R_b[0] * _tmp22 - _a_R_b[1] * _tmp4 - _a_R_b[2] * _tmp10 + _a_R_b[3] * _tmp16;
  const Scalar _tmp32 = _tmp31 * sqrt_info(0, 1);
  const Scalar _tmp33 =
      -_a_R_b[0] * _tmp4 - _a_R_b[1] * _tmp22 + _a_R_b[2] * _tmp16 + _a_R_b[3] * _tmp10;
  const Scalar _tmp34 = _tmp30 * _tmp33;
  const Scalar _tmp35 =
      -_a_R_b[0] * _tmp16 + _a_R_b[1] * _tmp10 - _a_R_b[2] * _tmp4 + _a_R_b[3] * _tmp22;
  const Scalar _tmp36 = _tmp30 * _tmp35;
  const Scalar _tmp37 = _tmp30 * _tmp32 + _tmp34 * sqrt_info(0, 0) + _tmp36 * sqrt_info(0, 2);
  const Scalar _tmp38 = _tmp31 * sqrt_info(1, 1);
  const Scalar _tmp39 = _tmp30 * _tmp38 + _tmp34 * sqrt_info(1, 0) + _tmp36 * sqrt_info(1, 2);
  const Scalar _tmp40 = _tmp26 * sqrt_info(2, 1);
  const Scalar _tmp41 =
      _tmp29 * _tmp31 * _tmp40 + _tmp34 * sqrt_info(2, 0) + _tmp36 * sqrt_info(2, 2);
  const Scalar _tmp42 = (Scalar(1) / Scalar(2)) * _tmp6;
  const Scalar _tmp43 = (Scalar(1) / Scalar(2)) * _tmp7;
  const Scalar _tmp44 = (Scalar(1) / Scalar(2)) * _tmp8;
  const Scalar _tmp45 = (Scalar(1) / Scalar(2)) * _tmp9;
  const Scalar _tmp46 = -_tmp42 - _tmp43 + _tmp44 + _tmp45;
  const Scalar _tmp47 = _a_R_b[3] * _tmp46;
  const Scalar _tmp48 = (Scalar(1) / Scalar(2)) * _tmp1;
  const Scalar _tmp49 = (Scalar(1) / Scalar(2)) * _tmp2;
  const Scalar _tmp50 = (Scalar(1) / Scalar(2)) * _tmp0;
  const Scalar _tmp51 = (Scalar(1) / Scalar(2)) * _tmp3;
  const Scalar _tmp52 = -_tmp48 - _tmp49 - _tmp50 - _tmp51;
  const Scalar _tmp53 = _a_R_b[0] * _tmp52;
  const Scalar _tmp54 = (Scalar(1) / Scalar(2)) * _tmp12;
  const Scalar _tmp55 = (Scalar(1) / Scalar(2)) * _tmp13;
  const Scalar _tmp56 = (Scalar(1) / Scalar(2)) * _tmp14;
  const Scalar _tmp57 = (Scalar(1) / Scalar(2)) * _tmp15;
  const Scalar _tmp58 = _tmp54 - _tmp55 - _tmp56 + _tmp57;
  const Scalar _tmp59 = _a_R_b[2] * _tmp58;
  const Scalar _tmp60 = (Scalar(1) / Scalar(2)) * _tmp18;
  const Scalar _tmp61 = (Scalar(1) / Scalar(2)) * _tmp19;
  const Scalar _tmp62 = (Scalar(1) / Scalar(2)) * _tmp20;
  const Scalar _tmp63 = (Scalar(1) / Scalar(2)) * _tmp21;
  const Scalar _tmp64 = _tmp60 - _tmp61 + _tmp62 - _tmp63;
  const Scalar _tmp65 = _a_R_b[1] * _tmp64;
  const Scalar _tmp66 = _tmp59 + _tmp65;
  const Scalar _tmp67 = _tmp47 + _tmp53 + _tmp66;
  const Scalar _tmp68 = _tmp11 + _tmp17 + _tmp23 + _tmp5;
  const Scalar _tmp69 = std::fabs(_tmp68);
  const Scalar _tmp70 = std::min<Scalar>(_tmp27, _tmp69);
  const Scalar _tmp71 = std::acos(_tmp70);
  const Scalar _tmp72 = 1 - std::pow(_tmp70, Scalar(2));
  const Scalar _tmp73 = _tmp25 * ((((_tmp27 - _tmp69) > 0) - ((_tmp27 - _tmp69) < 0)) + 1) *
                        (((_tmp68) > 0) - ((_tmp68) < 0));
  const Scalar _tmp74 = _tmp70 * _tmp71 * _tmp73 / (_tmp72 * std::sqrt(_tmp72));
  const Scalar _tmp75 = _tmp35 * _tmp74;
  const Scalar _tmp76 = _tmp67 * _tmp75;
  const Scalar _tmp77 = -_a_R_b[1] * _tmp46;
  const Scalar _tmp78 = _a_R_b[2] * _tmp52;
  const Scalar _tmp79 = _a_R_b[0] * _tmp58;
  const Scalar _tmp80 = _a_R_b[3] * _tmp64;
  const Scalar _tmp81 = _tmp79 + _tmp80;
  const Scalar _tmp82 = _tmp77 - _tmp78 + _tmp81;
  const Scalar _tmp83 = _tmp71 / std::sqrt(_tmp72);
  const Scalar _tmp84 = _tmp26 * _tmp83;
  const Scalar _tmp85 = _tmp84 * sqrt_info(0, 1);
  const Scalar _tmp86 = _tmp33 * _tmp74;
  const Scalar _tmp87 = _tmp67 * _tmp86;
  const Scalar _tmp88 = _tmp32 * _tmp74;
  const Scalar _tmp89 = _a_R_b[0] * _tmp46;
  const Scalar _tmp90 = _a_R_b[3] * _tmp52;
  const Scalar _tmp91 = -_a_R_b[1] * _tmp58;
  const Scalar _tmp92 = _a_R_b[2] * _tmp64;
  const Scalar _tmp93 = _tmp91 + _tmp92;
  const Scalar _tmp94 = -_tmp89 + _tmp90 + _tmp93;
  const Scalar _tmp95 = _tmp84 * _tmp94;
  const Scalar _tmp96 = _tmp73 / _tmp72;
  const Scalar _tmp97 = _tmp67 * _tmp96;
  const Scalar _tmp98 = _tmp35 * _tmp96;
  const Scalar _tmp99 = _tmp67 * _tmp98;
  const Scalar _tmp100 = _a_R_b[2] * _tmp46;
  const Scalar _tmp101 = _a_R_b[1] * _tmp52;
  const Scalar _tmp102 = _a_R_b[3] * _tmp58;
  const Scalar _tmp103 = -_a_R_b[0] * _tmp64;
  const Scalar _tmp104 = _tmp102 + _tmp103;
  const Scalar _tmp105 = _tmp84 * (-_tmp100 + _tmp101 + _tmp104);
  const Scalar _tmp106 = _tmp33 * _tmp96;
  const Scalar _tmp107 = _tmp106 * sqrt_info(0, 0);
  const Scalar _tmp108 = _tmp105 * sqrt_info(0, 2) - _tmp107 * _tmp67 - _tmp32 * _tmp97 +
                         _tmp67 * _tmp88 + _tmp76 * sqrt_info(0, 2) + _tmp82 * _tmp85 +
                         _tmp87 * sqrt_info(0, 0) + _tmp95 * sqrt_info(0, 0) -
                         _tmp99 * sqrt_info(0, 2);
  const Scalar _tmp109 = -_tmp54 + _tmp55 + _tmp56 - _tmp57;
  const Scalar _tmp110 = _a_R_b[0] * _tmp109;
  const Scalar _tmp111 = -_tmp60 + _tmp61 - _tmp62 + _tmp63;
  const Scalar _tmp112 = _a_R_b[3] * _tmp111;
  const Scalar _tmp113 = _tmp84 * (-_tmp110 + _tmp112 + _tmp77 + _tmp78);
  const Scalar _tmp114 = _a_R_b[3] * _tmp109;
  const Scalar _tmp115 = _a_R_b[0] * _tmp111;
  const Scalar _tmp116 = _tmp100 + _tmp115;
  const Scalar _tmp117 = _tmp101 + _tmp114 + _tmp116;
  const Scalar _tmp118 = _tmp117 * _tmp86;
  const Scalar _tmp119 = _tmp117 * _tmp98;
  const Scalar _tmp120 = _tmp117 * _tmp75;
  const Scalar _tmp121 = _a_R_b[1] * _tmp109;
  const Scalar _tmp122 = -_a_R_b[2] * _tmp111;
  const Scalar _tmp123 = -_tmp121 + _tmp122 + _tmp89 + _tmp90;
  const Scalar _tmp124 = -_a_R_b[2] * _tmp109;
  const Scalar _tmp125 = _a_R_b[1] * _tmp111;
  const Scalar _tmp126 = _tmp125 + _tmp47;
  const Scalar _tmp127 = _tmp84 * (_tmp124 + _tmp126 - _tmp53);
  const Scalar _tmp128 = _tmp117 * _tmp96;
  const Scalar _tmp129 = -_tmp107 * _tmp117 + _tmp113 * sqrt_info(0, 0) + _tmp117 * _tmp88 +
                         _tmp118 * sqrt_info(0, 0) - _tmp119 * sqrt_info(0, 2) +
                         _tmp120 * sqrt_info(0, 2) + _tmp123 * _tmp85 + _tmp127 * sqrt_info(0, 2) -
                         _tmp128 * _tmp32;
  const Scalar _tmp130 = _tmp42 + _tmp43 - _tmp44 - _tmp45;
  const Scalar _tmp131 = _a_R_b[2] * _tmp130;
  const Scalar _tmp132 = _tmp114 + _tmp131;
  const Scalar _tmp133 = -_tmp101 + _tmp103 + _tmp132;
  const Scalar _tmp134 = _tmp133 * _tmp84;
  const Scalar _tmp135 = _a_R_b[1] * _tmp130;
  const Scalar _tmp136 = _tmp110 + _tmp135;
  const Scalar _tmp137 = _tmp136 + _tmp78 + _tmp80;
  const Scalar _tmp138 = _tmp137 * _tmp86;
  const Scalar _tmp139 = _a_R_b[3] * _tmp130;
  const Scalar _tmp140 = _tmp124 + _tmp139;
  const Scalar _tmp141 = _tmp140 + _tmp53 - _tmp65;
  const Scalar _tmp142 = _tmp137 * _tmp75;
  const Scalar _tmp143 = _tmp137 * _tmp96;
  const Scalar _tmp144 = _tmp143 * _tmp35;
  const Scalar _tmp145 = _tmp143 * _tmp33;
  const Scalar _tmp146 = -_a_R_b[0] * _tmp130;
  const Scalar _tmp147 = _tmp121 + _tmp146;
  const Scalar _tmp148 = _tmp84 * (_tmp147 + _tmp90 - _tmp92);
  const Scalar _tmp149 = _tmp134 * sqrt_info(0, 0) + _tmp137 * _tmp88 + _tmp138 * sqrt_info(0, 0) +
                         _tmp141 * _tmp85 + _tmp142 * sqrt_info(0, 2) - _tmp143 * _tmp32 -
                         _tmp144 * sqrt_info(0, 2) - _tmp145 * sqrt_info(0, 0) +
                         _tmp148 * sqrt_info(0, 2);
  const Scalar _tmp150 = _tmp48 + _tmp49 + _tmp50 + _tmp51;
  const Scalar _tmp151 = _a_R_b[0] * _tmp150;
  const Scalar _tmp152 = _tmp139 + _tmp151 + _tmp66;
  const Scalar _tmp153 = _tmp152 * _tmp96;
  const Scalar _tmp154 = _tmp153 * _tmp35;
  const Scalar _tmp155 = _tmp152 * _tmp74;
  const Scalar _tmp156 = _tmp153 * _tmp33;
  const Scalar _tmp157 = _tmp155 * _tmp33;
  const Scalar _tmp158 = _tmp152 * _tmp75;
  const Scalar _tmp159 = _a_R_b[3] * _tmp150;
  const Scalar _tmp160 = _tmp84 * (_tmp146 + _tmp159 + _tmp93);
  const Scalar _tmp161 = _a_R_b[2] * _tmp150;
  const Scalar _tmp162 = -_tmp135 - _tmp161 + _tmp81;
  const Scalar _tmp163 = _a_R_b[1] * _tmp150;
  const Scalar _tmp164 = _tmp84 * (_tmp104 - _tmp131 + _tmp163);
  const Scalar _tmp165 = -_tmp153 * _tmp32 - _tmp154 * sqrt_info(0, 2) + _tmp155 * _tmp32 -
                         _tmp156 * sqrt_info(0, 0) + _tmp157 * sqrt_info(0, 0) +
                         _tmp158 * sqrt_info(0, 2) + _tmp160 * sqrt_info(0, 0) + _tmp162 * _tmp85 +
                         _tmp164 * sqrt_info(0, 2);
  const Scalar _tmp166 = _tmp102 + _tmp116 + _tmp163;
  const Scalar _tmp167 = _tmp106 * _tmp166;
  const Scalar _tmp168 = _tmp166 * _tmp96;
  const Scalar _tmp169 = _tmp166 * _tmp98;
  const Scalar _tmp170 = _tmp166 * _tmp86;
  const Scalar _tmp171 = _tmp166 * _tmp75;
  const Scalar _tmp172 = _tmp112 + _tmp161;
  const Scalar _tmp173 = _tmp84 * (_tmp172 + _tmp77 - _tmp79);
  const Scalar _tmp174 = _tmp84 * (_tmp126 - _tmp151 - _tmp59);
  const Scalar _tmp175 = _tmp122 + _tmp159;
  const Scalar _tmp176 = _tmp175 + _tmp89 + _tmp91;
  const Scalar _tmp177 = _tmp166 * _tmp88 - _tmp167 * sqrt_info(0, 0) - _tmp168 * _tmp32 -
                         _tmp169 * sqrt_info(0, 2) + _tmp170 * sqrt_info(0, 0) +
                         _tmp171 * sqrt_info(0, 2) + _tmp173 * sqrt_info(0, 0) +
                         _tmp174 * sqrt_info(0, 2) + _tmp176 * _tmp85;
  const Scalar _tmp178 = _tmp136 + _tmp172;
  const Scalar _tmp179 = _tmp106 * _tmp178;
  const Scalar _tmp180 = _tmp178 * _tmp98;
  const Scalar _tmp181 = _tmp178 * _tmp96;
  const Scalar _tmp182 = _tmp84 * (_tmp147 + _tmp175);
  const Scalar _tmp183 = -_tmp115 + _tmp132 - _tmp163;
  const Scalar _tmp184 = _tmp183 * _tmp84;
  const Scalar _tmp185 = _tmp178 * _tmp86;
  const Scalar _tmp186 = -_tmp125 + _tmp140 + _tmp151;
  const Scalar _tmp187 = _tmp178 * _tmp75;
  const Scalar _tmp188 = _tmp178 * _tmp88 - _tmp179 * sqrt_info(0, 0) - _tmp180 * sqrt_info(0, 2) -
                         _tmp181 * _tmp32 + _tmp182 * sqrt_info(0, 2) + _tmp184 * sqrt_info(0, 0) +
                         _tmp185 * sqrt_info(0, 0) + _tmp186 * _tmp85 + _tmp187 * sqrt_info(0, 2);
  const Scalar _tmp189 = _tmp75 * sqrt_info(1, 2);
  const Scalar _tmp190 = _tmp84 * sqrt_info(1, 1);
  const Scalar _tmp191 = _tmp86 * sqrt_info(1, 0);
  const Scalar _tmp192 = _tmp38 * _tmp74;
  const Scalar _tmp193 = _tmp84 * sqrt_info(1, 0);
  const Scalar _tmp194 = _tmp106 * sqrt_info(1, 0);
  const Scalar _tmp195 = _tmp105 * sqrt_info(1, 2) + _tmp189 * _tmp67 + _tmp190 * _tmp82 +
                         _tmp191 * _tmp67 + _tmp192 * _tmp67 + _tmp193 * _tmp94 - _tmp194 * _tmp67 -
                         _tmp38 * _tmp97 - _tmp99 * sqrt_info(1, 2);
  const Scalar _tmp196 = _tmp113 * sqrt_info(1, 0) + _tmp117 * _tmp189 + _tmp117 * _tmp191 +
                         _tmp117 * _tmp192 - _tmp117 * _tmp194 - _tmp119 * sqrt_info(1, 2) +
                         _tmp123 * _tmp190 + _tmp127 * sqrt_info(1, 2) - _tmp128 * _tmp38;
  const Scalar _tmp197 = _tmp133 * _tmp193 + _tmp137 * _tmp189 + _tmp137 * _tmp191 +
                         _tmp137 * _tmp192 + _tmp141 * _tmp190 - _tmp143 * _tmp38 -
                         _tmp144 * sqrt_info(1, 2) - _tmp145 * sqrt_info(1, 0) +
                         _tmp148 * sqrt_info(1, 2);
  const Scalar _tmp198 = _tmp152 * _tmp189 - _tmp153 * _tmp38 - _tmp154 * sqrt_info(1, 2) +
                         _tmp155 * _tmp38 - _tmp156 * sqrt_info(1, 0) + _tmp157 * sqrt_info(1, 0) +
                         _tmp160 * sqrt_info(1, 0) + _tmp162 * _tmp190 + _tmp164 * sqrt_info(1, 2);
  const Scalar _tmp199 = _tmp166 * _tmp189 + _tmp166 * _tmp191 + _tmp166 * _tmp192 -
                         _tmp167 * sqrt_info(1, 0) - _tmp168 * _tmp38 - _tmp169 * sqrt_info(1, 2) +
                         _tmp173 * sqrt_info(1, 0) + _tmp174 * sqrt_info(1, 2) + _tmp176 * _tmp190;
  const Scalar _tmp200 = _tmp178 * _tmp189 + _tmp178 * _tmp191 + _tmp178 * _tmp192 -
                         _tmp179 * sqrt_info(1, 0) - _tmp180 * sqrt_info(1, 2) - _tmp181 * _tmp38 +
                         _tmp182 * sqrt_info(1, 2) + _tmp183 * _tmp193 + _tmp186 * _tmp190;
  const Scalar _tmp201 = _tmp40 * _tmp83;
  const Scalar _tmp202 = _tmp31 * sqrt_info(2, 1);
  const Scalar _tmp203 = _tmp202 * _tmp74;
  const Scalar _tmp204 = _tmp106 * sqrt_info(2, 0);
  const Scalar _tmp205 = _tmp105 * sqrt_info(2, 2) + _tmp201 * _tmp82 - _tmp202 * _tmp97 +
                         _tmp203 * _tmp67 - _tmp204 * _tmp67 + _tmp76 * sqrt_info(2, 2) +
                         _tmp87 * sqrt_info(2, 0) + _tmp95 * sqrt_info(2, 0) -
                         _tmp99 * sqrt_info(2, 2);
  const Scalar _tmp206 = _tmp113 * sqrt_info(2, 0) + _tmp117 * _tmp203 - _tmp117 * _tmp204 +
                         _tmp118 * sqrt_info(2, 0) - _tmp119 * sqrt_info(2, 2) +
                         _tmp120 * sqrt_info(2, 2) + _tmp123 * _tmp201 + _tmp127 * sqrt_info(2, 2) -
                         _tmp128 * _tmp202;
  const Scalar _tmp207 = _tmp134 * sqrt_info(2, 0) + _tmp137 * _tmp203 + _tmp138 * sqrt_info(2, 0) +
                         _tmp141 * _tmp201 + _tmp142 * sqrt_info(2, 2) - _tmp143 * _tmp202 -
                         _tmp144 * sqrt_info(2, 2) - _tmp145 * sqrt_info(2, 0) +
                         _tmp148 * sqrt_info(2, 2);
  const Scalar _tmp208 = _tmp152 * _tmp203 - _tmp153 * _tmp202 - _tmp154 * sqrt_info(2, 2) -
                         _tmp156 * sqrt_info(2, 0) + _tmp157 * sqrt_info(2, 0) +
                         _tmp158 * sqrt_info(2, 2) + _tmp160 * sqrt_info(2, 0) + _tmp162 * _tmp201 +
                         _tmp164 * sqrt_info(2, 2);
  const Scalar _tmp209 = _tmp166 * _tmp203 - _tmp166 * _tmp204 - _tmp168 * _tmp202 -
                         _tmp169 * sqrt_info(2, 2) + _tmp170 * sqrt_info(2, 0) +
                         _tmp171 * sqrt_info(2, 2) + _tmp173 * sqrt_info(2, 0) +
                         _tmp174 * sqrt_info(2, 2) + _tmp176 * _tmp201;
  const Scalar _tmp210 = _tmp178 * _tmp203 - _tmp178 * _tmp204 - _tmp180 * sqrt_info(2, 2) -
                         _tmp181 * _tmp202 + _tmp182 * sqrt_info(2, 2) + _tmp184 * sqrt_info(2, 0) +
                         _tmp185 * sqrt_info(2, 0) + _tmp186 * _tmp201 + _tmp187 * sqrt_info(2, 2);

  // Output terms (4)
  if (res != nullptr) {
    Eigen::Matrix<Scalar, 3, 1>& _res = (*res);

    _res(0, 0) = _tmp37;
    _res(1, 0) = _tmp39;
    _res(2, 0) = _tmp41;
  }

  if (jacobian != nullptr) {
    Eigen::Matrix<Scalar, 3, 12>& _jacobian = (*jacobian);

    _jacobian(0, 0) = _tmp108;
    _jacobian(0, 1) = _tmp129;
    _jacobian(0, 2) = _tmp149;
    _jacobian(0, 3) = 0;
    _jacobian(0, 4) = 0;
    _jacobian(0, 5) = 0;
    _jacobian(0, 6) = _tmp165;
    _jacobian(0, 7) = _tmp177;
    _jacobian(0, 8) = _tmp188;
    _jacobian(0, 9) = 0;
    _jacobian(0, 10) = 0;
    _jacobian(0, 11) = 0;
    _jacobian(1, 0) = _tmp195;
    _jacobian(1, 1) = _tmp196;
    _jacobian(1, 2) = _tmp197;
    _jacobian(1, 3) = 0;
    _jacobian(1, 4) = 0;
    _jacobian(1, 5) = 0;
    _jacobian(1, 6) = _tmp198;
    _jacobian(1, 7) = _tmp199;
    _jacobian(1, 8) = _tmp200;
    _jacobian(1, 9) = 0;
    _jacobian(1, 10) = 0;
    _jacobian(1, 11) = 0;
    _jacobian(2, 0) = _tmp205;
    _jacobian(2, 1) = _tmp206;
    _jacobian(2, 2) = _tmp207;
    _jacobian(2, 3) = 0;
    _jacobian(2, 4) = 0;
    _jacobian(2, 5) = 0;
    _jacobian(2, 6) = _tmp208;
    _jacobian(2, 7) = _tmp209;
    _jacobian(2, 8) = _tmp210;
    _jacobian(2, 9) = 0;
    _jacobian(2, 10) = 0;
    _jacobian(2, 11) = 0;
  }

  if (hessian != nullptr) {
    Eigen::Matrix<Scalar, 12, 12>& _hessian = (*hessian);

    _hessian(0, 0) =
        std::pow(_tmp108, Scalar(2)) + std::pow(_tmp195, Scalar(2)) + std::pow(_tmp205, Scalar(2));
    _hessian(0, 1) = 0;
    _hessian(0, 2) = 0;
    _hessian(0, 3) = 0;
    _hessian(0, 4) = 0;
    _hessian(0, 5) = 0;
    _hessian(0, 6) = 0;
    _hessian(0, 7) = 0;
    _hessian(0, 8) = 0;
    _hessian(0, 9) = 0;
    _hessian(0, 10) = 0;
    _hessian(0, 11) = 0;
    _hessian(1, 0) = _tmp108 * _tmp129 + _tmp195 * _tmp196 + _tmp205 * _tmp206;
    _hessian(1, 1) =
        std::pow(_tmp129, Scalar(2)) + std::pow(_tmp196, Scalar(2)) + std::pow(_tmp206, Scalar(2));
    _hessian(1, 2) = 0;
    _hessian(1, 3) = 0;
    _hessian(1, 4) = 0;
    _hessian(1, 5) = 0;
    _hessian(1, 6) = 0;
    _hessian(1, 7) = 0;
    _hessian(1, 8) = 0;
    _hessian(1, 9) = 0;
    _hessian(1, 10) = 0;
    _hessian(1, 11) = 0;
    _hessian(2, 0) = _tmp108 * _tmp149 + _tmp195 * _tmp197 + _tmp205 * _tmp207;
    _hessian(2, 1) = _tmp129 * _tmp149 + _tmp196 * _tmp197 + _tmp206 * _tmp207;
    _hessian(2, 2) =
        std::pow(_tmp149, Scalar(2)) + std::pow(_tmp197, Scalar(2)) + std::pow(_tmp207, Scalar(2));
    _hessian(2, 3) = 0;
    _hessian(2, 4) = 0;
    _hessian(2, 5) = 0;
    _hessian(2, 6) = 0;
    _hessian(2, 7) = 0;
    _hessian(2, 8) = 0;
    _hessian(2, 9) = 0;
    _hessian(2, 10) = 0;
    _hessian(2, 11) = 0;
    _hessian(3, 0) = 0;
    _hessian(3, 1) = 0;
    _hessian(3, 2) = 0;
    _hessian(3, 3) = 0;
    _hessian(3, 4) = 0;
    _hessian(3, 5) = 0;
    _hessian(3, 6) = 0;
    _hessian(3, 7) = 0;
    _hessian(3, 8) = 0;
    _hessian(3, 9) = 0;
    _hessian(3, 10) = 0;
    _hessian(3, 11) = 0;
    _hessian(4, 0) = 0;
    _hessian(4, 1) = 0;
    _hessian(4, 2) = 0;
    _hessian(4, 3) = 0;
    _hessian(4, 4) = 0;
    _hessian(4, 5) = 0;
    _hessian(4, 6) = 0;
    _hessian(4, 7) = 0;
    _hessian(4, 8) = 0;
    _hessian(4, 9) = 0;
    _hessian(4, 10) = 0;
    _hessian(4, 11) = 0;
    _hessian(5, 0) = 0;
    _hessian(5, 1) = 0;
    _hessian(5, 2) = 0;
    _hessian(5, 3) = 0;
    _hessian(5, 4) = 0;
    _hessian(5, 5) = 0;
    _hessian(5, 6) = 0;
    _hessian(5, 7) = 0;
    _hessian(5, 8) = 0;
    _hessian(5, 9) = 0;
    _hessian(5, 10) = 0;
    _hessian(5, 11) = 0;
    _hessian(6, 0) = _tmp108 * _tmp165 + _tmp195 * _tmp198 + _tmp205 * _tmp208;
    _hessian(6, 1) = _tmp129 * _tmp165 + _tmp196 * _tmp198 + _tmp206 * _tmp208;
    _hessian(6, 2) = _tmp149 * _tmp165 + _tmp197 * _tmp198 + _tmp207 * _tmp208;
    _hessian(6, 3) = 0;
    _hessian(6, 4) = 0;
    _hessian(6, 5) = 0;
    _hessian(6, 6) =
        std::pow(_tmp165, Scalar(2)) + std::pow(_tmp198, Scalar(2)) + std::pow(_tmp208, Scalar(2));
    _hessian(6, 7) = 0;
    _hessian(6, 8) = 0;
    _hessian(6, 9) = 0;
    _hessian(6, 10) = 0;
    _hessian(6, 11) = 0;
    _hessian(7, 0) = _tmp108 * _tmp177 + _tmp195 * _tmp199 + _tmp205 * _tmp209;
    _hessian(7, 1) = _tmp129 * _tmp177 + _tmp196 * _tmp199 + _tmp206 * _tmp209;
    _hessian(7, 2) = _tmp149 * _tmp177 + _tmp197 * _tmp199 + _tmp207 * _tmp209;
    _hessian(7, 3) = 0;
    _hessian(7, 4) = 0;
    _hessian(7, 5) = 0;
    _hessian(7, 6) = _tmp165 * _tmp177 + _tmp198 * _tmp199 + _tmp208 * _tmp209;
    _hessian(7, 7) =
        std::pow(_tmp177, Scalar(2)) + std::pow(_tmp199, Scalar(2)) + std::pow(_tmp209, Scalar(2));
    _hessian(7, 8) = 0;
    _hessian(7, 9) = 0;
    _hessian(7, 10) = 0;
    _hessian(7, 11) = 0;
    _hessian(8, 0) = _tmp108 * _tmp188 + _tmp195 * _tmp200 + _tmp205 * _tmp210;
    _hessian(8, 1) = _tmp129 * _tmp188 + _tmp196 * _tmp200 + _tmp206 * _tmp210;
    _hessian(8, 2) = _tmp149 * _tmp188 + _tmp197 * _tmp200 + _tmp207 * _tmp210;
    _hessian(8, 3) = 0;
    _hessian(8, 4) = 0;
    _hessian(8, 5) = 0;
    _hessian(8, 6) = _tmp165 * _tmp188 + _tmp198 * _tmp200 + _tmp208 * _tmp210;
    _hessian(8, 7) = _tmp177 * _tmp188 + _tmp199 * _tmp200 + _tmp209 * _tmp210;
    _hessian(8, 8) =
        std::pow(_tmp188, Scalar(2)) + std::pow(_tmp200, Scalar(2)) + std::pow(_tmp210, Scalar(2));
    _hessian(8, 9) = 0;
    _hessian(8, 10) = 0;
    _hessian(8, 11) = 0;
    _hessian(9, 0) = 0;
    _hessian(9, 1) = 0;
    _hessian(9, 2) = 0;
    _hessian(9, 3) = 0;
    _hessian(9, 4) = 0;
    _hessian(9, 5) = 0;
    _hessian(9, 6) = 0;
    _hessian(9, 7) = 0;
    _hessian(9, 8) = 0;
    _hessian(9, 9) = 0;
    _hessian(9, 10) = 0;
    _hessian(9, 11) = 0;
    _hessian(10, 0) = 0;
    _hessian(10, 1) = 0;
    _hessian(10, 2) = 0;
    _hessian(10, 3) = 0;
    _hessian(10, 4) = 0;
    _hessian(10, 5) = 0;
    _hessian(10, 6) = 0;
    _hessian(10, 7) = 0;
    _hessian(10, 8) = 0;
    _hessian(10, 9) = 0;
    _hessian(10, 10) = 0;
    _hessian(10, 11) = 0;
    _hessian(11, 0) = 0;
    _hessian(11, 1) = 0;
    _hessian(11, 2) = 0;
    _hessian(11, 3) = 0;
    _hessian(11, 4) = 0;
    _hessian(11, 5) = 0;
    _hessian(11, 6) = 0;
    _hessian(11, 7) = 0;
    _hessian(11, 8) = 0;
    _hessian(11, 9) = 0;
    _hessian(11, 10) = 0;
    _hessian(11, 11) = 0;
  }

  if (rhs != nullptr) {
    Eigen::Matrix<Scalar, 12, 1>& _rhs = (*rhs);

    _rhs(0, 0) = _tmp108 * _tmp37 + _tmp195 * _tmp39 + _tmp205 * _tmp41;
    _rhs(1, 0) = _tmp129 * _tmp37 + _tmp196 * _tmp39 + _tmp206 * _tmp41;
    _rhs(2, 0) = _tmp149 * _tmp37 + _tmp197 * _tmp39 + _tmp207 * _tmp41;
    _rhs(3, 0) = 0;
    _rhs(4, 0) = 0;
    _rhs(5, 0) = 0;
    _rhs(6, 0) = _tmp165 * _tmp37 + _tmp198 * _tmp39 + _tmp208 * _tmp41;
    _rhs(7, 0) = _tmp177 * _tmp37 + _tmp199 * _tmp39 + _tmp209 * _tmp41;
    _rhs(8, 0) = _tmp188 * _tmp37 + _tmp200 * _tmp39 + _tmp210 * _tmp41;
    _rhs(9, 0) = 0;
    _rhs(10, 0) = 0;
    _rhs(11, 0) = 0;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
