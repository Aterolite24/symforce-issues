// -----------------------------------------------------------------------------
// This file was autogenerated by symforce. Do NOT modify by hand.
// -----------------------------------------------------------------------------
#pragma once

#include <Eigen/Dense>
#include <sym/rot3.h>

namespace sym {

/**
 * Residual that penalizes the difference between between(a, b) and a_T_b.
 *
 * In vector space terms that would be:
 *     (b - a) - a_T_b
 *
 * In lie group terms:
 *     local_coordinates(a_T_b, between(a, b))
 *     to_tangent(compose(inverse(a_T_b), compose(inverse(a), b)))
 *
 * Args:
 *     sqrt_info: Square root information matrix to whiten residual. This can be computed from
 *                a covariance matrix as the cholesky decomposition of the inverse. In the case
 *                of a diagonal it will contain 1/sigma values. Must match the tangent dim.
 *     jacobian: (3x6) jacobian of res wrt args a (3), b (3)
 *     hessian: (6x6) Gauss-Newton hessian for args a (3), b (3)
 *     rhs: (6x1) Gauss-Newton rhs for args a (3), b (3)
 */
template <typename Scalar>
void BetweenFactorRot3(const sym::Rot3<Scalar>& a, const sym::Rot3<Scalar>& b,
                       const sym::Rot3<Scalar>& a_T_b, const Eigen::Matrix<Scalar, 3, 3>& sqrt_info,
                       const Scalar epsilon, Eigen::Matrix<Scalar, 3, 1>* const res = nullptr,
                       Eigen::Matrix<Scalar, 3, 6>* const jacobian = nullptr,
                       Eigen::Matrix<Scalar, 6, 6>* const hessian = nullptr,
                       Eigen::Matrix<Scalar, 6, 1>* const rhs = nullptr) {
  // Total ops: 1103

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _a = a.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _b = b.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _a_T_b = a_T_b.Data();

  // Intermediate terms (211)
  const Scalar _tmp0 = _a[0] * _b[0] + _a[1] * _b[1] + _a[2] * _b[2] + _a[3] * _b[3];
  const Scalar _tmp1 = _a[0] * _b[2] - _a[1] * _b[3] - _a[2] * _b[0] + _a[3] * _b[1];
  const Scalar _tmp2 = -_a[0] * _b[3] - _a[1] * _b[2] + _a[2] * _b[1] + _a[3] * _b[0];
  const Scalar _tmp3 = -_a[0] * _b[1] + _a[1] * _b[0] - _a[2] * _b[3] + _a[3] * _b[2];
  const Scalar _tmp4 =
      -_a_T_b[0] * _tmp1 + _a_T_b[1] * _tmp2 - _a_T_b[2] * _tmp0 + _a_T_b[3] * _tmp3;
  const Scalar _tmp5 =
      _a_T_b[0] * _tmp2 + _a_T_b[1] * _tmp1 + _a_T_b[2] * _tmp3 + _a_T_b[3] * _tmp0;
  const Scalar _tmp6 = (((_tmp5) > 0) - ((_tmp5) < 0));
  const Scalar _tmp7 = 2 * std::min<Scalar>(0, _tmp6) + 1;
  const Scalar _tmp8 = std::fabs(_tmp5);
  const Scalar _tmp9 = 1 - epsilon;
  const Scalar _tmp10 = std::min<Scalar>(_tmp8, _tmp9);
  const Scalar _tmp11 = 1 - std::pow<Scalar>(_tmp10, 2);
  const Scalar _tmp12 = std::acos(_tmp10);
  const Scalar _tmp13 = 2 * _tmp12 / std::sqrt(_tmp11);
  const Scalar _tmp14 = _tmp13 * _tmp7;
  const Scalar _tmp15 = _tmp14 * sqrt_info(0, 2);
  const Scalar _tmp16 =
      _a_T_b[0] * _tmp3 - _a_T_b[1] * _tmp0 - _a_T_b[2] * _tmp2 + _a_T_b[3] * _tmp1;
  const Scalar _tmp17 = _tmp14 * sqrt_info(0, 1);
  const Scalar _tmp18 =
      -_a_T_b[0] * _tmp0 - _a_T_b[1] * _tmp3 + _a_T_b[2] * _tmp1 + _a_T_b[3] * _tmp2;
  const Scalar _tmp19 = _tmp14 * _tmp18;
  const Scalar _tmp20 = _tmp15 * _tmp4 + _tmp16 * _tmp17 + _tmp19 * sqrt_info(0, 0);
  const Scalar _tmp21 = _tmp14 * sqrt_info(1, 2);
  const Scalar _tmp22 = _tmp14 * sqrt_info(1, 1);
  const Scalar _tmp23 = _tmp16 * _tmp22 + _tmp19 * sqrt_info(1, 0) + _tmp21 * _tmp4;
  const Scalar _tmp24 = _tmp7 * sqrt_info(2, 2);
  const Scalar _tmp25 = _tmp13 * _tmp24;
  const Scalar _tmp26 = _tmp14 * sqrt_info(2, 1);
  const Scalar _tmp27 = _tmp16 * _tmp26 + _tmp19 * sqrt_info(2, 0) + _tmp25 * _tmp4;
  const Scalar _tmp28 = _tmp18 * sqrt_info(0, 0);
  const Scalar _tmp29 = _a_T_b[0] * _b[3];
  const Scalar _tmp30 = -_tmp29;
  const Scalar _tmp31 = _a_T_b[1] * _b[2];
  const Scalar _tmp32 = _a_T_b[3] * _b[0];
  const Scalar _tmp33 = _a_T_b[2] * _b[1];
  const Scalar _tmp34 = -_tmp33;
  const Scalar _tmp35 = _tmp32 + _tmp34;
  const Scalar _tmp36 = _tmp30 + _tmp31 + _tmp35;
  const Scalar _tmp37 = (((-_tmp8 + _tmp9) > 0) - ((-_tmp8 + _tmp9) < 0)) + 1;
  const Scalar _tmp38 = _tmp37 * _tmp6 * _tmp7;
  const Scalar _tmp39 = _tmp36 * _tmp38;
  const Scalar _tmp40 = _tmp10 * _tmp12 / (_tmp11 * std::sqrt(_tmp11));
  const Scalar _tmp41 = _tmp39 * _tmp40;
  const Scalar _tmp42 = 1.0 / (_tmp11);
  const Scalar _tmp43 = _tmp39 * _tmp42;
  const Scalar _tmp44 = _tmp16 * sqrt_info(0, 1);
  const Scalar _tmp45 = _a_T_b[3] * _b[2];
  const Scalar _tmp46 = _a_T_b[2] * _b[3];
  const Scalar _tmp47 = _a_T_b[1] * _b[0];
  const Scalar _tmp48 = -_tmp47;
  const Scalar _tmp49 = _a_T_b[0] * _b[1];
  const Scalar _tmp50 = -_tmp49;
  const Scalar _tmp51 = _tmp48 + _tmp50;
  const Scalar _tmp52 = _tmp45 + _tmp46 + _tmp51;
  const Scalar _tmp53 = _a_T_b[1] * _b[1];
  const Scalar _tmp54 = _a_T_b[0] * _b[0];
  const Scalar _tmp55 = _a_T_b[2] * _b[2];
  const Scalar _tmp56 = _a_T_b[3] * _b[3];
  const Scalar _tmp57 = -_tmp56;
  const Scalar _tmp58 = _tmp55 + _tmp57;
  const Scalar _tmp59 = _tmp14 * (_tmp53 - _tmp54 + _tmp58);
  const Scalar _tmp60 = _tmp40 * _tmp44;
  const Scalar _tmp61 = _a_T_b[0] * _b[2];
  const Scalar _tmp62 = -_tmp61;
  const Scalar _tmp63 = _a_T_b[3] * _b[1];
  const Scalar _tmp64 = _a_T_b[2] * _b[0];
  const Scalar _tmp65 = -_tmp64;
  const Scalar _tmp66 = _a_T_b[1] * _b[3];
  const Scalar _tmp67 = -_tmp66;
  const Scalar _tmp68 = _tmp65 + _tmp67;
  const Scalar _tmp69 = _tmp62 - _tmp63 + _tmp68;
  const Scalar _tmp70 = _tmp4 * _tmp42;
  const Scalar _tmp71 = _tmp70 * sqrt_info(0, 2);
  const Scalar _tmp72 = _tmp4 * _tmp40;
  const Scalar _tmp73 = _tmp72 * sqrt_info(0, 2);
  const Scalar _tmp74 =
      (Scalar(1) / Scalar(2)) * _tmp15 * _tmp69 + (Scalar(1) / Scalar(2)) * _tmp17 * _tmp52 +
      (Scalar(1) / Scalar(2)) * _tmp28 * _tmp41 - Scalar(1) / Scalar(2) * _tmp28 * _tmp43 +
      (Scalar(1) / Scalar(2)) * _tmp39 * _tmp60 - Scalar(1) / Scalar(2) * _tmp39 * _tmp71 +
      (Scalar(1) / Scalar(2)) * _tmp39 * _tmp73 - Scalar(1) / Scalar(2) * _tmp43 * _tmp44 +
      (Scalar(1) / Scalar(2)) * _tmp59 * sqrt_info(0, 0);
  const Scalar _tmp75 = -_tmp31;
  const Scalar _tmp76 = _tmp30 + _tmp75;
  const Scalar _tmp77 = _tmp14 * (_tmp32 + _tmp33 + _tmp76);
  const Scalar _tmp78 = _tmp53 + _tmp54;
  const Scalar _tmp79 = _tmp55 + _tmp56 + _tmp78;
  const Scalar _tmp80 = _tmp38 * _tmp42;
  const Scalar _tmp81 = _tmp79 * _tmp80;
  const Scalar _tmp82 = _tmp38 * _tmp79;
  const Scalar _tmp83 = _tmp28 * _tmp40;
  const Scalar _tmp84 = _tmp61 + _tmp63 + _tmp68;
  const Scalar _tmp85 = -_tmp46;
  const Scalar _tmp86 = _tmp45 + _tmp85;
  const Scalar _tmp87 = _tmp47 + _tmp50 + _tmp86;
  const Scalar _tmp88 = _tmp15 * _tmp87 + _tmp17 * _tmp84 - _tmp28 * _tmp81 - _tmp44 * _tmp81 +
                        _tmp60 * _tmp82 - _tmp71 * _tmp82 + _tmp73 * _tmp82 +
                        _tmp77 * sqrt_info(0, 0) + _tmp82 * _tmp83;
  const Scalar _tmp89 = (Scalar(1) / Scalar(2)) * _a[0];
  const Scalar _tmp90 = _tmp62 + _tmp63;
  const Scalar _tmp91 = _tmp64 + _tmp67 + _tmp90;
  const Scalar _tmp92 = _tmp38 * _tmp91;
  const Scalar _tmp93 = -_tmp45 + _tmp51 + _tmp85;
  const Scalar _tmp94 = _tmp14 * sqrt_info(0, 0);
  const Scalar _tmp95 = -_tmp53 + _tmp54 + _tmp58;
  const Scalar _tmp96 = _tmp80 * _tmp91;
  const Scalar _tmp97 = _tmp29 + _tmp35 + _tmp75;
  const Scalar _tmp98 = _tmp15 * _tmp97 + _tmp17 * _tmp95 - _tmp28 * _tmp96 - _tmp44 * _tmp96 +
                        _tmp60 * _tmp92 - _tmp71 * _tmp92 + _tmp73 * _tmp92 + _tmp83 * _tmp92 +
                        _tmp93 * _tmp94;
  const Scalar _tmp99 = (Scalar(1) / Scalar(2)) * _tmp98;
  const Scalar _tmp100 = _tmp48 + _tmp49 + _tmp86;
  const Scalar _tmp101 = _tmp100 * _tmp38;
  const Scalar _tmp102 = _tmp101 * _tmp40;
  const Scalar _tmp103 = -_tmp32 + _tmp34 + _tmp76;
  const Scalar _tmp104 = _tmp101 * _tmp42;
  const Scalar _tmp105 = -_tmp55 + _tmp57 + _tmp78;
  const Scalar _tmp106 = _tmp14 * (_tmp65 + _tmp66 + _tmp90);
  const Scalar _tmp107 = _tmp101 * _tmp60 - _tmp101 * _tmp71 + _tmp101 * _tmp73 + _tmp102 * _tmp28 +
                         _tmp103 * _tmp17 - _tmp104 * _tmp28 - _tmp104 * _tmp44 + _tmp105 * _tmp15 +
                         _tmp106 * sqrt_info(0, 0);
  const Scalar _tmp108 = (Scalar(1) / Scalar(2)) * _tmp107;
  const Scalar _tmp109 = -_a[1] * _tmp108 + _a[2] * _tmp99 + _a[3] * _tmp74 - _tmp88 * _tmp89;
  const Scalar _tmp110 = (Scalar(1) / Scalar(2)) * _tmp88;
  const Scalar _tmp111 = -_a[1] * _tmp110 - _a[2] * _tmp74 + _a[3] * _tmp99 + _tmp107 * _tmp89;
  const Scalar _tmp112 = _a[1] * _tmp74 - _a[2] * _tmp110 + _a[3] * _tmp108 - _tmp89 * _tmp98;
  const Scalar _tmp113 = _a[0] * _a_T_b[1];
  const Scalar _tmp114 = _a[1] * _a_T_b[0];
  const Scalar _tmp115 = _a[3] * _a_T_b[2];
  const Scalar _tmp116 = _a[2] * _a_T_b[3];
  const Scalar _tmp117 = _tmp113 - _tmp114 + _tmp115 + _tmp116;
  const Scalar _tmp118 = _tmp38 * _tmp71;
  const Scalar _tmp119 = _a[0] * _a_T_b[2];
  const Scalar _tmp120 = _a[1] * _a_T_b[3];
  const Scalar _tmp121 = _a[3] * _a_T_b[1];
  const Scalar _tmp122 = _a[2] * _a_T_b[0];
  const Scalar _tmp123 = _tmp14 * (_tmp119 - _tmp120 - _tmp121 - _tmp122);
  const Scalar _tmp124 = _tmp117 * _tmp38;
  const Scalar _tmp125 =
      -_a[0] * _a_T_b[0] - _a[1] * _a_T_b[1] - _a[2] * _a_T_b[2] + _a[3] * _a_T_b[3];
  const Scalar _tmp126 = _a[0] * _a_T_b[3];
  const Scalar _tmp127 = _a[1] * _a_T_b[2];
  const Scalar _tmp128 = _a[3] * _a_T_b[0];
  const Scalar _tmp129 = _a[2] * _a_T_b[1];
  const Scalar _tmp130 = _tmp126 + _tmp127 + _tmp128 - _tmp129;
  const Scalar _tmp131 = _tmp117 * _tmp80;
  const Scalar _tmp132 = _tmp131 * _tmp16;
  const Scalar _tmp133 = _tmp131 * _tmp18;
  const Scalar _tmp134 = -_tmp117 * _tmp118 + _tmp123 * sqrt_info(0, 0) + _tmp124 * _tmp60 +
                         _tmp124 * _tmp73 + _tmp124 * _tmp83 + _tmp125 * _tmp15 + _tmp130 * _tmp17 -
                         _tmp132 * sqrt_info(0, 1) - _tmp133 * sqrt_info(0, 0);
  const Scalar _tmp135 = (Scalar(1) / Scalar(2)) * _b[1];
  const Scalar _tmp136 = -_tmp119 + _tmp120 + _tmp121 + _tmp122;
  const Scalar _tmp137 = _tmp136 * _tmp80;
  const Scalar _tmp138 = _tmp136 * _tmp38;
  const Scalar _tmp139 = -_tmp126 - _tmp127 - _tmp128 + _tmp129;
  const Scalar _tmp140 = _tmp117 * _tmp14;
  const Scalar _tmp141 = -_tmp118 * _tmp136 + _tmp125 * _tmp17 - _tmp137 * _tmp28 -
                         _tmp137 * _tmp44 + _tmp138 * _tmp60 + _tmp138 * _tmp73 + _tmp138 * _tmp83 +
                         _tmp139 * _tmp15 + _tmp140 * sqrt_info(0, 0);
  const Scalar _tmp142 = (Scalar(1) / Scalar(2)) * _b[2];
  const Scalar _tmp143 = _tmp130 * _tmp80;
  const Scalar _tmp144 = _tmp130 * _tmp38;
  const Scalar _tmp145 = _tmp125 * _tmp14;
  const Scalar _tmp146 = -_tmp113 + _tmp114 - _tmp115 - _tmp116;
  const Scalar _tmp147 = -_tmp118 * _tmp130 + _tmp136 * _tmp15 - _tmp143 * _tmp28 -
                         _tmp143 * _tmp44 + _tmp144 * _tmp60 + _tmp144 * _tmp73 + _tmp144 * _tmp83 +
                         _tmp145 * sqrt_info(0, 0) + _tmp146 * _tmp17;
  const Scalar _tmp148 = (Scalar(1) / Scalar(2)) * _b[3];
  const Scalar _tmp149 = _tmp125 * _tmp38;
  const Scalar _tmp150 = _tmp125 * _tmp80;
  const Scalar _tmp151 = _tmp150 * _tmp16;
  const Scalar _tmp152 = _tmp123 * sqrt_info(0, 1) + _tmp139 * _tmp94 + _tmp146 * _tmp15 +
                         _tmp149 * _tmp60 - _tmp149 * _tmp71 + _tmp149 * _tmp73 + _tmp149 * _tmp83 -
                         _tmp150 * _tmp28 - _tmp151 * sqrt_info(0, 1);
  const Scalar _tmp153 = (Scalar(1) / Scalar(2)) * _tmp152;
  const Scalar _tmp154 =
      -_b[0] * _tmp153 - _tmp134 * _tmp135 + _tmp141 * _tmp142 + _tmp147 * _tmp148;
  const Scalar _tmp155 = (Scalar(1) / Scalar(2)) * _b[0];
  const Scalar _tmp156 =
      -_b[1] * _tmp153 + _tmp134 * _tmp155 + _tmp141 * _tmp148 - _tmp142 * _tmp147;
  const Scalar _tmp157 =
      _tmp134 * _tmp148 + _tmp135 * _tmp147 - _tmp141 * _tmp155 - _tmp142 * _tmp152;
  const Scalar _tmp158 = _tmp18 * sqrt_info(1, 0);
  const Scalar _tmp159 = _tmp16 * sqrt_info(1, 1);
  const Scalar _tmp160 = _tmp159 * _tmp40;
  const Scalar _tmp161 = _tmp70 * sqrt_info(1, 2);
  const Scalar _tmp162 = _tmp72 * sqrt_info(1, 2);
  const Scalar _tmp163 =
      (Scalar(1) / Scalar(2)) * _tmp158 * _tmp41 - Scalar(1) / Scalar(2) * _tmp158 * _tmp43 -
      Scalar(1) / Scalar(2) * _tmp159 * _tmp43 + (Scalar(1) / Scalar(2)) * _tmp160 * _tmp39 -
      Scalar(1) / Scalar(2) * _tmp161 * _tmp39 + (Scalar(1) / Scalar(2)) * _tmp162 * _tmp39 +
      (Scalar(1) / Scalar(2)) * _tmp21 * _tmp69 + (Scalar(1) / Scalar(2)) * _tmp22 * _tmp52 +
      (Scalar(1) / Scalar(2)) * _tmp59 * sqrt_info(1, 0);
  const Scalar _tmp164 = _tmp158 * _tmp40;
  const Scalar _tmp165 =
      -Scalar(1) / Scalar(2) * _tmp158 * _tmp81 - Scalar(1) / Scalar(2) * _tmp159 * _tmp81 +
      (Scalar(1) / Scalar(2)) * _tmp160 * _tmp82 - Scalar(1) / Scalar(2) * _tmp161 * _tmp82 +
      (Scalar(1) / Scalar(2)) * _tmp162 * _tmp82 + (Scalar(1) / Scalar(2)) * _tmp164 * _tmp82 +
      (Scalar(1) / Scalar(2)) * _tmp21 * _tmp87 + (Scalar(1) / Scalar(2)) * _tmp22 * _tmp84 +
      (Scalar(1) / Scalar(2)) * _tmp77 * sqrt_info(1, 0);
  const Scalar _tmp166 = _tmp14 * sqrt_info(1, 0);
  const Scalar _tmp167 = -_tmp158 * _tmp96 - _tmp159 * _tmp96 + _tmp160 * _tmp92 -
                         _tmp161 * _tmp92 + _tmp162 * _tmp92 + _tmp164 * _tmp92 + _tmp166 * _tmp93 +
                         _tmp21 * _tmp97 + _tmp22 * _tmp95;
  const Scalar _tmp168 = (Scalar(1) / Scalar(2)) * _tmp167;
  const Scalar _tmp169 = _tmp101 * _tmp160 - _tmp101 * _tmp161 + _tmp101 * _tmp162 +
                         _tmp102 * _tmp158 + _tmp103 * _tmp22 - _tmp104 * _tmp158 -
                         _tmp104 * _tmp159 + _tmp105 * _tmp21 + _tmp106 * sqrt_info(1, 0);
  const Scalar _tmp170 = (Scalar(1) / Scalar(2)) * _tmp169;
  const Scalar _tmp171 = -_a[0] * _tmp165 - _a[1] * _tmp170 + _a[2] * _tmp168 + _a[3] * _tmp163;
  const Scalar _tmp172 = -_a[1] * _tmp165 - _a[2] * _tmp163 + _a[3] * _tmp168 + _tmp169 * _tmp89;
  const Scalar _tmp173 = _a[1] * _tmp163 - _a[2] * _tmp165 + _a[3] * _tmp170 - _tmp167 * _tmp89;
  const Scalar _tmp174 = _tmp161 * _tmp38;
  const Scalar _tmp175 = -_tmp117 * _tmp174 + _tmp123 * sqrt_info(1, 0) + _tmp124 * _tmp160 +
                         _tmp124 * _tmp162 + _tmp124 * _tmp164 + _tmp125 * _tmp21 +
                         _tmp130 * _tmp22 - _tmp131 * _tmp158 - _tmp131 * _tmp159;
  const Scalar _tmp176 = _tmp125 * _tmp22 - _tmp136 * _tmp174 - _tmp137 * _tmp158 -
                         _tmp137 * _tmp159 + _tmp138 * _tmp160 + _tmp138 * _tmp162 +
                         _tmp138 * _tmp164 + _tmp139 * _tmp21 + _tmp140 * sqrt_info(1, 0);
  const Scalar _tmp177 = -_tmp130 * _tmp174 + _tmp136 * _tmp21 - _tmp143 * _tmp158 -
                         _tmp143 * _tmp159 + _tmp144 * _tmp160 + _tmp144 * _tmp162 +
                         _tmp144 * _tmp164 + _tmp145 * sqrt_info(1, 0) + _tmp146 * _tmp22;
  const Scalar _tmp178 = _tmp123 * sqrt_info(1, 1) + _tmp139 * _tmp166 + _tmp146 * _tmp21 +
                         _tmp149 * _tmp160 - _tmp149 * _tmp161 + _tmp149 * _tmp162 +
                         _tmp149 * _tmp164 - _tmp150 * _tmp158 - _tmp150 * _tmp159;
  const Scalar _tmp179 = (Scalar(1) / Scalar(2)) * _tmp178;
  const Scalar _tmp180 =
      -_b[0] * _tmp179 - _tmp135 * _tmp175 + _tmp142 * _tmp176 + _tmp148 * _tmp177;
  const Scalar _tmp181 =
      -_b[1] * _tmp179 - _tmp142 * _tmp177 + _tmp148 * _tmp176 + _tmp155 * _tmp175;
  const Scalar _tmp182 =
      _tmp135 * _tmp177 - _tmp142 * _tmp178 + _tmp148 * _tmp175 - _tmp155 * _tmp176;
  const Scalar _tmp183 = _tmp18 * sqrt_info(2, 0);
  const Scalar _tmp184 = _tmp16 * sqrt_info(2, 1);
  const Scalar _tmp185 = _tmp184 * _tmp40;
  const Scalar _tmp186 = _tmp37 * _tmp6;
  const Scalar _tmp187 = _tmp186 * _tmp70;
  const Scalar _tmp188 = _tmp187 * _tmp24;
  const Scalar _tmp189 = _tmp186 * _tmp72;
  const Scalar _tmp190 = _tmp189 * _tmp24;
  const Scalar _tmp191 =
      (Scalar(1) / Scalar(2)) * _tmp183 * _tmp41 - Scalar(1) / Scalar(2) * _tmp183 * _tmp43 -
      Scalar(1) / Scalar(2) * _tmp184 * _tmp43 + (Scalar(1) / Scalar(2)) * _tmp185 * _tmp39 -
      Scalar(1) / Scalar(2) * _tmp188 * _tmp36 + (Scalar(1) / Scalar(2)) * _tmp190 * _tmp36 +
      (Scalar(1) / Scalar(2)) * _tmp25 * _tmp69 + (Scalar(1) / Scalar(2)) * _tmp26 * _tmp52 +
      (Scalar(1) / Scalar(2)) * _tmp59 * sqrt_info(2, 0);
  const Scalar _tmp192 = _tmp183 * _tmp40;
  const Scalar _tmp193 =
      -Scalar(1) / Scalar(2) * _tmp183 * _tmp81 - Scalar(1) / Scalar(2) * _tmp184 * _tmp81 +
      (Scalar(1) / Scalar(2)) * _tmp185 * _tmp82 - Scalar(1) / Scalar(2) * _tmp188 * _tmp79 +
      (Scalar(1) / Scalar(2)) * _tmp190 * _tmp79 + (Scalar(1) / Scalar(2)) * _tmp192 * _tmp82 +
      (Scalar(1) / Scalar(2)) * _tmp25 * _tmp87 + (Scalar(1) / Scalar(2)) * _tmp26 * _tmp84 +
      (Scalar(1) / Scalar(2)) * _tmp77 * sqrt_info(2, 0);
  const Scalar _tmp194 = _tmp14 * sqrt_info(2, 0);
  const Scalar _tmp195 = -_tmp183 * _tmp96 - _tmp184 * _tmp96 + _tmp185 * _tmp92 -
                         _tmp188 * _tmp91 + _tmp190 * _tmp91 + _tmp192 * _tmp92 + _tmp194 * _tmp93 +
                         _tmp25 * _tmp97 + _tmp26 * _tmp95;
  const Scalar _tmp196 = (Scalar(1) / Scalar(2)) * _tmp195;
  const Scalar _tmp197 = -_tmp100 * _tmp188 + _tmp100 * _tmp190 + _tmp101 * _tmp185 +
                         _tmp102 * _tmp183 + _tmp103 * _tmp26 - _tmp104 * _tmp183 -
                         _tmp104 * _tmp184 + _tmp105 * _tmp25 + _tmp106 * sqrt_info(2, 0);
  const Scalar _tmp198 = (Scalar(1) / Scalar(2)) * _tmp197;
  const Scalar _tmp199 = -_a[0] * _tmp193 - _a[1] * _tmp198 + _a[2] * _tmp196 + _a[3] * _tmp191;
  const Scalar _tmp200 = -_a[1] * _tmp193 - _a[2] * _tmp191 + _a[3] * _tmp196 + _tmp197 * _tmp89;
  const Scalar _tmp201 = _a[1] * _tmp191 - _a[2] * _tmp193 + _a[3] * _tmp198 - _tmp195 * _tmp89;
  const Scalar _tmp202 = -_tmp117 * _tmp188 + _tmp117 * _tmp190 + _tmp123 * sqrt_info(2, 0) +
                         _tmp124 * _tmp185 + _tmp124 * _tmp192 + _tmp125 * _tmp25 +
                         _tmp130 * _tmp26 - _tmp132 * sqrt_info(2, 1) - _tmp133 * sqrt_info(2, 0);
  const Scalar _tmp203 = _tmp136 * _tmp24;
  const Scalar _tmp204 = _tmp125 * _tmp26 - _tmp137 * _tmp183 - _tmp137 * _tmp184 +
                         _tmp138 * _tmp185 + _tmp138 * _tmp192 + _tmp139 * _tmp25 +
                         _tmp140 * sqrt_info(2, 0) - _tmp187 * _tmp203 + _tmp189 * _tmp203;
  const Scalar _tmp205 = _tmp13 * _tmp203 - _tmp130 * _tmp188 + _tmp130 * _tmp190 -
                         _tmp143 * _tmp183 - _tmp143 * _tmp184 + _tmp144 * _tmp185 +
                         _tmp144 * _tmp192 + _tmp145 * sqrt_info(2, 0) + _tmp146 * _tmp26;
  const Scalar _tmp206 = _tmp123 * sqrt_info(2, 1) - _tmp125 * _tmp188 + _tmp125 * _tmp190 +
                         _tmp139 * _tmp194 + _tmp146 * _tmp25 + _tmp149 * _tmp185 +
                         _tmp149 * _tmp192 - _tmp150 * _tmp183 - _tmp151 * sqrt_info(2, 1);
  const Scalar _tmp207 = (Scalar(1) / Scalar(2)) * _tmp206;
  const Scalar _tmp208 =
      -_b[0] * _tmp207 - _tmp135 * _tmp202 + _tmp142 * _tmp204 + _tmp148 * _tmp205;
  const Scalar _tmp209 =
      -_b[1] * _tmp207 - _tmp142 * _tmp205 + _tmp148 * _tmp204 + _tmp155 * _tmp202;
  const Scalar _tmp210 =
      _tmp135 * _tmp205 - _tmp142 * _tmp206 + _tmp148 * _tmp202 - _tmp155 * _tmp204;

  // Output terms (4)
  if (res != nullptr) {
    Eigen::Matrix<Scalar, 3, 1>& _res = (*res);

    _res(0, 0) = _tmp20;
    _res(1, 0) = _tmp23;
    _res(2, 0) = _tmp27;
  }

  if (jacobian != nullptr) {
    Eigen::Matrix<Scalar, 3, 6>& _jacobian = (*jacobian);

    _jacobian(0, 0) = _tmp109;
    _jacobian(0, 1) = _tmp111;
    _jacobian(0, 2) = _tmp112;
    _jacobian(0, 3) = _tmp154;
    _jacobian(0, 4) = _tmp156;
    _jacobian(0, 5) = _tmp157;
    _jacobian(1, 0) = _tmp171;
    _jacobian(1, 1) = _tmp172;
    _jacobian(1, 2) = _tmp173;
    _jacobian(1, 3) = _tmp180;
    _jacobian(1, 4) = _tmp181;
    _jacobian(1, 5) = _tmp182;
    _jacobian(2, 0) = _tmp199;
    _jacobian(2, 1) = _tmp200;
    _jacobian(2, 2) = _tmp201;
    _jacobian(2, 3) = _tmp208;
    _jacobian(2, 4) = _tmp209;
    _jacobian(2, 5) = _tmp210;
  }

  if (hessian != nullptr) {
    Eigen::Matrix<Scalar, 6, 6>& _hessian = (*hessian);

    _hessian(0, 0) =
        std::pow<Scalar>(_tmp109, 2) + std::pow<Scalar>(_tmp171, 2) + std::pow<Scalar>(_tmp199, 2);
    _hessian(0, 1) = 0;
    _hessian(0, 2) = 0;
    _hessian(0, 3) = 0;
    _hessian(0, 4) = 0;
    _hessian(0, 5) = 0;
    _hessian(1, 0) = _tmp109 * _tmp111 + _tmp171 * _tmp172 + _tmp199 * _tmp200;
    _hessian(1, 1) =
        std::pow<Scalar>(_tmp111, 2) + std::pow<Scalar>(_tmp172, 2) + std::pow<Scalar>(_tmp200, 2);
    _hessian(1, 2) = 0;
    _hessian(1, 3) = 0;
    _hessian(1, 4) = 0;
    _hessian(1, 5) = 0;
    _hessian(2, 0) = _tmp109 * _tmp112 + _tmp171 * _tmp173 + _tmp199 * _tmp201;
    _hessian(2, 1) = _tmp111 * _tmp112 + _tmp172 * _tmp173 + _tmp200 * _tmp201;
    _hessian(2, 2) =
        std::pow<Scalar>(_tmp112, 2) + std::pow<Scalar>(_tmp173, 2) + std::pow<Scalar>(_tmp201, 2);
    _hessian(2, 3) = 0;
    _hessian(2, 4) = 0;
    _hessian(2, 5) = 0;
    _hessian(3, 0) = _tmp109 * _tmp154 + _tmp171 * _tmp180 + _tmp199 * _tmp208;
    _hessian(3, 1) = _tmp111 * _tmp154 + _tmp172 * _tmp180 + _tmp200 * _tmp208;
    _hessian(3, 2) = _tmp112 * _tmp154 + _tmp173 * _tmp180 + _tmp201 * _tmp208;
    _hessian(3, 3) =
        std::pow<Scalar>(_tmp154, 2) + std::pow<Scalar>(_tmp180, 2) + std::pow<Scalar>(_tmp208, 2);
    _hessian(3, 4) = 0;
    _hessian(3, 5) = 0;
    _hessian(4, 0) = _tmp109 * _tmp156 + _tmp171 * _tmp181 + _tmp199 * _tmp209;
    _hessian(4, 1) = _tmp111 * _tmp156 + _tmp172 * _tmp181 + _tmp200 * _tmp209;
    _hessian(4, 2) = _tmp112 * _tmp156 + _tmp173 * _tmp181 + _tmp201 * _tmp209;
    _hessian(4, 3) = _tmp154 * _tmp156 + _tmp180 * _tmp181 + _tmp208 * _tmp209;
    _hessian(4, 4) =
        std::pow<Scalar>(_tmp156, 2) + std::pow<Scalar>(_tmp181, 2) + std::pow<Scalar>(_tmp209, 2);
    _hessian(4, 5) = 0;
    _hessian(5, 0) = _tmp109 * _tmp157 + _tmp171 * _tmp182 + _tmp199 * _tmp210;
    _hessian(5, 1) = _tmp111 * _tmp157 + _tmp172 * _tmp182 + _tmp200 * _tmp210;
    _hessian(5, 2) = _tmp112 * _tmp157 + _tmp173 * _tmp182 + _tmp201 * _tmp210;
    _hessian(5, 3) = _tmp154 * _tmp157 + _tmp180 * _tmp182 + _tmp208 * _tmp210;
    _hessian(5, 4) = _tmp156 * _tmp157 + _tmp181 * _tmp182 + _tmp209 * _tmp210;
    _hessian(5, 5) =
        std::pow<Scalar>(_tmp157, 2) + std::pow<Scalar>(_tmp182, 2) + std::pow<Scalar>(_tmp210, 2);
  }

  if (rhs != nullptr) {
    Eigen::Matrix<Scalar, 6, 1>& _rhs = (*rhs);

    _rhs(0, 0) = _tmp109 * _tmp20 + _tmp171 * _tmp23 + _tmp199 * _tmp27;
    _rhs(1, 0) = _tmp111 * _tmp20 + _tmp172 * _tmp23 + _tmp200 * _tmp27;
    _rhs(2, 0) = _tmp112 * _tmp20 + _tmp173 * _tmp23 + _tmp201 * _tmp27;
    _rhs(3, 0) = _tmp154 * _tmp20 + _tmp180 * _tmp23 + _tmp208 * _tmp27;
    _rhs(4, 0) = _tmp156 * _tmp20 + _tmp181 * _tmp23 + _tmp209 * _tmp27;
    _rhs(5, 0) = _tmp157 * _tmp20 + _tmp182 * _tmp23 + _tmp210 * _tmp27;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
