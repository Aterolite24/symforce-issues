// -----------------------------------------------------------------------------
// This file was autogenerated by symforce. Do NOT modify by hand.
// -----------------------------------------------------------------------------
#pragma once

#include <Eigen/Dense>

#include <geo/rot3.h>


namespace sym {


/**
* Residual that penalizes the difference between(a, b) and a_T_b.
*
* In vector space terms that would be:
*     (b - a) - a_T_b
*
* In lie group terms:
*     local_coordinates(a_T_b, between(a, b))
*     to_tangent(compose(inverse(a_T_b), compose(inverse(a), b)))
*
* Args:
*     sqrt_info: Square root information matrix to whiten residual. This can be computed from
*                a covariance matrix as the cholesky decomposition of the inverse. In the case
*                of a diagonal it will contain 1/sigma values. Must match the tangent dim.
*
*/
template <typename Scalar>
void BetweenFactorRot3(const geo::Rot3<Scalar>& a, const geo::Rot3<Scalar>& b, const geo::Rot3<Scalar>& a_T_b, const Eigen::Matrix<Scalar, 3, 3>& sqrt_info, const Scalar epsilon, Eigen::Matrix<Scalar, 3, 1>* const res, Eigen::Matrix<Scalar, 3, 6>* const jac) {
    // Input arrays
    const Eigen::Matrix<Scalar, 4, 1>& _a = a.Data();
    const Eigen::Matrix<Scalar, 4, 1>& _b = b.Data();
    const Eigen::Matrix<Scalar, 4, 1>& _a_T_b = a_T_b.Data();
    assert( res != nullptr );
    assert( jac != nullptr );

    // Intermediate terms (183)
    const Scalar _tmp0 = _a[0]*_b[2] - _a[1]*_b[3] - _a[2]*_b[0] + _a[3]*_b[1];
    const Scalar _tmp1 = _a[0]*_b[0] + _a[1]*_b[1] + _a[2]*_b[2] + _a[3]*_b[3];
    const Scalar _tmp2 = -_a[0]*_b[3] - _a[1]*_b[2] + _a[2]*_b[1] + _a[3]*_b[0];
    const Scalar _tmp3 = -_a[0]*_b[1] + _a[1]*_b[0] - _a[2]*_b[3] + _a[3]*_b[2];
    const Scalar _tmp4 = -_a_T_b[0]*_tmp0 + _a_T_b[1]*_tmp2 - _a_T_b[2]*_tmp1 + _a_T_b[3]*_tmp3;
    const Scalar _tmp5 = _a_T_b[0]*_tmp2 + _a_T_b[1]*_tmp0 + _a_T_b[2]*_tmp3 + _a_T_b[3]*_tmp1;
    const Scalar _tmp6 = -epsilon;
    const Scalar _tmp7 = _tmp6 + 1;
    const Scalar _tmp8 = std::min<Scalar>(_tmp5, _tmp7);
    const Scalar _tmp9 = epsilon - 1;
    const Scalar _tmp10 = std::max<Scalar>(_tmp8, _tmp9);
    const Scalar _tmp11 = std::acos(_tmp10);
    const Scalar _tmp12 = -(_tmp5 * _tmp5) + 1;
    const Scalar _tmp13 = std::max<Scalar>(_tmp12, epsilon);
    const Scalar _tmp14 = std::pow(_tmp13, -1.0/2.0);
    const Scalar _tmp15 = 2*_tmp14;
    const Scalar _tmp16 = _tmp11*_tmp15;
    const Scalar _tmp17 = _tmp16*sqrt_info(0, 2);
    const Scalar _tmp18 = _a_T_b[0]*_tmp3 - _a_T_b[1]*_tmp1 - _a_T_b[2]*_tmp2 + _a_T_b[3]*_tmp0;
    const Scalar _tmp19 = _tmp16*sqrt_info(0, 1);
    const Scalar _tmp20 = -_a_T_b[0]*_tmp1 - _a_T_b[1]*_tmp3 + _a_T_b[2]*_tmp0 + _a_T_b[3]*_tmp2;
    const Scalar _tmp21 = _tmp11*sqrt_info(0, 0);
    const Scalar _tmp22 = _tmp15*_tmp21;
    const Scalar _tmp23 = _tmp16*sqrt_info(1, 1);
    const Scalar _tmp24 = _tmp16*sqrt_info(1, 2);
    const Scalar _tmp25 = _tmp16*sqrt_info(1, 0);
    const Scalar _tmp26 = _tmp16*sqrt_info(2, 2);
    const Scalar _tmp27 = _tmp16*sqrt_info(2, 1);
    const Scalar _tmp28 = _tmp16*sqrt_info(2, 0);
    const Scalar _tmp29 = _a_T_b[3]*_b[0];
    const Scalar _tmp30 = _a_T_b[2]*_b[1];
    const Scalar _tmp31 = _a_T_b[0]*_b[3];
    const Scalar _tmp32 = -_tmp31;
    const Scalar _tmp33 = _a_T_b[1]*_b[2];
    const Scalar _tmp34 = -_tmp33;
    const Scalar _tmp35 = _tmp32 + _tmp34;
    const Scalar _tmp36 = _tmp29 + _tmp30 + _tmp35;
    const Scalar _tmp37 = _a_T_b[2]*_b[2];
    const Scalar _tmp38 = _a_T_b[3]*_b[3];
    const Scalar _tmp39 = _a_T_b[1]*_b[1];
    const Scalar _tmp40 = _a_T_b[0]*_b[0];
    const Scalar _tmp41 = _tmp39 + _tmp40;
    const Scalar _tmp42 = _tmp37 + _tmp38 + _tmp41;
    const Scalar _tmp43 = (((_tmp12 + _tmp6) > 0) - ((_tmp12 + _tmp6) < 0)) + 1;
    const Scalar _tmp44 = std::pow(_tmp13, -3.0/2.0);
    const Scalar _tmp45 = _tmp21*_tmp43*_tmp44*_tmp5;
    const Scalar _tmp46 = _tmp20*_tmp45;
    const Scalar _tmp47 = _tmp18*sqrt_info(0, 1);
    const Scalar _tmp48 = (1.0/2.0)*_tmp14*((((-_tmp5 + _tmp7) > 0) - ((-_tmp5 + _tmp7) < 0)) + 1)*((((_tmp8 - _tmp9) > 0) - ((_tmp8 - _tmp9) < 0)) + 1)/std::sqrt(-(_tmp10 * _tmp10) + 1);
    const Scalar _tmp49 = _tmp42*_tmp48;
    const Scalar _tmp50 = _tmp11*_tmp43*_tmp44*_tmp5;
    const Scalar _tmp51 = _tmp4*_tmp50;
    const Scalar _tmp52 = _tmp42*_tmp51;
    const Scalar _tmp53 = _tmp20*sqrt_info(0, 0);
    const Scalar _tmp54 = _tmp4*_tmp48;
    const Scalar _tmp55 = _tmp54*sqrt_info(0, 2);
    const Scalar _tmp56 = _a_T_b[0]*_b[1];
    const Scalar _tmp57 = -_tmp56;
    const Scalar _tmp58 = _a_T_b[1]*_b[0];
    const Scalar _tmp59 = _a_T_b[3]*_b[2];
    const Scalar _tmp60 = _a_T_b[2]*_b[3];
    const Scalar _tmp61 = -_tmp60;
    const Scalar _tmp62 = _tmp59 + _tmp61;
    const Scalar _tmp63 = _tmp57 + _tmp58 + _tmp62;
    const Scalar _tmp64 = _tmp16*_tmp63;
    const Scalar _tmp65 = _a_T_b[3]*_b[1];
    const Scalar _tmp66 = _a_T_b[0]*_b[2];
    const Scalar _tmp67 = _a_T_b[2]*_b[0];
    const Scalar _tmp68 = -_tmp67;
    const Scalar _tmp69 = _a_T_b[1]*_b[3];
    const Scalar _tmp70 = -_tmp69;
    const Scalar _tmp71 = _tmp68 + _tmp70;
    const Scalar _tmp72 = _tmp65 + _tmp66 + _tmp71;
    const Scalar _tmp73 = _tmp42*_tmp50;
    const Scalar _tmp74 = _tmp19*_tmp72 + _tmp22*_tmp36 + _tmp42*_tmp46 - _tmp42*_tmp55 - _tmp47*_tmp49 + _tmp47*_tmp73 - _tmp49*_tmp53 + _tmp52*sqrt_info(0, 2) + _tmp64*sqrt_info(0, 2);
    const Scalar _tmp75 = (1.0/2.0)*_a[0];
    const Scalar _tmp76 = -_tmp58;
    const Scalar _tmp77 = _tmp56 + _tmp62 + _tmp76;
    const Scalar _tmp78 = _tmp48*_tmp77;
    const Scalar _tmp79 = -_tmp30;
    const Scalar _tmp80 = -_tmp29 + _tmp35 + _tmp79;
    const Scalar _tmp81 = _tmp50*_tmp77;
    const Scalar _tmp82 = _tmp4*_tmp81;
    const Scalar _tmp83 = -_tmp66;
    const Scalar _tmp84 = _tmp65 + _tmp83;
    const Scalar _tmp85 = _tmp15*(_tmp68 + _tmp69 + _tmp84);
    const Scalar _tmp86 = -_tmp38;
    const Scalar _tmp87 = _tmp16*(-_tmp37 + _tmp41 + _tmp86);
    const Scalar _tmp88 = _tmp19*_tmp80 + _tmp21*_tmp85 + _tmp46*_tmp77 - _tmp47*_tmp78 + _tmp47*_tmp81 - _tmp53*_tmp78 - _tmp55*_tmp77 + _tmp82*sqrt_info(0, 2) + _tmp87*sqrt_info(0, 2);
    const Scalar _tmp89 = (1.0/2.0)*_a[1];
    const Scalar _tmp90 = _tmp67 + _tmp70 + _tmp84;
    const Scalar _tmp91 = _tmp37 + _tmp86;
    const Scalar _tmp92 = -_tmp39 + _tmp40 + _tmp91;
    const Scalar _tmp93 = _tmp48*_tmp90;
    const Scalar _tmp94 = _tmp57 + _tmp76;
    const Scalar _tmp95 = -_tmp59 + _tmp61 + _tmp94;
    const Scalar _tmp96 = _tmp29 + _tmp79;
    const Scalar _tmp97 = _tmp16*(_tmp31 + _tmp34 + _tmp96);
    const Scalar _tmp98 = _tmp51*_tmp90;
    const Scalar _tmp99 = _tmp50*_tmp90;
    const Scalar _tmp100 = _tmp18*_tmp99;
    const Scalar _tmp101 = (1.0/2.0)*_tmp100*sqrt_info(0, 1) + (1.0/2.0)*_tmp19*_tmp92 + (1.0/2.0)*_tmp22*_tmp95 + (1.0/2.0)*_tmp46*_tmp90 - 1.0/2.0*_tmp47*_tmp93 - 1.0/2.0*_tmp53*_tmp93 - 1.0/2.0*_tmp55*_tmp90 + (1.0/2.0)*_tmp97*sqrt_info(0, 2) + (1.0/2.0)*_tmp98*sqrt_info(0, 2);
    const Scalar _tmp102 = _tmp39 - _tmp40 + _tmp91;
    const Scalar _tmp103 = _tmp59 + _tmp60 + _tmp94;
    const Scalar _tmp104 = _tmp32 + _tmp33 + _tmp96;
    const Scalar _tmp105 = _tmp104*_tmp48;
    const Scalar _tmp106 = _tmp104*_tmp51;
    const Scalar _tmp107 = _tmp104*_tmp50;
    const Scalar _tmp108 = _tmp16*(-_tmp65 + _tmp71 + _tmp83);
    const Scalar _tmp109 = _tmp102*_tmp22 + _tmp103*_tmp19 + _tmp104*_tmp46 - _tmp104*_tmp55 - _tmp105*_tmp47 - _tmp105*_tmp53 + _tmp106*sqrt_info(0, 2) + _tmp107*_tmp47 + _tmp108*sqrt_info(0, 2);
    const Scalar _tmp110 = (1.0/2.0)*_a[3];
    const Scalar _tmp111 = (1.0/2.0)*_a[2];
    const Scalar _tmp112 = _a[0]*_a_T_b[3];
    const Scalar _tmp113 = _a[1]*_a_T_b[2];
    const Scalar _tmp114 = _a[3]*_a_T_b[0];
    const Scalar _tmp115 = _a[2]*_a_T_b[1];
    const Scalar _tmp116 = -_tmp112 - _tmp113 - _tmp114 + _tmp115;
    const Scalar _tmp117 = _a[1]*_a_T_b[3];
    const Scalar _tmp118 = _a[0]*_a_T_b[2];
    const Scalar _tmp119 = _a[3]*_a_T_b[1];
    const Scalar _tmp120 = _a[2]*_a_T_b[0];
    const Scalar _tmp121 = -_tmp117 + _tmp118 - _tmp119 - _tmp120;
    const Scalar _tmp122 = -_a[0]*_a_T_b[0] - _a[1]*_a_T_b[1] - _a[2]*_a_T_b[2] + _a[3]*_a_T_b[3];
    const Scalar _tmp123 = _tmp122*_tmp48;
    const Scalar _tmp124 = _tmp122*_tmp20;
    const Scalar _tmp125 = _tmp122*_tmp51;
    const Scalar _tmp126 = _tmp122*_tmp50;
    const Scalar _tmp127 = _a[2]*_a_T_b[3];
    const Scalar _tmp128 = _a[3]*_a_T_b[2];
    const Scalar _tmp129 = _a[0]*_a_T_b[1];
    const Scalar _tmp130 = _a[1]*_a_T_b[0];
    const Scalar _tmp131 = -_tmp127 - _tmp128 - _tmp129 + _tmp130;
    const Scalar _tmp132 = _tmp116*_tmp22 + _tmp121*_tmp19 - _tmp122*_tmp55 - _tmp123*_tmp47 + _tmp124*_tmp45 - _tmp124*_tmp48*sqrt_info(0, 0) + _tmp125*sqrt_info(0, 2) + _tmp126*_tmp47 + _tmp131*_tmp17;
    const Scalar _tmp133 = (1.0/2.0)*_b[0];
    const Scalar _tmp134 = _tmp127 + _tmp128 + _tmp129 - _tmp130;
    const Scalar _tmp135 = _tmp112 + _tmp113 + _tmp114 - _tmp115;
    const Scalar _tmp136 = _tmp134*_tmp50;
    const Scalar _tmp137 = _tmp136*_tmp4;
    const Scalar _tmp138 = _tmp134*_tmp48;
    const Scalar _tmp139 = _tmp121*_tmp22 + _tmp122*_tmp17 + _tmp134*_tmp46 - _tmp134*_tmp55 + _tmp135*_tmp19 + _tmp136*_tmp47 + _tmp137*sqrt_info(0, 2) - _tmp138*_tmp47 - _tmp138*_tmp53;
    const Scalar _tmp140 = (1.0/2.0)*_b[1];
    const Scalar _tmp141 = _tmp117 - _tmp118 + _tmp119 + _tmp120;
    const Scalar _tmp142 = _tmp141*_tmp48;
    const Scalar _tmp143 = _tmp141*_tmp50;
    const Scalar _tmp144 = _tmp141*_tmp54;
    const Scalar _tmp145 = _tmp141*_tmp51;
    const Scalar _tmp146 = _tmp116*_tmp17 + _tmp122*_tmp19 + _tmp134*_tmp22 + _tmp141*_tmp46 - _tmp142*_tmp47 - _tmp142*_tmp53 + _tmp143*_tmp47 - _tmp144*sqrt_info(0, 2) + _tmp145*sqrt_info(0, 2);
    const Scalar _tmp147 = (1.0/2.0)*_tmp146;
    const Scalar _tmp148 = _tmp135*_tmp48;
    const Scalar _tmp149 = _tmp135*_tmp51;
    const Scalar _tmp150 = _tmp135*_tmp50;
    const Scalar _tmp151 = _tmp122*_tmp22 + _tmp131*_tmp19 + _tmp135*_tmp46 - _tmp135*_tmp55 + _tmp141*_tmp17 - _tmp148*_tmp47 - _tmp148*_tmp53 + _tmp149*sqrt_info(0, 2) + _tmp150*_tmp47;
    const Scalar _tmp152 = (1.0/2.0)*_b[3];
    const Scalar _tmp153 = (1.0/2.0)*_b[2];
    const Scalar _tmp154 = _tmp20*sqrt_info(1, 0);
    const Scalar _tmp155 = _tmp54*sqrt_info(1, 2);
    const Scalar _tmp156 = _tmp18*sqrt_info(1, 1);
    const Scalar _tmp157 = -_tmp154*_tmp49 + _tmp154*_tmp73 - _tmp155*_tmp42 - _tmp156*_tmp49 + _tmp156*_tmp73 + _tmp23*_tmp72 + _tmp24*_tmp63 + _tmp25*_tmp36 + _tmp52*sqrt_info(1, 2);
    const Scalar _tmp158 = _tmp11*_tmp85;
    const Scalar _tmp159 = -_tmp154*_tmp78 + _tmp154*_tmp81 - _tmp155*_tmp77 - _tmp156*_tmp78 + _tmp156*_tmp81 + _tmp158*sqrt_info(1, 0) + _tmp23*_tmp80 + _tmp82*sqrt_info(1, 2) + _tmp87*sqrt_info(1, 2);
    const Scalar _tmp160 = (1.0/2.0)*_tmp100*sqrt_info(1, 1) - 1.0/2.0*_tmp154*_tmp93 + (1.0/2.0)*_tmp154*_tmp99 - 1.0/2.0*_tmp155*_tmp90 - 1.0/2.0*_tmp156*_tmp93 + (1.0/2.0)*_tmp23*_tmp92 + (1.0/2.0)*_tmp25*_tmp95 + (1.0/2.0)*_tmp97*sqrt_info(1, 2) + (1.0/2.0)*_tmp98*sqrt_info(1, 2);
    const Scalar _tmp161 = _tmp102*_tmp25 + _tmp103*_tmp23 - _tmp104*_tmp155 - _tmp105*_tmp154 - _tmp105*_tmp156 + _tmp106*sqrt_info(1, 2) + _tmp107*_tmp154 + _tmp107*_tmp156 + _tmp108*sqrt_info(1, 2);
    const Scalar _tmp162 = _tmp154*_tmp50;
    const Scalar _tmp163 = (1.0/2.0)*_tmp116*_tmp25 + (1.0/2.0)*_tmp121*_tmp23 - 1.0/2.0*_tmp122*_tmp155 + (1.0/2.0)*_tmp122*_tmp162 - 1.0/2.0*_tmp123*_tmp154 - 1.0/2.0*_tmp123*_tmp156 + (1.0/2.0)*_tmp125*sqrt_info(1, 2) + (1.0/2.0)*_tmp126*_tmp156 + (1.0/2.0)*_tmp131*_tmp24;
    const Scalar _tmp164 = _tmp121*_tmp25 + _tmp122*_tmp24 - _tmp134*_tmp155 + _tmp135*_tmp23 + _tmp136*_tmp154 + _tmp136*_tmp156 + _tmp137*sqrt_info(1, 2) - _tmp138*_tmp154 - _tmp138*_tmp156;
    const Scalar _tmp165 = _tmp116*_tmp24 + _tmp122*_tmp23 + _tmp134*_tmp25 + _tmp141*_tmp162 - _tmp142*_tmp154 - _tmp142*_tmp156 + _tmp143*_tmp156 - _tmp144*sqrt_info(1, 2) + _tmp145*sqrt_info(1, 2);
    const Scalar _tmp166 = (1.0/2.0)*_tmp165;
    const Scalar _tmp167 = _tmp122*_tmp25 + _tmp131*_tmp23 - _tmp135*_tmp155 + _tmp135*_tmp162 + _tmp141*_tmp24 - _tmp148*_tmp154 - _tmp148*_tmp156 + _tmp149*sqrt_info(1, 2) + _tmp150*_tmp156;
    const Scalar _tmp168 = _tmp20*sqrt_info(2, 0);
    const Scalar _tmp169 = _tmp18*sqrt_info(2, 1);
    const Scalar _tmp170 = _tmp54*sqrt_info(2, 2);
    const Scalar _tmp171 = -_tmp168*_tmp49 + _tmp168*_tmp73 - _tmp169*_tmp49 + _tmp169*_tmp73 - _tmp170*_tmp42 + _tmp27*_tmp72 + _tmp28*_tmp36 + _tmp52*sqrt_info(2, 2) + _tmp64*sqrt_info(2, 2);
    const Scalar _tmp172 = _tmp158*sqrt_info(2, 0) - _tmp168*_tmp78 + _tmp168*_tmp81 - _tmp169*_tmp78 + _tmp169*_tmp81 - _tmp170*_tmp77 + _tmp27*_tmp80 + _tmp82*sqrt_info(2, 2) + _tmp87*sqrt_info(2, 2);
    const Scalar _tmp173 = -_tmp168*_tmp93 + _tmp168*_tmp99 - _tmp169*_tmp93 + _tmp169*_tmp99 - _tmp170*_tmp90 + _tmp27*_tmp92 + _tmp28*_tmp95 + _tmp97*sqrt_info(2, 2) + _tmp98*sqrt_info(2, 2);
    const Scalar _tmp174 = _tmp102*_tmp28 + _tmp103*_tmp27 - _tmp104*_tmp170 - _tmp105*_tmp168 - _tmp105*_tmp169 + _tmp106*sqrt_info(2, 2) + _tmp107*_tmp168 + _tmp107*_tmp169 + _tmp108*sqrt_info(2, 2);
    const Scalar _tmp175 = _tmp168*_tmp50;
    const Scalar _tmp176 = (1.0/2.0)*_tmp116*_tmp28 + (1.0/2.0)*_tmp121*_tmp27 - 1.0/2.0*_tmp122*_tmp170 + (1.0/2.0)*_tmp122*_tmp175 - 1.0/2.0*_tmp123*_tmp168 - 1.0/2.0*_tmp123*_tmp169 + (1.0/2.0)*_tmp125*sqrt_info(2, 2) + (1.0/2.0)*_tmp126*_tmp169 + (1.0/2.0)*_tmp131*_tmp26;
    const Scalar _tmp177 = _tmp116*_tmp26 + _tmp122*_tmp27 + _tmp134*_tmp28 - _tmp141*_tmp170 + _tmp141*_tmp175 - _tmp142*_tmp168 - _tmp142*_tmp169 + _tmp143*_tmp169 + _tmp145*sqrt_info(2, 2);
    const Scalar _tmp178 = (1.0/2.0)*_tmp177;
    const Scalar _tmp179 = _tmp134*_tmp168;
    const Scalar _tmp180 = _tmp121*_tmp28 + _tmp122*_tmp26 - _tmp134*_tmp170 + _tmp135*_tmp27 + _tmp136*_tmp169 + _tmp137*sqrt_info(2, 2) - _tmp138*_tmp169 - _tmp179*_tmp48 + _tmp179*_tmp50;
    const Scalar _tmp181 = _tmp122*_tmp28 + _tmp131*_tmp27 - _tmp135*_tmp170 + _tmp135*_tmp175 + _tmp141*_tmp26 - _tmp148*_tmp168 - _tmp148*_tmp169 + _tmp149*sqrt_info(2, 2) + _tmp150*_tmp169;
    const Scalar _tmp182 = (1.0/2.0)*_tmp181;

    // Output terms (2)
    Eigen::Matrix<Scalar, 3, 1>& _res = (*res);
    Eigen::Matrix<Scalar, 3, 6>& _jac = (*jac);

    _res(0, 0) = _tmp17*_tmp4 + _tmp18*_tmp19 + _tmp20*_tmp22;
    _res(1, 0) = _tmp18*_tmp23 + _tmp20*_tmp25 + _tmp24*_tmp4;
    _res(2, 0) = _tmp18*_tmp27 + _tmp20*_tmp28 + _tmp26*_tmp4;
    _jac(0, 0) = _a[2]*_tmp101 + _tmp109*_tmp110 - _tmp74*_tmp75 - _tmp88*_tmp89;
    _jac(0, 1) = _a[3]*_tmp101 - _tmp109*_tmp111 - _tmp74*_tmp89 + _tmp75*_tmp88;
    _jac(0, 2) = -_a[0]*_tmp101 + _tmp109*_tmp89 + _tmp110*_tmp88 - _tmp111*_tmp74;
    _jac(0, 3) = _b[2]*_tmp147 - _tmp132*_tmp133 - _tmp139*_tmp140 + _tmp151*_tmp152;
    _jac(0, 4) = -_tmp132*_tmp140 + _tmp133*_tmp139 + _tmp146*_tmp152 - _tmp151*_tmp153;
    _jac(0, 5) = -_b[0]*_tmp147 - _tmp132*_tmp153 + _tmp139*_tmp152 + _tmp140*_tmp151;
    _jac(1, 0) = _a[2]*_tmp160 + _tmp110*_tmp161 - _tmp157*_tmp75 - _tmp159*_tmp89;
    _jac(1, 1) = _a[3]*_tmp160 - _tmp111*_tmp161 - _tmp157*_tmp89 + _tmp159*_tmp75;
    _jac(1, 2) = -_a[0]*_tmp160 + _tmp110*_tmp159 - _tmp111*_tmp157 + _tmp161*_tmp89;
    _jac(1, 3) = -_b[0]*_tmp163 + _b[2]*_tmp166 - _tmp140*_tmp164 + _tmp152*_tmp167;
    _jac(1, 4) = -_b[1]*_tmp163 + _tmp133*_tmp164 + _tmp152*_tmp165 - _tmp153*_tmp167;
    _jac(1, 5) = -_b[0]*_tmp166 - _b[2]*_tmp163 + _tmp140*_tmp167 + _tmp152*_tmp164;
    _jac(2, 0) = _tmp110*_tmp174 + _tmp111*_tmp173 - _tmp171*_tmp75 - _tmp172*_tmp89;
    _jac(2, 1) = _tmp110*_tmp173 - _tmp111*_tmp174 - _tmp171*_tmp89 + _tmp172*_tmp75;
    _jac(2, 2) = _tmp110*_tmp172 - _tmp111*_tmp171 - _tmp173*_tmp75 + _tmp174*_tmp89;
    _jac(2, 3) = -_b[0]*_tmp176 + _b[2]*_tmp178 - _tmp140*_tmp180 + _tmp152*_tmp181;
    _jac(2, 4) = -_b[1]*_tmp176 - _b[2]*_tmp182 + _tmp133*_tmp180 + _tmp152*_tmp177;
    _jac(2, 5) = -_b[0]*_tmp178 + _b[1]*_tmp182 - _b[2]*_tmp176 + _tmp152*_tmp180;



}

}  // namespace sym
