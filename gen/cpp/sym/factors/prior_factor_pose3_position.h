// -----------------------------------------------------------------------------
// This file was autogenerated by symforce. Do NOT modify by hand.
// -----------------------------------------------------------------------------
#pragma once

#include <Eigen/Dense>
#include <sym/pose3.h>

namespace sym {

/**
 * Residual that penalizes the difference between a value and prior (desired / measured value).
 *
 * In vector space terms that would be:
 *     prior - value
 *
 * In lie group terms:
 *     to_tangent(compose(inverse(value), prior))
 *
 * Args:
 *     sqrt_info: Square root information matrix to whiten residual. This can be computed from
 *                a covariance matrix as the cholesky decomposition of the inverse. In the case
 *                of a diagonal it will contain 1/sigma values. Must match the tangent dim.
 *     geo.Matrix: Jacobian for args 0 (value)
 */
template <typename Scalar>
void PriorFactorPose3Position(const sym::Pose3<Scalar>& value,
                              const Eigen::Matrix<Scalar, 3, 1>& prior,
                              const Eigen::Matrix<Scalar, 3, 3>& sqrt_info, const Scalar epsilon,
                              Eigen::Matrix<Scalar, 3, 1>* const res = nullptr,
                              Eigen::Matrix<Scalar, 3, 6>* const jacobian = nullptr) {
  // Total ops: 21

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _value = value.Data();

  // Intermediate terms (3)
  const Scalar _tmp0 = _value[6] - prior(2, 0);
  const Scalar _tmp1 = _value[5] - prior(1, 0);
  const Scalar _tmp2 = _value[4] - prior(0, 0);

  // Output terms (2)
  if (res != nullptr) {
    Eigen::Matrix<Scalar, 3, 1>& _res = (*res);

    _res(0, 0) = _tmp0 * sqrt_info(0, 2) + _tmp1 * sqrt_info(0, 1) + _tmp2 * sqrt_info(0, 0);
    _res(1, 0) = _tmp0 * sqrt_info(1, 2) + _tmp1 * sqrt_info(1, 1) + _tmp2 * sqrt_info(1, 0);
    _res(2, 0) = _tmp0 * sqrt_info(2, 2) + _tmp1 * sqrt_info(2, 1) + _tmp2 * sqrt_info(2, 0);
  }

  if (jacobian != nullptr) {
    Eigen::Matrix<Scalar, 3, 6>& _jacobian = (*jacobian);

    _jacobian(0, 0) = 0;
    _jacobian(0, 1) = 0;
    _jacobian(0, 2) = 0;
    _jacobian(0, 3) = sqrt_info(0, 0);
    _jacobian(0, 4) = sqrt_info(0, 1);
    _jacobian(0, 5) = sqrt_info(0, 2);
    _jacobian(1, 0) = 0;
    _jacobian(1, 1) = 0;
    _jacobian(1, 2) = 0;
    _jacobian(1, 3) = sqrt_info(1, 0);
    _jacobian(1, 4) = sqrt_info(1, 1);
    _jacobian(1, 5) = sqrt_info(1, 2);
    _jacobian(2, 0) = 0;
    _jacobian(2, 1) = 0;
    _jacobian(2, 2) = 0;
    _jacobian(2, 3) = sqrt_info(2, 0);
    _jacobian(2, 4) = sqrt_info(2, 1);
    _jacobian(2, 5) = sqrt_info(2, 2);
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
