// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     cpp_templates/function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>
#include <sym/pose3.h>
#include <sym/rot3.h>

namespace sym {

/**
 * Residual that penalizes the difference between a value and prior (desired / measured value).
 *
 * In vector space terms that would be:
 *     prior - value
 *
 * In lie group terms:
 *     to_tangent(compose(inverse(value), prior))
 *
 * Args:
 *     sqrt_info: Square root information matrix to whiten residual. This can be computed from
 *                a covariance matrix as the cholesky decomposition of the inverse. In the case
 *                of a diagonal it will contain 1/sigma values. Must match the tangent dim.
 *     jacobian: (3x6) jacobian of res wrt arg value (6)
 *     hessian: (6x6) Gauss-Newton hessian for arg value (6)
 *     rhs: (6x1) Gauss-Newton rhs for arg value (6)
 */
template <typename Scalar>
void PriorFactorPose3Rotation(const sym::Pose3<Scalar>& value, const sym::Rot3<Scalar>& prior,
                              const Eigen::Matrix<Scalar, 3, 3>& sqrt_info, const Scalar epsilon,
                              Eigen::Matrix<Scalar, 3, 1>* const res = nullptr,
                              Eigen::Matrix<Scalar, 3, 6>* const jacobian = nullptr,
                              Eigen::Matrix<Scalar, 6, 6>* const hessian = nullptr,
                              Eigen::Matrix<Scalar, 6, 1>* const rhs = nullptr) {
  // Total ops: 414

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _value = value.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _prior = prior.Data();

  // Intermediate terms (110)
  const Scalar _tmp0 = _prior[3] * _value[3];
  const Scalar _tmp1 = _prior[0] * _value[0];
  const Scalar _tmp2 = _prior[2] * _value[2];
  const Scalar _tmp3 = _prior[1] * _value[1];
  const Scalar _tmp4 = -_tmp1 - _tmp2 - _tmp3;
  const Scalar _tmp5 = _tmp0 - _tmp4;
  const Scalar _tmp6 = 2 * std::min<Scalar>(0, (((_tmp5) > 0) - ((_tmp5) < 0))) + 1;
  const Scalar _tmp7 = 2 * _tmp6;
  const Scalar _tmp8 = _tmp7 * sqrt_info(0, 0);
  const Scalar _tmp9 = _prior[3] * _value[0];
  const Scalar _tmp10 = _prior[0] * _value[3];
  const Scalar _tmp11 = _prior[2] * _value[1];
  const Scalar _tmp12 = _prior[1] * _value[2];
  const Scalar _tmp13 = -_tmp10 + _tmp11 - _tmp12 + _tmp9;
  const Scalar _tmp14 = 1 - epsilon;
  const Scalar _tmp15 = std::min<Scalar>(_tmp14, std::fabs(_tmp5));
  const Scalar _tmp16 = std::acos(_tmp15) / std::sqrt(1 - std::pow(_tmp15, Scalar(2)));
  const Scalar _tmp17 = _tmp13 * _tmp16;
  const Scalar _tmp18 = _tmp7 * sqrt_info(0, 2);
  const Scalar _tmp19 = _prior[3] * _value[2];
  const Scalar _tmp20 = _prior[0] * _value[1];
  const Scalar _tmp21 = _prior[2] * _value[3];
  const Scalar _tmp22 = _prior[1] * _value[0];
  const Scalar _tmp23 = _tmp19 - _tmp20 - _tmp21 + _tmp22;
  const Scalar _tmp24 = _tmp16 * _tmp23;
  const Scalar _tmp25 = _tmp7 * sqrt_info(0, 1);
  const Scalar _tmp26 = _prior[3] * _value[1];
  const Scalar _tmp27 = _prior[0] * _value[2];
  const Scalar _tmp28 = _prior[2] * _value[0];
  const Scalar _tmp29 = _prior[1] * _value[3];
  const Scalar _tmp30 = _tmp26 + _tmp27 - _tmp28 - _tmp29;
  const Scalar _tmp31 = _tmp16 * _tmp30;
  const Scalar _tmp32 = _tmp17 * _tmp8 + _tmp18 * _tmp24 + _tmp25 * _tmp31;
  const Scalar _tmp33 = _tmp17 * _tmp7;
  const Scalar _tmp34 = _tmp7 * sqrt_info(1, 2);
  const Scalar _tmp35 = _tmp31 * _tmp7;
  const Scalar _tmp36 = _tmp24 * _tmp34 + _tmp33 * sqrt_info(1, 0) + _tmp35 * sqrt_info(1, 1);
  const Scalar _tmp37 = _tmp7 * sqrt_info(2, 2);
  const Scalar _tmp38 = _tmp24 * _tmp37 + _tmp33 * sqrt_info(2, 0) + _tmp35 * sqrt_info(2, 1);
  const Scalar _tmp39 = (Scalar(1) / Scalar(2)) * _tmp9;
  const Scalar _tmp40 = (Scalar(1) / Scalar(2)) * _tmp10;
  const Scalar _tmp41 = (Scalar(1) / Scalar(2)) * _tmp11;
  const Scalar _tmp42 = (Scalar(1) / Scalar(2)) * _tmp12;
  const Scalar _tmp43 = _tmp39 - _tmp40 + _tmp41 - _tmp42;
  const Scalar _tmp44 = std::fabs(_tmp0 + _tmp1 + _tmp2 + _tmp3);
  const Scalar _tmp45 = std::min<Scalar>(_tmp14, _tmp44);
  const Scalar _tmp46 = 1 - std::pow(_tmp45, Scalar(2));
  const Scalar _tmp47 = _tmp6 * ((((_tmp14 - _tmp44) > 0) - ((_tmp14 - _tmp44) < 0)) + 1) *
                        (((-_tmp0 + _tmp4) > 0) - ((-_tmp0 + _tmp4) < 0));
  const Scalar _tmp48 = _tmp47 / _tmp46;
  const Scalar _tmp49 = _tmp43 * _tmp48;
  const Scalar _tmp50 = _tmp23 * sqrt_info(0, 2);
  const Scalar _tmp51 = std::acos(_tmp45);
  const Scalar _tmp52 = _tmp45 * _tmp47 * _tmp51 / (_tmp46 * std::sqrt(_tmp46));
  const Scalar _tmp53 = _tmp43 * _tmp52;
  const Scalar _tmp54 = _tmp30 * sqrt_info(0, 1);
  const Scalar _tmp55 = _tmp13 * sqrt_info(0, 0);
  const Scalar _tmp56 = _tmp13 * _tmp49;
  const Scalar _tmp57 = (Scalar(1) / Scalar(2)) * _tmp19;
  const Scalar _tmp58 = (Scalar(1) / Scalar(2)) * _tmp20;
  const Scalar _tmp59 = (Scalar(1) / Scalar(2)) * _tmp21;
  const Scalar _tmp60 = (Scalar(1) / Scalar(2)) * _tmp22;
  const Scalar _tmp61 = _tmp57 - _tmp58 - _tmp59 + _tmp60;
  const Scalar _tmp62 = _tmp51 / std::sqrt(_tmp46);
  const Scalar _tmp63 = _tmp25 * _tmp62;
  const Scalar _tmp64 = _tmp30 * _tmp49;
  const Scalar _tmp65 = (Scalar(1) / Scalar(2)) * _tmp26;
  const Scalar _tmp66 = (Scalar(1) / Scalar(2)) * _tmp27;
  const Scalar _tmp67 = (Scalar(1) / Scalar(2)) * _tmp28;
  const Scalar _tmp68 = (Scalar(1) / Scalar(2)) * _tmp29;
  const Scalar _tmp69 = _tmp62 * (-_tmp65 - _tmp66 + _tmp67 + _tmp68);
  const Scalar _tmp70 = (Scalar(1) / Scalar(2)) * _tmp0 + (Scalar(1) / Scalar(2)) * _tmp1 +
                        (Scalar(1) / Scalar(2)) * _tmp2 + (Scalar(1) / Scalar(2)) * _tmp3;
  const Scalar _tmp71 = _tmp62 * _tmp8;
  const Scalar _tmp72 = _tmp18 * _tmp69 - _tmp49 * _tmp50 + _tmp50 * _tmp53 + _tmp53 * _tmp54 +
                        _tmp53 * _tmp55 - _tmp56 * sqrt_info(0, 0) + _tmp61 * _tmp63 -
                        _tmp64 * sqrt_info(0, 1) + _tmp70 * _tmp71;
  const Scalar _tmp73 = _tmp65 + _tmp66 - _tmp67 - _tmp68;
  const Scalar _tmp74 = _tmp48 * _tmp73;
  const Scalar _tmp75 = _tmp30 * _tmp74;
  const Scalar _tmp76 = _tmp52 * _tmp73;
  const Scalar _tmp77 = _tmp43 * _tmp62;
  const Scalar _tmp78 = -_tmp57 + _tmp58 + _tmp59 - _tmp60;
  const Scalar _tmp79 = _tmp13 * _tmp74;
  const Scalar _tmp80 = _tmp18 * _tmp77 - _tmp50 * _tmp74 + _tmp50 * _tmp76 + _tmp54 * _tmp76 +
                        _tmp55 * _tmp76 + _tmp63 * _tmp70 + _tmp71 * _tmp78 -
                        _tmp75 * sqrt_info(0, 1) - _tmp79 * sqrt_info(0, 0);
  const Scalar _tmp81 = _tmp52 * _tmp61;
  const Scalar _tmp82 = _tmp30 * _tmp81;
  const Scalar _tmp83 = _tmp48 * _tmp61;
  const Scalar _tmp84 = _tmp62 * _tmp73;
  const Scalar _tmp85 = -_tmp39 + _tmp40 - _tmp41 + _tmp42;
  const Scalar _tmp86 = _tmp30 * _tmp83;
  const Scalar _tmp87 = _tmp13 * _tmp83;
  const Scalar _tmp88 = _tmp62 * _tmp70;
  const Scalar _tmp89 = _tmp18 * _tmp88 + _tmp50 * _tmp81 - _tmp50 * _tmp83 + _tmp55 * _tmp81 +
                        _tmp63 * _tmp85 + _tmp8 * _tmp84 + _tmp82 * sqrt_info(0, 1) -
                        _tmp86 * sqrt_info(0, 1) - _tmp87 * sqrt_info(0, 0);
  const Scalar _tmp90 = _tmp23 * sqrt_info(1, 2);
  const Scalar _tmp91 = _tmp30 * _tmp53;
  const Scalar _tmp92 = _tmp13 * sqrt_info(1, 0);
  const Scalar _tmp93 = _tmp62 * _tmp7;
  const Scalar _tmp94 = _tmp93 * sqrt_info(1, 1);
  const Scalar _tmp95 = _tmp70 * _tmp93;
  const Scalar _tmp96 = _tmp34 * _tmp69 - _tmp49 * _tmp90 + _tmp53 * _tmp90 + _tmp53 * _tmp92 -
                        _tmp56 * sqrt_info(1, 0) + _tmp61 * _tmp94 - _tmp64 * sqrt_info(1, 1) +
                        _tmp91 * sqrt_info(1, 1) + _tmp95 * sqrt_info(1, 0);
  const Scalar _tmp97 = _tmp30 * _tmp76;
  const Scalar _tmp98 = _tmp78 * _tmp93;
  const Scalar _tmp99 = _tmp34 * _tmp77 + _tmp70 * _tmp94 - _tmp74 * _tmp90 -
                        _tmp75 * sqrt_info(1, 1) + _tmp76 * _tmp90 + _tmp76 * _tmp92 -
                        _tmp79 * sqrt_info(1, 0) + _tmp97 * sqrt_info(1, 1) +
                        _tmp98 * sqrt_info(1, 0);
  const Scalar _tmp100 = _tmp7 * _tmp84;
  const Scalar _tmp101 = _tmp85 * _tmp93;
  const Scalar _tmp102 = _tmp100 * sqrt_info(1, 0) + _tmp101 * sqrt_info(1, 1) + _tmp34 * _tmp88 +
                         _tmp81 * _tmp90 + _tmp81 * _tmp92 + _tmp82 * sqrt_info(1, 1) -
                         _tmp83 * _tmp90 - _tmp86 * sqrt_info(1, 1) - _tmp87 * sqrt_info(1, 0);
  const Scalar _tmp103 = _tmp23 * sqrt_info(2, 2);
  const Scalar _tmp104 = _tmp13 * sqrt_info(2, 0);
  const Scalar _tmp105 = _tmp61 * sqrt_info(2, 1);
  const Scalar _tmp106 = -_tmp103 * _tmp49 + _tmp103 * _tmp53 - _tmp104 * _tmp49 +
                         _tmp104 * _tmp53 + _tmp105 * _tmp93 + _tmp37 * _tmp69 -
                         _tmp64 * sqrt_info(2, 1) + _tmp91 * sqrt_info(2, 1) +
                         _tmp95 * sqrt_info(2, 0);
  const Scalar _tmp107 = -_tmp103 * _tmp74 + _tmp103 * _tmp76 - _tmp104 * _tmp74 +
                         _tmp104 * _tmp76 + _tmp37 * _tmp77 - _tmp75 * sqrt_info(2, 1) +
                         _tmp95 * sqrt_info(2, 1) + _tmp97 * sqrt_info(2, 1) +
                         _tmp98 * sqrt_info(2, 0);
  const Scalar _tmp108 = _tmp105 * _tmp30;
  const Scalar _tmp109 = _tmp100 * sqrt_info(2, 0) + _tmp101 * sqrt_info(2, 1) + _tmp103 * _tmp81 -
                         _tmp103 * _tmp83 + _tmp104 * _tmp81 - _tmp104 * _tmp83 - _tmp108 * _tmp48 +
                         _tmp108 * _tmp52 + _tmp37 * _tmp88;

  // Output terms (4)
  if (res != nullptr) {
    Eigen::Matrix<Scalar, 3, 1>& _res = (*res);

    _res(0, 0) = _tmp32;
    _res(1, 0) = _tmp36;
    _res(2, 0) = _tmp38;
  }

  if (jacobian != nullptr) {
    Eigen::Matrix<Scalar, 3, 6>& _jacobian = (*jacobian);

    _jacobian(0, 0) = _tmp72;
    _jacobian(0, 1) = _tmp80;
    _jacobian(0, 2) = _tmp89;
    _jacobian(0, 3) = 0;
    _jacobian(0, 4) = 0;
    _jacobian(0, 5) = 0;
    _jacobian(1, 0) = _tmp96;
    _jacobian(1, 1) = _tmp99;
    _jacobian(1, 2) = _tmp102;
    _jacobian(1, 3) = 0;
    _jacobian(1, 4) = 0;
    _jacobian(1, 5) = 0;
    _jacobian(2, 0) = _tmp106;
    _jacobian(2, 1) = _tmp107;
    _jacobian(2, 2) = _tmp109;
    _jacobian(2, 3) = 0;
    _jacobian(2, 4) = 0;
    _jacobian(2, 5) = 0;
  }

  if (hessian != nullptr) {
    Eigen::Matrix<Scalar, 6, 6>& _hessian = (*hessian);

    _hessian(0, 0) =
        std::pow(_tmp106, Scalar(2)) + std::pow(_tmp72, Scalar(2)) + std::pow(_tmp96, Scalar(2));
    _hessian(0, 1) = 0;
    _hessian(0, 2) = 0;
    _hessian(0, 3) = 0;
    _hessian(0, 4) = 0;
    _hessian(0, 5) = 0;
    _hessian(1, 0) = _tmp106 * _tmp107 + _tmp72 * _tmp80 + _tmp96 * _tmp99;
    _hessian(1, 1) =
        std::pow(_tmp107, Scalar(2)) + std::pow(_tmp80, Scalar(2)) + std::pow(_tmp99, Scalar(2));
    _hessian(1, 2) = 0;
    _hessian(1, 3) = 0;
    _hessian(1, 4) = 0;
    _hessian(1, 5) = 0;
    _hessian(2, 0) = _tmp102 * _tmp96 + _tmp106 * _tmp109 + _tmp72 * _tmp89;
    _hessian(2, 1) = _tmp102 * _tmp99 + _tmp107 * _tmp109 + _tmp80 * _tmp89;
    _hessian(2, 2) =
        std::pow(_tmp102, Scalar(2)) + std::pow(_tmp109, Scalar(2)) + std::pow(_tmp89, Scalar(2));
    _hessian(2, 3) = 0;
    _hessian(2, 4) = 0;
    _hessian(2, 5) = 0;
    _hessian(3, 0) = 0;
    _hessian(3, 1) = 0;
    _hessian(3, 2) = 0;
    _hessian(3, 3) = 0;
    _hessian(3, 4) = 0;
    _hessian(3, 5) = 0;
    _hessian(4, 0) = 0;
    _hessian(4, 1) = 0;
    _hessian(4, 2) = 0;
    _hessian(4, 3) = 0;
    _hessian(4, 4) = 0;
    _hessian(4, 5) = 0;
    _hessian(5, 0) = 0;
    _hessian(5, 1) = 0;
    _hessian(5, 2) = 0;
    _hessian(5, 3) = 0;
    _hessian(5, 4) = 0;
    _hessian(5, 5) = 0;
  }

  if (rhs != nullptr) {
    Eigen::Matrix<Scalar, 6, 1>& _rhs = (*rhs);

    _rhs(0, 0) = _tmp106 * _tmp38 + _tmp32 * _tmp72 + _tmp36 * _tmp96;
    _rhs(1, 0) = _tmp107 * _tmp38 + _tmp32 * _tmp80 + _tmp36 * _tmp99;
    _rhs(2, 0) = _tmp102 * _tmp36 + _tmp109 * _tmp38 + _tmp32 * _tmp89;
    _rhs(3, 0) = 0;
    _rhs(4, 0) = 0;
    _rhs(5, 0) = 0;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
