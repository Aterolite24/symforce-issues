// -----------------------------------------------------------------------------
// This file was autogenerated by symforce. Do NOT modify by hand.
// -----------------------------------------------------------------------------
#pragma once

#include <Eigen/Dense>
#include <geo/pose3.h>
#include <geo/rot3.h>

namespace sym {

/**
 * Residual that penalizes the difference between a value and prior (desired / measured value).
 *
 * In vector space terms that would be:
 *     prior - value
 *
 * In lie group terms:
 *     to_tangent(compose(inverse(value), prior))
 *
 * Args:
 *     sqrt_info: Square root information matrix to whiten residual. This can be computed from
 *                a covariance matrix as the cholesky decomposition of the inverse. In the case
 *                of a diagonal it will contain 1/sigma values. Must match the tangent dim.
 *
 */
template <typename Scalar>
void PriorFactorPose3Rotation(const geo::Pose3<Scalar>& value, const geo::Rot3<Scalar>& prior,
                              const Eigen::Matrix<Scalar, 3, 3>& sqrt_info, const Scalar epsilon,
                              Eigen::Matrix<Scalar, 3, 1>* const res = nullptr,
                              Eigen::Matrix<Scalar, 3, 6>* const jac = nullptr) {
  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _value = value.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _prior = prior.Data();

  // Intermediate terms (69)
  const Scalar _tmp0 = -_prior[0] * _value[1] + _prior[1] * _value[0] - _prior[2] * _value[3] +
                       _prior[3] * _value[2];
  const Scalar _tmp1 =
      _prior[0] * _value[0] + _prior[1] * _value[1] + _prior[2] * _value[2] + _prior[3] * _value[3];
  const Scalar _tmp2 = -epsilon + 1;
  const Scalar _tmp3 = std::min<Scalar>(_tmp1, _tmp2);
  const Scalar _tmp4 = epsilon - 1;
  const Scalar _tmp5 = std::max<Scalar>(_tmp3, _tmp4);
  const Scalar _tmp6 = -(_tmp5 * _tmp5) + 1;
  const Scalar _tmp7 = std::acos(_tmp5);
  const Scalar _tmp8 = 2 * _tmp7 / std::sqrt(_tmp6);
  const Scalar _tmp9 = _tmp0 * _tmp8;
  const Scalar _tmp10 =
      _prior[0] * _value[2] - _prior[1] * _value[3] - _prior[2] * _value[0] + _prior[3] * _value[1];
  const Scalar _tmp11 = _tmp10 * _tmp8;
  const Scalar _tmp12 = -_prior[0] * _value[3] - _prior[1] * _value[2] + _prior[2] * _value[1] +
                        _prior[3] * _value[0];
  const Scalar _tmp13 = _tmp12 * _tmp8;
  const Scalar _tmp14 = _tmp8 * sqrt_info(2, 2);
  const Scalar _tmp15 = _prior[0] * _tmp8;
  const Scalar _tmp16 = (1.0 / 2.0) * ((((-_tmp1 + _tmp2) > 0) - ((-_tmp1 + _tmp2) < 0)) + 1) *
                        ((((_tmp3 - _tmp4) > 0) - ((_tmp3 - _tmp4) < 0)) + 1);
  const Scalar _tmp17 = _tmp16 / _tmp6;
  const Scalar _tmp18 = _prior[3] * _tmp17;
  const Scalar _tmp19 = _tmp12 * sqrt_info(0, 0);
  const Scalar _tmp20 = _tmp16 * _tmp5 * _tmp7 / (_tmp6 * std::sqrt(_tmp6));
  const Scalar _tmp21 = _prior[3] * _tmp20;
  const Scalar _tmp22 = _tmp8 * sqrt_info(0, 1);
  const Scalar _tmp23 = _tmp0 * sqrt_info(0, 2);
  const Scalar _tmp24 = _prior[2] * _tmp8;
  const Scalar _tmp25 = _tmp10 * sqrt_info(0, 1);
  const Scalar _tmp26 = _tmp10 * _tmp18;
  const Scalar _tmp27 = -_prior[1] * _tmp22 - _tmp15 * sqrt_info(0, 0) - _tmp18 * _tmp19 -
                        _tmp18 * _tmp23 + _tmp19 * _tmp21 + _tmp21 * _tmp23 + _tmp21 * _tmp25 -
                        _tmp24 * sqrt_info(0, 2) - _tmp26 * sqrt_info(0, 1);
  const Scalar _tmp28 = (1.0 / 2.0) * _tmp27;
  const Scalar _tmp29 = _prior[2] * _tmp20;
  const Scalar _tmp30 = _prior[2] * _tmp17;
  const Scalar _tmp31 = _prior[1] * _tmp8;
  const Scalar _tmp32 = _prior[2] * sqrt_info(0, 1);
  const Scalar _tmp33 = _tmp10 * _tmp32;
  const Scalar _tmp34 = _prior[3] * _tmp8;
  const Scalar _tmp35 = _prior[0] * _tmp22 - _tmp17 * _tmp33 + _tmp19 * _tmp29 - _tmp19 * _tmp30 +
                        _tmp20 * _tmp33 + _tmp23 * _tmp29 - _tmp23 * _tmp30 -
                        _tmp31 * sqrt_info(0, 0) + _tmp34 * sqrt_info(0, 2);
  const Scalar _tmp36 = (1.0 / 2.0) * _value[1];
  const Scalar _tmp37 = _prior[1] * _tmp20;
  const Scalar _tmp38 = _prior[1] * _tmp17;
  const Scalar _tmp39 = _tmp0 * _tmp38;
  const Scalar _tmp40 = _prior[3] * _tmp22 - _tmp15 * sqrt_info(0, 2) + _tmp19 * _tmp37 -
                        _tmp19 * _tmp38 + _tmp23 * _tmp37 + _tmp24 * sqrt_info(0, 0) +
                        _tmp25 * _tmp37 - _tmp25 * _tmp38 - _tmp39 * sqrt_info(0, 2);
  const Scalar _tmp41 = (1.0 / 2.0) * _value[2];
  const Scalar _tmp42 = _prior[0] * _tmp20;
  const Scalar _tmp43 = _prior[0] * _tmp17;
  const Scalar _tmp44 = _tmp0 * _tmp43;
  const Scalar _tmp45 = _tmp19 * _tmp42 - _tmp19 * _tmp43 + _tmp23 * _tmp42 + _tmp25 * _tmp42 -
                        _tmp25 * _tmp43 + _tmp31 * sqrt_info(0, 2) - _tmp32 * _tmp8 +
                        _tmp34 * sqrt_info(0, 0) - _tmp44 * sqrt_info(0, 2);
  const Scalar _tmp46 = (1.0 / 2.0) * _value[3];
  const Scalar _tmp47 = (1.0 / 2.0) * _tmp40;
  const Scalar _tmp48 = (1.0 / 2.0) * _tmp35;
  const Scalar _tmp49 = _tmp12 * sqrt_info(1, 0);
  const Scalar _tmp50 = _tmp10 * sqrt_info(1, 1);
  const Scalar _tmp51 = _tmp0 * sqrt_info(1, 2);
  const Scalar _tmp52 = _tmp15 * sqrt_info(1, 1) + _tmp29 * _tmp49 + _tmp29 * _tmp50 +
                        _tmp29 * _tmp51 - _tmp30 * _tmp49 - _tmp30 * _tmp50 - _tmp30 * _tmp51 -
                        _tmp31 * sqrt_info(1, 0) + _tmp34 * sqrt_info(1, 2);
  const Scalar _tmp53 = -_tmp15 * sqrt_info(1, 2) + _tmp24 * sqrt_info(1, 0) +
                        _tmp34 * sqrt_info(1, 1) + _tmp37 * _tmp49 + _tmp37 * _tmp50 +
                        _tmp37 * _tmp51 - _tmp38 * _tmp49 - _tmp38 * _tmp50 - _tmp38 * _tmp51;
  const Scalar _tmp54 = -_tmp15 * sqrt_info(1, 0) - _tmp18 * _tmp49 - _tmp18 * _tmp50 -
                        _tmp18 * _tmp51 + _tmp21 * _tmp49 + _tmp21 * _tmp50 + _tmp21 * _tmp51 -
                        _tmp24 * sqrt_info(1, 2) - _tmp31 * sqrt_info(1, 1);
  const Scalar _tmp55 = (1.0 / 2.0) * _tmp54;
  const Scalar _tmp56 = -_tmp24 * sqrt_info(1, 1) + _tmp31 * sqrt_info(1, 2) +
                        _tmp34 * sqrt_info(1, 0) + _tmp42 * _tmp49 + _tmp42 * _tmp50 +
                        _tmp42 * _tmp51 - _tmp43 * _tmp49 - _tmp43 * _tmp50 - _tmp43 * _tmp51;
  const Scalar _tmp57 = (1.0 / 2.0) * _tmp52;
  const Scalar _tmp58 = (1.0 / 2.0) * _tmp53;
  const Scalar _tmp59 = _tmp12 * sqrt_info(2, 0);
  const Scalar _tmp60 = _tmp10 * sqrt_info(2, 1);
  const Scalar _tmp61 = _tmp0 * sqrt_info(2, 2);
  const Scalar _tmp62 = _tmp15 * sqrt_info(2, 1) + _tmp29 * _tmp59 + _tmp29 * _tmp60 +
                        _tmp29 * _tmp61 - _tmp30 * _tmp59 - _tmp30 * _tmp60 - _tmp30 * _tmp61 -
                        _tmp31 * sqrt_info(2, 0) + _tmp34 * sqrt_info(2, 2);
  const Scalar _tmp63 = -_tmp15 * sqrt_info(2, 2) + _tmp24 * sqrt_info(2, 0) +
                        _tmp34 * sqrt_info(2, 1) + _tmp37 * _tmp59 + _tmp37 * _tmp60 +
                        _tmp37 * _tmp61 - _tmp38 * _tmp59 - _tmp38 * _tmp60 -
                        _tmp39 * sqrt_info(2, 2);
  const Scalar _tmp64 = -_prior[2] * _tmp14 - _tmp15 * sqrt_info(2, 0) - _tmp18 * _tmp59 -
                        _tmp18 * _tmp61 + _tmp21 * _tmp59 + _tmp21 * _tmp60 + _tmp21 * _tmp61 -
                        _tmp26 * sqrt_info(2, 1) - _tmp31 * sqrt_info(2, 1);
  const Scalar _tmp65 = (1.0 / 2.0) * _tmp64;
  const Scalar _tmp66 = -_tmp24 * sqrt_info(2, 1) + _tmp31 * sqrt_info(2, 2) +
                        _tmp34 * sqrt_info(2, 0) + _tmp42 * _tmp59 + _tmp42 * _tmp60 +
                        _tmp42 * _tmp61 - _tmp43 * _tmp59 - _tmp43 * _tmp60 -
                        _tmp44 * sqrt_info(2, 2);
  const Scalar _tmp67 = (1.0 / 2.0) * _tmp62;
  const Scalar _tmp68 = (1.0 / 2.0) * _tmp63;

  // Output terms (2)
  if (res != nullptr) {
    Eigen::Matrix<Scalar, 3, 1>& _res = (*res);

    _res(0, 0) = _tmp11 * sqrt_info(0, 1) + _tmp13 * sqrt_info(0, 0) + _tmp9 * sqrt_info(0, 2);
    _res(1, 0) = _tmp11 * sqrt_info(1, 1) + _tmp13 * sqrt_info(1, 0) + _tmp9 * sqrt_info(1, 2);
    _res(2, 0) = _tmp0 * _tmp14 + _tmp11 * sqrt_info(2, 1) + _tmp13 * sqrt_info(2, 0);
  }

  if (jac != nullptr) {
    Eigen::Matrix<Scalar, 3, 6>& _jac = (*jac);

    _jac(0, 0) = -_tmp28 * _value[0] - _tmp35 * _tmp36 + _tmp40 * _tmp41 + _tmp45 * _tmp46;
    _jac(0, 1) = -_tmp27 * _tmp36 - _tmp41 * _tmp45 + _tmp47 * _value[3] + _tmp48 * _value[0];
    _jac(0, 2) = -_tmp28 * _value[2] + _tmp36 * _tmp45 - _tmp47 * _value[0] + _tmp48 * _value[3];
    _jac(0, 3) = 0;
    _jac(0, 4) = 0;
    _jac(0, 5) = 0;
    _jac(1, 0) = -_tmp36 * _tmp52 + _tmp41 * _tmp53 + _tmp46 * _tmp56 - _tmp55 * _value[0];
    _jac(1, 1) = -_tmp36 * _tmp54 - _tmp41 * _tmp56 + _tmp57 * _value[0] + _tmp58 * _value[3];
    _jac(1, 2) = _tmp36 * _tmp56 - _tmp55 * _value[2] + _tmp57 * _value[3] - _tmp58 * _value[0];
    _jac(1, 3) = 0;
    _jac(1, 4) = 0;
    _jac(1, 5) = 0;
    _jac(2, 0) = -_tmp36 * _tmp62 + _tmp41 * _tmp63 + _tmp46 * _tmp66 - _tmp65 * _value[0];
    _jac(2, 1) = -_tmp36 * _tmp64 - _tmp41 * _tmp66 + _tmp67 * _value[0] + _tmp68 * _value[3];
    _jac(2, 2) = _tmp36 * _tmp66 - _tmp65 * _value[2] + _tmp67 * _value[3] - _tmp68 * _value[0];
    _jac(2, 3) = 0;
    _jac(2, 4) = 0;
    _jac(2, 5) = 0;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
