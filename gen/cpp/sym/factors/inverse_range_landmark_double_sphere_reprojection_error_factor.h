// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     cpp_templates/function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/pose3.h>

namespace sym {

/**
 * Return the 2dof residual of reprojecting the landmark into the target camera and comparing
 * against the correspondence in the target camera.
 *
 * The landmark is specified as a pixel in the source camera and an inverse range; this means the
 * landmark is fixed in the source camera and always has residual 0 there (this 0 residual is not
 * returned, only the residual in the target camera is returned).
 *
 * The norm of the residual is whitened using the Barron noise model.  Whitening each component of
 * the reprojection error separately would result in rejecting individual components as outliers.
 * Instead, we minimize the whitened norm of the full reprojection error for each point.  See the
 * docstring for `NoiseModel.whiten_norm` for more information on this, and the docstring of
 * `BarronNoiseModel` for more information on the noise model.
 *
 * Args:
 *     source_pose: The pose of the source camera
 *     source_calibration_storage: The storage vector of the source camera calibration
 *     target_pose: The pose of the target camera
 *     target_calibration_storage: The storage vector of the target camera calibration
 *     source_inverse_range: The inverse range of the landmark in the source camera
 *     source_pixel: The location of the landmark in the source camera
 *     target_pixel: The location of the correspondence in the target camera
 *     weight: The weight of the factor
 *     gnc_mu: The mu convexity parameter for the Barron noise model
 *     gnc_scale: The scale parameter for the Barron noise model
 *     epsilon: Small positive value
 *     camera_model_class: The subclass of CameraCal to use as the camera model
 *
 * Outputs:
 *     res: 2dof residual of the reprojection
 *     jacobian: (2x13) jacobian of res wrt args source_pose (6), target_pose (6),
 *               source_inverse_range (1)
 *     hessian: (13x13) Gauss-Newton hessian for args source_pose (6), target_pose (6),
 *              source_inverse_range (1)
 *     rhs: (13x1) Gauss-Newton rhs for args source_pose (6), target_pose (6), source_inverse_range
 *          (1)
 */
template <typename Scalar>
void InverseRangeLandmarkDoubleSphereReprojectionErrorFactor(
    const sym::Pose3<Scalar>& source_pose,
    const Eigen::Matrix<Scalar, 6, 1>& source_calibration_storage,
    const sym::Pose3<Scalar>& target_pose,
    const Eigen::Matrix<Scalar, 6, 1>& target_calibration_storage,
    const Scalar source_inverse_range, const Eigen::Matrix<Scalar, 2, 1>& source_pixel,
    const Eigen::Matrix<Scalar, 2, 1>& target_pixel, const Scalar weight, const Scalar gnc_mu,
    const Scalar gnc_scale, const Scalar epsilon, Eigen::Matrix<Scalar, 2, 1>* const res = nullptr,
    Eigen::Matrix<Scalar, 2, 13>* const jacobian = nullptr,
    Eigen::Matrix<Scalar, 13, 13>* const hessian = nullptr,
    Eigen::Matrix<Scalar, 13, 1>* const rhs = nullptr) {
  // Total ops: 1304

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _source_pose = source_pose.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _target_pose = target_pose.Data();

  // Intermediate terms (323)
  const Scalar _tmp0 = std::pow(_target_pose[1], Scalar(2));
  const Scalar _tmp1 = -2 * _tmp0;
  const Scalar _tmp2 = std::pow(_target_pose[2], Scalar(2));
  const Scalar _tmp3 = -2 * _tmp2;
  const Scalar _tmp4 = _tmp1 + _tmp3 + 1;
  const Scalar _tmp5 = 2 * _source_pose[2];
  const Scalar _tmp6 = _source_pose[0] * _tmp5;
  const Scalar _tmp7 = 2 * _source_pose[1];
  const Scalar _tmp8 = _source_pose[3] * _tmp7;
  const Scalar _tmp9 = _tmp6 + _tmp8;
  const Scalar _tmp10 = -source_calibration_storage(3, 0) + source_pixel(1, 0);
  const Scalar _tmp11 =
      std::pow(_tmp10, Scalar(2)) / std::pow(source_calibration_storage(1, 0), Scalar(2));
  const Scalar _tmp12 = -source_calibration_storage(2, 0) + source_pixel(0, 0);
  const Scalar _tmp13 =
      std::pow(_tmp12, Scalar(2)) / std::pow(source_calibration_storage(0, 0), Scalar(2));
  const Scalar _tmp14 = _tmp11 + _tmp13;
  const Scalar _tmp15 = -_tmp14 * std::pow(source_calibration_storage(5, 0), Scalar(2)) + 1;
  const Scalar _tmp16 = -_tmp14 * (2 * source_calibration_storage(5, 0) - 1) + 1;
  const Scalar _tmp17 =
      source_calibration_storage(5, 0) * std::sqrt(Scalar(std::max<Scalar>(_tmp16, epsilon))) -
      source_calibration_storage(5, 0) + 1;
  const Scalar _tmp18 =
      _tmp17 + epsilon * (2 * std::min<Scalar>(0, (((_tmp17) > 0) - ((_tmp17) < 0))) + 1);
  const Scalar _tmp19 = _tmp15 / _tmp18;
  const Scalar _tmp20 = std::pow(_tmp15, Scalar(2)) / std::pow(_tmp18, Scalar(2));
  const Scalar _tmp21 = _tmp14 + _tmp20;
  const Scalar _tmp22 =
      _tmp21 + epsilon * (2 * std::min<Scalar>(0, (((_tmp21) > 0) - ((_tmp21) < 0))) + 1);
  const Scalar _tmp23 =
      _tmp14 * (1 - std::pow(source_calibration_storage(4, 0), Scalar(2))) + _tmp20;
  const Scalar _tmp24 = _tmp19 * source_calibration_storage(4, 0) +
                        std::sqrt(Scalar(std::max<Scalar>(_tmp23, epsilon)));
  const Scalar _tmp25 = _tmp24 / _tmp22;
  const Scalar _tmp26 = _tmp19 * _tmp25 - source_calibration_storage(4, 0);
  const Scalar _tmp27 = std::pow(_tmp24, Scalar(2)) / std::pow(_tmp22, Scalar(2));
  const Scalar _tmp28 =
      std::pow(Scalar(_tmp11 * _tmp27 + _tmp13 * _tmp27 + std::pow(_tmp26, Scalar(2))),
               Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp29 = _tmp26 * _tmp28;
  const Scalar _tmp30 = _source_pose[0] * _tmp7;
  const Scalar _tmp31 = _source_pose[3] * _tmp5;
  const Scalar _tmp32 = -_tmp31;
  const Scalar _tmp33 = _tmp30 + _tmp32;
  const Scalar _tmp34 = _tmp25 * _tmp28;
  const Scalar _tmp35 = _tmp10 * _tmp34 / source_calibration_storage(1, 0);
  const Scalar _tmp36 = std::pow(_source_pose[1], Scalar(2));
  const Scalar _tmp37 = -2 * _tmp36;
  const Scalar _tmp38 = std::pow(_source_pose[2], Scalar(2));
  const Scalar _tmp39 = 1 - 2 * _tmp38;
  const Scalar _tmp40 = _tmp12 * _tmp34 / source_calibration_storage(0, 0);
  const Scalar _tmp41 = _source_pose[4] - _target_pose[4];
  const Scalar _tmp42 =
      _tmp29 * _tmp9 + _tmp33 * _tmp35 + _tmp40 * (_tmp37 + _tmp39) + _tmp41 * source_inverse_range;
  const Scalar _tmp43 = 2 * _target_pose[2] * _target_pose[3];
  const Scalar _tmp44 = 2 * _target_pose[1];
  const Scalar _tmp45 = _target_pose[0] * _tmp44;
  const Scalar _tmp46 = _tmp43 + _tmp45;
  const Scalar _tmp47 = 2 * _source_pose[0] * _source_pose[3];
  const Scalar _tmp48 = -_tmp47;
  const Scalar _tmp49 = _source_pose[2] * _tmp7;
  const Scalar _tmp50 = _tmp48 + _tmp49;
  const Scalar _tmp51 = _tmp30 + _tmp31;
  const Scalar _tmp52 = _source_pose[5] - _target_pose[5];
  const Scalar _tmp53 = std::pow(_source_pose[0], Scalar(2));
  const Scalar _tmp54 = -2 * _tmp53;
  const Scalar _tmp55 = _tmp29 * _tmp50 + _tmp35 * (_tmp39 + _tmp54) + _tmp40 * _tmp51 +
                        _tmp52 * source_inverse_range;
  const Scalar _tmp56 = 2 * _target_pose[0];
  const Scalar _tmp57 = _target_pose[2] * _tmp56;
  const Scalar _tmp58 = _target_pose[3] * _tmp44;
  const Scalar _tmp59 = -_tmp58;
  const Scalar _tmp60 = _tmp57 + _tmp59;
  const Scalar _tmp61 = -_tmp8;
  const Scalar _tmp62 = _tmp6 + _tmp61;
  const Scalar _tmp63 = _tmp47 + _tmp49;
  const Scalar _tmp64 = _source_pose[6] - _target_pose[6];
  const Scalar _tmp65 = _tmp29 * (_tmp37 + _tmp54 + 1) + _tmp35 * _tmp63 + _tmp40 * _tmp62 +
                        _tmp64 * source_inverse_range;
  const Scalar _tmp66 = _tmp46 * _tmp55 + _tmp60 * _tmp65;
  const Scalar _tmp67 = _tmp4 * _tmp42 + _tmp66;
  const Scalar _tmp68 =
      std::min<Scalar>(0, (((target_calibration_storage(5, 0) + Scalar(-0.5)) > 0) -
                           ((target_calibration_storage(5, 0) + Scalar(-0.5)) < 0)));
  const Scalar _tmp69 = 2 * _tmp68;
  const Scalar _tmp70 = -epsilon * (_tmp69 + 1) + target_calibration_storage(5, 0);
  const Scalar _tmp71 = -_tmp70;
  const Scalar _tmp72 = _tmp71 + 1;
  const Scalar _tmp73 = std::pow(_target_pose[0], Scalar(2));
  const Scalar _tmp74 = 1 - 2 * _tmp73;
  const Scalar _tmp75 = _tmp1 + _tmp74;
  const Scalar _tmp76 = _target_pose[2] * _tmp44;
  const Scalar _tmp77 = _target_pose[3] * _tmp56;
  const Scalar _tmp78 = -_tmp77;
  const Scalar _tmp79 = _tmp76 + _tmp78;
  const Scalar _tmp80 = _tmp57 + _tmp58;
  const Scalar _tmp81 = _tmp42 * _tmp80 + _tmp55 * _tmp79;
  const Scalar _tmp82 = _tmp65 * _tmp75 + _tmp81;
  const Scalar _tmp83 = _tmp3 + _tmp74;
  const Scalar _tmp84 = _tmp76 + _tmp77;
  const Scalar _tmp85 = -_tmp43;
  const Scalar _tmp86 = _tmp45 + _tmp85;
  const Scalar _tmp87 = _tmp42 * _tmp86 + _tmp65 * _tmp84;
  const Scalar _tmp88 = _tmp55 * _tmp83 + _tmp87;
  const Scalar _tmp89 =
      std::pow(_tmp67, Scalar(2)) + std::pow(_tmp88, Scalar(2)) + std::pow(epsilon, Scalar(2));
  const Scalar _tmp90 = std::sqrt(Scalar(std::pow(_tmp82, Scalar(2)) + _tmp89));
  const Scalar _tmp91 = _tmp82 + _tmp90 * target_calibration_storage(4, 0);
  const Scalar _tmp92 = std::sqrt(Scalar(_tmp89 + std::pow(_tmp91, Scalar(2))));
  const Scalar _tmp93 = _tmp70 * _tmp92 + _tmp72 * _tmp91;
  const Scalar _tmp94 = std::fabs(_tmp93);
  const Scalar _tmp95 = std::max<Scalar>(_tmp94, epsilon);
  const Scalar _tmp96 = Scalar(1.0) / (_tmp95);
  const Scalar _tmp97 = _tmp96 * target_calibration_storage(0, 0);
  const Scalar _tmp98 = _tmp67 * _tmp97 + target_calibration_storage(2, 0) - target_pixel(0, 0);
  const Scalar _tmp99 = _tmp96 * target_calibration_storage(1, 0);
  const Scalar _tmp100 = _tmp88 * _tmp99 + target_calibration_storage(3, 0) - target_pixel(1, 0);
  const Scalar _tmp101 = std::pow(_tmp100, Scalar(2)) + std::pow(_tmp98, Scalar(2)) + epsilon;
  const Scalar _tmp102 = std::pow(_tmp101, Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp103 = std::pow(target_calibration_storage(4, 0), Scalar(2));
  const Scalar _tmp104 = (Scalar(1) / Scalar(2)) * _tmp69 + _tmp71 + 1;
  const Scalar _tmp105 = _tmp68 + _tmp70;
  const Scalar _tmp106 = std::pow(_tmp104, Scalar(2)) / std::pow(_tmp105, Scalar(2));
  const Scalar _tmp107 = _tmp103 * _tmp106 - _tmp103 + 1;
  const Scalar _tmp108 =
      std::sqrt(Scalar(
          weight * std::min<Scalar>(1 - std::max<Scalar>(0, -(((_tmp16) > 0) - ((_tmp16) < 0))),
                                    1 - std::max<Scalar>(0, -(((_tmp23) > 0) - ((_tmp23) < 0)))))) *
      std::sqrt(Scalar(std::max<Scalar>(
          0,
          std::min<Scalar>(
              std::max<Scalar>(
                  -(((target_calibration_storage(4, 0) - 1) > 0) -
                    ((target_calibration_storage(4, 0) - 1) < 0)),
                  1 - std::max<Scalar>(
                          0, -(((_tmp82 * target_calibration_storage(4, 0) + _tmp90) > 0) -
                               ((_tmp82 * target_calibration_storage(4, 0) + _tmp90) < 0)))),
              std::max<Scalar>(
                  -(((_tmp107) > 0) - ((_tmp107) < 0)),
                  1 - std::max<Scalar>(
                          0, -(((_tmp82 - _tmp90 * (-_tmp104 *
                                                        std::sqrt(Scalar(std::max<Scalar>(
                                                            _tmp107, std::sqrt(epsilon)))) /
                                                        _tmp105 +
                                                    _tmp106 * target_calibration_storage(4, 0) -
                                                    target_calibration_storage(4, 0))) > 0) -
                               ((_tmp82 - _tmp90 * (-_tmp104 *
                                                        std::sqrt(Scalar(std::max<Scalar>(
                                                            _tmp107, std::sqrt(epsilon)))) /
                                                        _tmp105 +
                                                    _tmp106 * target_calibration_storage(4, 0) -
                                                    target_calibration_storage(4, 0))) < 0))))))));
  const Scalar _tmp109 = Scalar(1.0) / (epsilon - gnc_mu + 1);
  const Scalar _tmp110 = epsilon + std::fabs(_tmp109);
  const Scalar _tmp111 = std::pow(gnc_scale, Scalar(-2));
  const Scalar _tmp112 = _tmp101 * _tmp111 / _tmp110 + 1;
  const Scalar _tmp113 = 2 - _tmp109;
  const Scalar _tmp114 =
      _tmp113 + epsilon * (2 * std::min<Scalar>(0, (((_tmp113) > 0) - ((_tmp113) < 0))) + 1);
  const Scalar _tmp115 = (Scalar(1) / Scalar(2)) * _tmp114;
  const Scalar _tmp116 = std::sqrt(Scalar(2)) *
                         std::sqrt(Scalar(_tmp110 * (std::pow(_tmp112, _tmp115) - 1) / _tmp114));
  const Scalar _tmp117 = _tmp108 * _tmp116;
  const Scalar _tmp118 = _tmp102 * _tmp117;
  const Scalar _tmp119 = _tmp118 * _tmp98;
  const Scalar _tmp120 = _tmp100 * _tmp118;
  const Scalar _tmp121 = -_tmp49;
  const Scalar _tmp122 = -_tmp53;
  const Scalar _tmp123 = _tmp122 + _tmp38;
  const Scalar _tmp124 = std::pow(_source_pose[3], Scalar(2));
  const Scalar _tmp125 = -_tmp36;
  const Scalar _tmp126 = _tmp124 + _tmp125;
  const Scalar _tmp127 = _tmp29 * (_tmp121 + _tmp48) + _tmp35 * (_tmp123 + _tmp126);
  const Scalar _tmp128 = -_tmp124;
  const Scalar _tmp129 = _tmp29 * (_tmp125 + _tmp128 + _tmp38 + _tmp53) + _tmp35 * _tmp50;
  const Scalar _tmp130 = -_tmp30;
  const Scalar _tmp131 = _tmp29 * (_tmp130 + _tmp31) + _tmp35 * _tmp9;
  const Scalar _tmp132 = _tmp127 * _tmp75 + _tmp129 * _tmp79 + _tmp131 * _tmp80;
  const Scalar _tmp133 = 2 * _tmp82;
  const Scalar _tmp134 = _tmp127 * _tmp60 + _tmp129 * _tmp46 + _tmp131 * _tmp4;
  const Scalar _tmp135 = 2 * _tmp67;
  const Scalar _tmp136 = _tmp127 * _tmp84 + _tmp129 * _tmp83 + _tmp131 * _tmp86;
  const Scalar _tmp137 = 2 * _tmp88;
  const Scalar _tmp138 = _tmp134 * _tmp135 + _tmp136 * _tmp137;
  const Scalar _tmp139 = target_calibration_storage(4, 0) / _tmp90;
  const Scalar _tmp140 = (Scalar(1) / Scalar(2)) * _tmp139;
  const Scalar _tmp141 = _tmp132 + _tmp140 * (_tmp132 * _tmp133 + _tmp138);
  const Scalar _tmp142 = 2 * _tmp91;
  const Scalar _tmp143 = (Scalar(1) / Scalar(2)) * _tmp70 / _tmp92;
  const Scalar _tmp144 = _tmp141 * _tmp72 + _tmp143 * (_tmp138 + _tmp141 * _tmp142);
  const Scalar _tmp145 = ((((_tmp94 - epsilon) > 0) - ((_tmp94 - epsilon) < 0)) + 1) *
                         (((_tmp93) > 0) - ((_tmp93) < 0)) / std::pow(_tmp95, Scalar(2));
  const Scalar _tmp146 = (Scalar(1) / Scalar(2)) * _tmp145;
  const Scalar _tmp147 = _tmp67 * target_calibration_storage(0, 0);
  const Scalar _tmp148 = _tmp146 * _tmp147;
  const Scalar _tmp149 = _tmp134 * _tmp97 - _tmp144 * _tmp148;
  const Scalar _tmp150 = _tmp88 * target_calibration_storage(1, 0);
  const Scalar _tmp151 = _tmp146 * _tmp150;
  const Scalar _tmp152 = _tmp136 * _tmp99 - _tmp144 * _tmp151;
  const Scalar _tmp153 = 2 * _tmp100;
  const Scalar _tmp154 = 2 * _tmp98;
  const Scalar _tmp155 = _tmp149 * _tmp154 + _tmp152 * _tmp153;
  const Scalar _tmp156 = _tmp117 / (_tmp101 * std::sqrt(_tmp101));
  const Scalar _tmp157 = (Scalar(1) / Scalar(2)) * _tmp98;
  const Scalar _tmp158 = _tmp156 * _tmp157;
  const Scalar _tmp159 =
      _tmp102 * _tmp108 * _tmp111 * std::pow(_tmp112, Scalar(_tmp115 - 1)) / _tmp116;
  const Scalar _tmp160 = _tmp157 * _tmp159;
  const Scalar _tmp161 = _tmp118 * _tmp149 - _tmp155 * _tmp158 + _tmp155 * _tmp160;
  const Scalar _tmp162 = _tmp29 * _tmp51 + _tmp40 * (_tmp121 + _tmp47);
  const Scalar _tmp163 = _tmp128 + _tmp36;
  const Scalar _tmp164 = -_tmp38;
  const Scalar _tmp165 = _tmp164 + _tmp53;
  const Scalar _tmp166 = _tmp29 * _tmp62 + _tmp40 * (_tmp163 + _tmp165);
  const Scalar _tmp167 = -_tmp6;
  const Scalar _tmp168 = _tmp29 * (_tmp126 + _tmp165) + _tmp40 * (_tmp167 + _tmp61);
  const Scalar _tmp169 = _tmp162 * _tmp79 + _tmp166 * _tmp75 + _tmp168 * _tmp80;
  const Scalar _tmp170 = _tmp162 * _tmp46 + _tmp166 * _tmp60 + _tmp168 * _tmp4;
  const Scalar _tmp171 = _tmp162 * _tmp83 + _tmp166 * _tmp84 + _tmp168 * _tmp86;
  const Scalar _tmp172 = _tmp135 * _tmp170 + _tmp137 * _tmp171;
  const Scalar _tmp173 = _tmp140 * (_tmp133 * _tmp169 + _tmp172) + _tmp169;
  const Scalar _tmp174 = _tmp143 * (_tmp142 * _tmp173 + _tmp172) + _tmp173 * _tmp72;
  const Scalar _tmp175 = -_tmp151 * _tmp174 + _tmp171 * _tmp99;
  const Scalar _tmp176 = -_tmp148 * _tmp174 + _tmp170 * _tmp97;
  const Scalar _tmp177 = _tmp153 * _tmp175 + _tmp154 * _tmp176;
  const Scalar _tmp178 = _tmp118 * _tmp176 - _tmp158 * _tmp177 + _tmp160 * _tmp177;
  const Scalar _tmp179 = _tmp33 * _tmp40 + _tmp35 * (_tmp123 + _tmp163);
  const Scalar _tmp180 = _tmp35 * (_tmp167 + _tmp8) + _tmp40 * _tmp63;
  const Scalar _tmp181 =
      _tmp35 * (_tmp130 + _tmp32) + _tmp40 * (_tmp122 + _tmp124 + _tmp164 + _tmp36);
  const Scalar _tmp182 = _tmp179 * _tmp86 + _tmp180 * _tmp84 + _tmp181 * _tmp83;
  const Scalar _tmp183 = _tmp179 * _tmp80 + _tmp180 * _tmp75 + _tmp181 * _tmp79;
  const Scalar _tmp184 = _tmp179 * _tmp4 + _tmp180 * _tmp60 + _tmp181 * _tmp46;
  const Scalar _tmp185 = _tmp135 * _tmp184 + _tmp137 * _tmp182;
  const Scalar _tmp186 = _tmp140 * (_tmp133 * _tmp183 + _tmp185) + _tmp183;
  const Scalar _tmp187 = _tmp143 * (_tmp142 * _tmp186 + _tmp185) + _tmp186 * _tmp72;
  const Scalar _tmp188 = -_tmp151 * _tmp187 + _tmp182 * _tmp99;
  const Scalar _tmp189 = -_tmp148 * _tmp187 + _tmp184 * _tmp97;
  const Scalar _tmp190 = _tmp153 * _tmp188 + _tmp154 * _tmp189;
  const Scalar _tmp191 = _tmp118 * _tmp189 - _tmp158 * _tmp190 + _tmp160 * _tmp190;
  const Scalar _tmp192 = _tmp99 * source_inverse_range;
  const Scalar _tmp193 = _tmp192 * _tmp86;
  const Scalar _tmp194 = _tmp80 * source_inverse_range;
  const Scalar _tmp195 = _tmp133 * _tmp194;
  const Scalar _tmp196 = _tmp135 * source_inverse_range;
  const Scalar _tmp197 = _tmp196 * _tmp4;
  const Scalar _tmp198 = _tmp137 * source_inverse_range;
  const Scalar _tmp199 = _tmp198 * _tmp86;
  const Scalar _tmp200 = _tmp197 + _tmp199;
  const Scalar _tmp201 = _tmp140 * (_tmp195 + _tmp200) + _tmp194;
  const Scalar _tmp202 = _tmp143 * (_tmp142 * _tmp201 + _tmp200) + _tmp201 * _tmp72;
  const Scalar _tmp203 = -_tmp151 * _tmp202 + _tmp193;
  const Scalar _tmp204 = _tmp97 * source_inverse_range;
  const Scalar _tmp205 = _tmp204 * _tmp4;
  const Scalar _tmp206 = -_tmp148 * _tmp202 + _tmp205;
  const Scalar _tmp207 = _tmp153 * _tmp203 + _tmp154 * _tmp206;
  const Scalar _tmp208 = _tmp156 * _tmp207;
  const Scalar _tmp209 = _tmp118 * _tmp206 - _tmp157 * _tmp208 + _tmp160 * _tmp207;
  const Scalar _tmp210 = _tmp79 * source_inverse_range;
  const Scalar _tmp211 = _tmp133 * _tmp210;
  const Scalar _tmp212 = _tmp83 * source_inverse_range;
  const Scalar _tmp213 = _tmp137 * _tmp212;
  const Scalar _tmp214 = _tmp46 * source_inverse_range;
  const Scalar _tmp215 = _tmp135 * _tmp214;
  const Scalar _tmp216 = _tmp213 + _tmp215;
  const Scalar _tmp217 = _tmp140 * (_tmp211 + _tmp216) + _tmp210;
  const Scalar _tmp218 = _tmp146 * (_tmp143 * (_tmp142 * _tmp217 + _tmp216) + _tmp217 * _tmp72);
  const Scalar _tmp219 = _tmp212 * _tmp99;
  const Scalar _tmp220 = -_tmp150 * _tmp218 + _tmp219;
  const Scalar _tmp221 = _tmp214 * _tmp97;
  const Scalar _tmp222 = -_tmp147 * _tmp218 + _tmp221;
  const Scalar _tmp223 = _tmp153 * _tmp220 + _tmp154 * _tmp222;
  const Scalar _tmp224 = _tmp118 * _tmp222 - _tmp158 * _tmp223 + _tmp160 * _tmp223;
  const Scalar _tmp225 = _tmp75 * source_inverse_range;
  const Scalar _tmp226 = _tmp133 * _tmp225;
  const Scalar _tmp227 = _tmp198 * _tmp84;
  const Scalar _tmp228 = _tmp196 * _tmp60;
  const Scalar _tmp229 = _tmp227 + _tmp228;
  const Scalar _tmp230 = _tmp140 * (_tmp226 + _tmp229) + _tmp225;
  const Scalar _tmp231 = _tmp143 * (_tmp142 * _tmp230 + _tmp229) + _tmp230 * _tmp72;
  const Scalar _tmp232 = _tmp204 * _tmp60;
  const Scalar _tmp233 = -_tmp148 * _tmp231 + _tmp232;
  const Scalar _tmp234 = _tmp192 * _tmp84;
  const Scalar _tmp235 = -_tmp151 * _tmp231 + _tmp234;
  const Scalar _tmp236 = _tmp153 * _tmp235 + _tmp154 * _tmp233;
  const Scalar _tmp237 = _tmp156 * _tmp236;
  const Scalar _tmp238 = _tmp118 * _tmp233 - _tmp157 * _tmp237 + _tmp160 * _tmp236;
  const Scalar _tmp239 = -_tmp0;
  const Scalar _tmp240 = _tmp2 + _tmp239;
  const Scalar _tmp241 = std::pow(_target_pose[3], Scalar(2));
  const Scalar _tmp242 = -_tmp241;
  const Scalar _tmp243 = _tmp242 + _tmp73;
  const Scalar _tmp244 = -_tmp76;
  const Scalar _tmp245 = -_tmp45;
  const Scalar _tmp246 =
      _tmp42 * (_tmp245 + _tmp43) + _tmp55 * (_tmp240 + _tmp243) + _tmp65 * (_tmp244 + _tmp78);
  const Scalar _tmp247 = -_tmp73;
  const Scalar _tmp248 = _tmp241 + _tmp247;
  const Scalar _tmp249 = _tmp65 * (_tmp240 + _tmp248) + _tmp81;
  const Scalar _tmp250 = _tmp137 * _tmp249;
  const Scalar _tmp251 = _tmp140 * (_tmp133 * _tmp246 + _tmp250) + _tmp246;
  const Scalar _tmp252 = _tmp143 * (_tmp142 * _tmp251 + _tmp250) + _tmp251 * _tmp72;
  const Scalar _tmp253 = -_tmp151 * _tmp252 + _tmp249 * _tmp99;
  const Scalar _tmp254 = -_tmp145 * _tmp147 * _tmp252 * _tmp98 + _tmp153 * _tmp253;
  const Scalar _tmp255 = -_tmp118 * _tmp148 * _tmp252 - _tmp158 * _tmp254 + _tmp160 * _tmp254;
  const Scalar _tmp256 = -_tmp2;
  const Scalar _tmp257 = _tmp0 + _tmp256;
  const Scalar _tmp258 = -_tmp57;
  const Scalar _tmp259 =
      _tmp42 * (_tmp258 + _tmp59) + _tmp55 * (_tmp244 + _tmp77) + _tmp65 * (_tmp243 + _tmp257);
  const Scalar _tmp260 = _tmp135 * _tmp259;
  const Scalar _tmp261 = _tmp42 * (_tmp239 + _tmp241 + _tmp256 + _tmp73) + _tmp66;
  const Scalar _tmp262 = _tmp140 * (_tmp133 * _tmp261 + _tmp260) + _tmp261;
  const Scalar _tmp263 = _tmp143 * (_tmp142 * _tmp262 + _tmp260) + _tmp262 * _tmp72;
  const Scalar _tmp264 = -_tmp148 * _tmp263 + _tmp259 * _tmp97;
  const Scalar _tmp265 = -_tmp100 * _tmp145 * _tmp150 * _tmp263 + _tmp154 * _tmp264;
  const Scalar _tmp266 = _tmp118 * _tmp264 - _tmp158 * _tmp265 + _tmp160 * _tmp265;
  const Scalar _tmp267 = _tmp55 * (_tmp248 + _tmp257) + _tmp87;
  const Scalar _tmp268 = _tmp42 * (_tmp0 + _tmp2 + _tmp242 + _tmp247) +
                         _tmp55 * (_tmp245 + _tmp85) + _tmp65 * (_tmp258 + _tmp58);
  const Scalar _tmp269 = _tmp135 * _tmp267 + _tmp137 * _tmp268;
  const Scalar _tmp270 =
      _tmp146 * (_tmp140 * _tmp269 * _tmp72 + _tmp143 * (_tmp139 * _tmp269 * _tmp91 + _tmp269));
  const Scalar _tmp271 = -_tmp147 * _tmp270 + _tmp267 * _tmp97;
  const Scalar _tmp272 = -_tmp150 * _tmp270 + _tmp268 * _tmp99;
  const Scalar _tmp273 = _tmp153 * _tmp272 + _tmp154 * _tmp271;
  const Scalar _tmp274 = _tmp118 * _tmp271 - _tmp158 * _tmp273 + _tmp160 * _tmp273;
  const Scalar _tmp275 = -_tmp197 - _tmp199;
  const Scalar _tmp276 = _tmp140 * (-_tmp195 + _tmp275) - _tmp194;
  const Scalar _tmp277 = _tmp143 * (_tmp142 * _tmp276 + _tmp275) + _tmp276 * _tmp72;
  const Scalar _tmp278 = -_tmp148 * _tmp277 - _tmp205;
  const Scalar _tmp279 = -_tmp151 * _tmp277 - _tmp193;
  const Scalar _tmp280 = _tmp153 * _tmp279 + _tmp154 * _tmp278;
  const Scalar _tmp281 = _tmp118 * _tmp278 - _tmp158 * _tmp280 + _tmp160 * _tmp280;
  const Scalar _tmp282 = -_tmp213 - _tmp215;
  const Scalar _tmp283 = _tmp140 * (-_tmp211 + _tmp282) - _tmp210;
  const Scalar _tmp284 = _tmp143 * (_tmp142 * _tmp283 + _tmp282) + _tmp283 * _tmp72;
  const Scalar _tmp285 = -_tmp148 * _tmp284 - _tmp221;
  const Scalar _tmp286 = -_tmp151 * _tmp284 - _tmp219;
  const Scalar _tmp287 = _tmp153 * _tmp286 + _tmp154 * _tmp285;
  const Scalar _tmp288 = _tmp118 * _tmp285 - _tmp158 * _tmp287 + _tmp160 * _tmp287;
  const Scalar _tmp289 = -_tmp227 - _tmp228;
  const Scalar _tmp290 = _tmp140 * (-_tmp226 + _tmp289) - _tmp225;
  const Scalar _tmp291 = _tmp143 * (_tmp142 * _tmp290 + _tmp289) + _tmp290 * _tmp72;
  const Scalar _tmp292 = -_tmp148 * _tmp291 - _tmp232;
  const Scalar _tmp293 = -_tmp151 * _tmp291 - _tmp234;
  const Scalar _tmp294 = _tmp153 * _tmp293 + _tmp154 * _tmp292;
  const Scalar _tmp295 = _tmp118 * _tmp292 - _tmp158 * _tmp294 + _tmp160 * _tmp294;
  const Scalar _tmp296 = _tmp41 * _tmp86 + _tmp52 * _tmp83 + _tmp64 * _tmp84;
  const Scalar _tmp297 = _tmp41 * _tmp80 + _tmp52 * _tmp79 + _tmp64 * _tmp75;
  const Scalar _tmp298 = _tmp4 * _tmp41 + _tmp46 * _tmp52 + _tmp60 * _tmp64;
  const Scalar _tmp299 = _tmp135 * _tmp298 + _tmp137 * _tmp296;
  const Scalar _tmp300 = _tmp140 * (_tmp133 * _tmp297 + _tmp299) + _tmp297;
  const Scalar _tmp301 = _tmp143 * (_tmp142 * _tmp300 + _tmp299) + _tmp300 * _tmp72;
  const Scalar _tmp302 = -_tmp151 * _tmp301 + _tmp296 * _tmp99;
  const Scalar _tmp303 = -_tmp148 * _tmp301 + _tmp298 * _tmp97;
  const Scalar _tmp304 = _tmp153 * _tmp302 + _tmp154 * _tmp303;
  const Scalar _tmp305 = _tmp118 * _tmp303 - _tmp158 * _tmp304 + _tmp160 * _tmp304;
  const Scalar _tmp306 = (Scalar(1) / Scalar(2)) * _tmp100;
  const Scalar _tmp307 = _tmp156 * _tmp306;
  const Scalar _tmp308 = _tmp159 * _tmp306;
  const Scalar _tmp309 = _tmp118 * _tmp152 - _tmp155 * _tmp307 + _tmp155 * _tmp308;
  const Scalar _tmp310 = _tmp118 * _tmp175 - _tmp177 * _tmp307 + _tmp177 * _tmp308;
  const Scalar _tmp311 = _tmp118 * _tmp188 - _tmp190 * _tmp307 + _tmp190 * _tmp308;
  const Scalar _tmp312 = _tmp118 * _tmp203 + _tmp207 * _tmp308 - _tmp208 * _tmp306;
  const Scalar _tmp313 = _tmp118 * _tmp220 - _tmp223 * _tmp307 + _tmp223 * _tmp308;
  const Scalar _tmp314 = _tmp118 * _tmp235 + _tmp236 * _tmp308 - _tmp237 * _tmp306;
  const Scalar _tmp315 = _tmp118 * _tmp253 - _tmp254 * _tmp307 + _tmp254 * _tmp308;
  const Scalar _tmp316 = _tmp265 * _tmp306;
  const Scalar _tmp317 = -_tmp118 * _tmp151 * _tmp263 - _tmp156 * _tmp316 + _tmp159 * _tmp316;
  const Scalar _tmp318 = _tmp118 * _tmp272 - _tmp273 * _tmp307 + _tmp273 * _tmp308;
  const Scalar _tmp319 = _tmp118 * _tmp279 - _tmp280 * _tmp307 + _tmp280 * _tmp308;
  const Scalar _tmp320 = _tmp118 * _tmp286 - _tmp287 * _tmp307 + _tmp287 * _tmp308;
  const Scalar _tmp321 = _tmp118 * _tmp293 - _tmp294 * _tmp307 + _tmp294 * _tmp308;
  const Scalar _tmp322 = _tmp118 * _tmp302 - _tmp304 * _tmp307 + _tmp304 * _tmp308;

  // Output terms (4)
  if (res != nullptr) {
    Eigen::Matrix<Scalar, 2, 1>& _res = (*res);

    _res(0, 0) = _tmp119;
    _res(1, 0) = _tmp120;
  }

  if (jacobian != nullptr) {
    Eigen::Matrix<Scalar, 2, 13>& _jacobian = (*jacobian);

    _jacobian(0, 0) = _tmp161;
    _jacobian(0, 1) = _tmp178;
    _jacobian(0, 2) = _tmp191;
    _jacobian(0, 3) = _tmp209;
    _jacobian(0, 4) = _tmp224;
    _jacobian(0, 5) = _tmp238;
    _jacobian(0, 6) = _tmp255;
    _jacobian(0, 7) = _tmp266;
    _jacobian(0, 8) = _tmp274;
    _jacobian(0, 9) = _tmp281;
    _jacobian(0, 10) = _tmp288;
    _jacobian(0, 11) = _tmp295;
    _jacobian(0, 12) = _tmp305;
    _jacobian(1, 0) = _tmp309;
    _jacobian(1, 1) = _tmp310;
    _jacobian(1, 2) = _tmp311;
    _jacobian(1, 3) = _tmp312;
    _jacobian(1, 4) = _tmp313;
    _jacobian(1, 5) = _tmp314;
    _jacobian(1, 6) = _tmp315;
    _jacobian(1, 7) = _tmp317;
    _jacobian(1, 8) = _tmp318;
    _jacobian(1, 9) = _tmp319;
    _jacobian(1, 10) = _tmp320;
    _jacobian(1, 11) = _tmp321;
    _jacobian(1, 12) = _tmp322;
  }

  if (hessian != nullptr) {
    Eigen::Matrix<Scalar, 13, 13>& _hessian = (*hessian);

    _hessian(0, 0) = std::pow(_tmp161, Scalar(2)) + std::pow(_tmp309, Scalar(2));
    _hessian(0, 1) = 0;
    _hessian(0, 2) = 0;
    _hessian(0, 3) = 0;
    _hessian(0, 4) = 0;
    _hessian(0, 5) = 0;
    _hessian(0, 6) = 0;
    _hessian(0, 7) = 0;
    _hessian(0, 8) = 0;
    _hessian(0, 9) = 0;
    _hessian(0, 10) = 0;
    _hessian(0, 11) = 0;
    _hessian(0, 12) = 0;
    _hessian(1, 0) = _tmp161 * _tmp178 + _tmp309 * _tmp310;
    _hessian(1, 1) = std::pow(_tmp178, Scalar(2)) + std::pow(_tmp310, Scalar(2));
    _hessian(1, 2) = 0;
    _hessian(1, 3) = 0;
    _hessian(1, 4) = 0;
    _hessian(1, 5) = 0;
    _hessian(1, 6) = 0;
    _hessian(1, 7) = 0;
    _hessian(1, 8) = 0;
    _hessian(1, 9) = 0;
    _hessian(1, 10) = 0;
    _hessian(1, 11) = 0;
    _hessian(1, 12) = 0;
    _hessian(2, 0) = _tmp161 * _tmp191 + _tmp309 * _tmp311;
    _hessian(2, 1) = _tmp178 * _tmp191 + _tmp310 * _tmp311;
    _hessian(2, 2) = std::pow(_tmp191, Scalar(2)) + std::pow(_tmp311, Scalar(2));
    _hessian(2, 3) = 0;
    _hessian(2, 4) = 0;
    _hessian(2, 5) = 0;
    _hessian(2, 6) = 0;
    _hessian(2, 7) = 0;
    _hessian(2, 8) = 0;
    _hessian(2, 9) = 0;
    _hessian(2, 10) = 0;
    _hessian(2, 11) = 0;
    _hessian(2, 12) = 0;
    _hessian(3, 0) = _tmp161 * _tmp209 + _tmp309 * _tmp312;
    _hessian(3, 1) = _tmp178 * _tmp209 + _tmp310 * _tmp312;
    _hessian(3, 2) = _tmp191 * _tmp209 + _tmp311 * _tmp312;
    _hessian(3, 3) = std::pow(_tmp209, Scalar(2)) + std::pow(_tmp312, Scalar(2));
    _hessian(3, 4) = 0;
    _hessian(3, 5) = 0;
    _hessian(3, 6) = 0;
    _hessian(3, 7) = 0;
    _hessian(3, 8) = 0;
    _hessian(3, 9) = 0;
    _hessian(3, 10) = 0;
    _hessian(3, 11) = 0;
    _hessian(3, 12) = 0;
    _hessian(4, 0) = _tmp161 * _tmp224 + _tmp309 * _tmp313;
    _hessian(4, 1) = _tmp178 * _tmp224 + _tmp310 * _tmp313;
    _hessian(4, 2) = _tmp191 * _tmp224 + _tmp311 * _tmp313;
    _hessian(4, 3) = _tmp209 * _tmp224 + _tmp312 * _tmp313;
    _hessian(4, 4) = std::pow(_tmp224, Scalar(2)) + std::pow(_tmp313, Scalar(2));
    _hessian(4, 5) = 0;
    _hessian(4, 6) = 0;
    _hessian(4, 7) = 0;
    _hessian(4, 8) = 0;
    _hessian(4, 9) = 0;
    _hessian(4, 10) = 0;
    _hessian(4, 11) = 0;
    _hessian(4, 12) = 0;
    _hessian(5, 0) = _tmp161 * _tmp238 + _tmp309 * _tmp314;
    _hessian(5, 1) = _tmp178 * _tmp238 + _tmp310 * _tmp314;
    _hessian(5, 2) = _tmp191 * _tmp238 + _tmp311 * _tmp314;
    _hessian(5, 3) = _tmp209 * _tmp238 + _tmp312 * _tmp314;
    _hessian(5, 4) = _tmp224 * _tmp238 + _tmp313 * _tmp314;
    _hessian(5, 5) = std::pow(_tmp238, Scalar(2)) + std::pow(_tmp314, Scalar(2));
    _hessian(5, 6) = 0;
    _hessian(5, 7) = 0;
    _hessian(5, 8) = 0;
    _hessian(5, 9) = 0;
    _hessian(5, 10) = 0;
    _hessian(5, 11) = 0;
    _hessian(5, 12) = 0;
    _hessian(6, 0) = _tmp161 * _tmp255 + _tmp309 * _tmp315;
    _hessian(6, 1) = _tmp178 * _tmp255 + _tmp310 * _tmp315;
    _hessian(6, 2) = _tmp191 * _tmp255 + _tmp311 * _tmp315;
    _hessian(6, 3) = _tmp209 * _tmp255 + _tmp312 * _tmp315;
    _hessian(6, 4) = _tmp224 * _tmp255 + _tmp313 * _tmp315;
    _hessian(6, 5) = _tmp238 * _tmp255 + _tmp314 * _tmp315;
    _hessian(6, 6) = std::pow(_tmp255, Scalar(2)) + std::pow(_tmp315, Scalar(2));
    _hessian(6, 7) = 0;
    _hessian(6, 8) = 0;
    _hessian(6, 9) = 0;
    _hessian(6, 10) = 0;
    _hessian(6, 11) = 0;
    _hessian(6, 12) = 0;
    _hessian(7, 0) = _tmp161 * _tmp266 + _tmp309 * _tmp317;
    _hessian(7, 1) = _tmp178 * _tmp266 + _tmp310 * _tmp317;
    _hessian(7, 2) = _tmp191 * _tmp266 + _tmp311 * _tmp317;
    _hessian(7, 3) = _tmp209 * _tmp266 + _tmp312 * _tmp317;
    _hessian(7, 4) = _tmp224 * _tmp266 + _tmp313 * _tmp317;
    _hessian(7, 5) = _tmp238 * _tmp266 + _tmp314 * _tmp317;
    _hessian(7, 6) = _tmp255 * _tmp266 + _tmp315 * _tmp317;
    _hessian(7, 7) = std::pow(_tmp266, Scalar(2)) + std::pow(_tmp317, Scalar(2));
    _hessian(7, 8) = 0;
    _hessian(7, 9) = 0;
    _hessian(7, 10) = 0;
    _hessian(7, 11) = 0;
    _hessian(7, 12) = 0;
    _hessian(8, 0) = _tmp161 * _tmp274 + _tmp309 * _tmp318;
    _hessian(8, 1) = _tmp178 * _tmp274 + _tmp310 * _tmp318;
    _hessian(8, 2) = _tmp191 * _tmp274 + _tmp311 * _tmp318;
    _hessian(8, 3) = _tmp209 * _tmp274 + _tmp312 * _tmp318;
    _hessian(8, 4) = _tmp224 * _tmp274 + _tmp313 * _tmp318;
    _hessian(8, 5) = _tmp238 * _tmp274 + _tmp314 * _tmp318;
    _hessian(8, 6) = _tmp255 * _tmp274 + _tmp315 * _tmp318;
    _hessian(8, 7) = _tmp266 * _tmp274 + _tmp317 * _tmp318;
    _hessian(8, 8) = std::pow(_tmp274, Scalar(2)) + std::pow(_tmp318, Scalar(2));
    _hessian(8, 9) = 0;
    _hessian(8, 10) = 0;
    _hessian(8, 11) = 0;
    _hessian(8, 12) = 0;
    _hessian(9, 0) = _tmp161 * _tmp281 + _tmp309 * _tmp319;
    _hessian(9, 1) = _tmp178 * _tmp281 + _tmp310 * _tmp319;
    _hessian(9, 2) = _tmp191 * _tmp281 + _tmp311 * _tmp319;
    _hessian(9, 3) = _tmp209 * _tmp281 + _tmp312 * _tmp319;
    _hessian(9, 4) = _tmp224 * _tmp281 + _tmp313 * _tmp319;
    _hessian(9, 5) = _tmp238 * _tmp281 + _tmp314 * _tmp319;
    _hessian(9, 6) = _tmp255 * _tmp281 + _tmp315 * _tmp319;
    _hessian(9, 7) = _tmp266 * _tmp281 + _tmp317 * _tmp319;
    _hessian(9, 8) = _tmp274 * _tmp281 + _tmp318 * _tmp319;
    _hessian(9, 9) = std::pow(_tmp281, Scalar(2)) + std::pow(_tmp319, Scalar(2));
    _hessian(9, 10) = 0;
    _hessian(9, 11) = 0;
    _hessian(9, 12) = 0;
    _hessian(10, 0) = _tmp161 * _tmp288 + _tmp309 * _tmp320;
    _hessian(10, 1) = _tmp178 * _tmp288 + _tmp310 * _tmp320;
    _hessian(10, 2) = _tmp191 * _tmp288 + _tmp311 * _tmp320;
    _hessian(10, 3) = _tmp209 * _tmp288 + _tmp312 * _tmp320;
    _hessian(10, 4) = _tmp224 * _tmp288 + _tmp313 * _tmp320;
    _hessian(10, 5) = _tmp238 * _tmp288 + _tmp314 * _tmp320;
    _hessian(10, 6) = _tmp255 * _tmp288 + _tmp315 * _tmp320;
    _hessian(10, 7) = _tmp266 * _tmp288 + _tmp317 * _tmp320;
    _hessian(10, 8) = _tmp274 * _tmp288 + _tmp318 * _tmp320;
    _hessian(10, 9) = _tmp281 * _tmp288 + _tmp319 * _tmp320;
    _hessian(10, 10) = std::pow(_tmp288, Scalar(2)) + std::pow(_tmp320, Scalar(2));
    _hessian(10, 11) = 0;
    _hessian(10, 12) = 0;
    _hessian(11, 0) = _tmp161 * _tmp295 + _tmp309 * _tmp321;
    _hessian(11, 1) = _tmp178 * _tmp295 + _tmp310 * _tmp321;
    _hessian(11, 2) = _tmp191 * _tmp295 + _tmp311 * _tmp321;
    _hessian(11, 3) = _tmp209 * _tmp295 + _tmp312 * _tmp321;
    _hessian(11, 4) = _tmp224 * _tmp295 + _tmp313 * _tmp321;
    _hessian(11, 5) = _tmp238 * _tmp295 + _tmp314 * _tmp321;
    _hessian(11, 6) = _tmp255 * _tmp295 + _tmp315 * _tmp321;
    _hessian(11, 7) = _tmp266 * _tmp295 + _tmp317 * _tmp321;
    _hessian(11, 8) = _tmp274 * _tmp295 + _tmp318 * _tmp321;
    _hessian(11, 9) = _tmp281 * _tmp295 + _tmp319 * _tmp321;
    _hessian(11, 10) = _tmp288 * _tmp295 + _tmp320 * _tmp321;
    _hessian(11, 11) = std::pow(_tmp295, Scalar(2)) + std::pow(_tmp321, Scalar(2));
    _hessian(11, 12) = 0;
    _hessian(12, 0) = _tmp161 * _tmp305 + _tmp309 * _tmp322;
    _hessian(12, 1) = _tmp178 * _tmp305 + _tmp310 * _tmp322;
    _hessian(12, 2) = _tmp191 * _tmp305 + _tmp311 * _tmp322;
    _hessian(12, 3) = _tmp209 * _tmp305 + _tmp312 * _tmp322;
    _hessian(12, 4) = _tmp224 * _tmp305 + _tmp313 * _tmp322;
    _hessian(12, 5) = _tmp238 * _tmp305 + _tmp314 * _tmp322;
    _hessian(12, 6) = _tmp255 * _tmp305 + _tmp315 * _tmp322;
    _hessian(12, 7) = _tmp266 * _tmp305 + _tmp317 * _tmp322;
    _hessian(12, 8) = _tmp274 * _tmp305 + _tmp318 * _tmp322;
    _hessian(12, 9) = _tmp281 * _tmp305 + _tmp319 * _tmp322;
    _hessian(12, 10) = _tmp288 * _tmp305 + _tmp320 * _tmp322;
    _hessian(12, 11) = _tmp295 * _tmp305 + _tmp321 * _tmp322;
    _hessian(12, 12) = std::pow(_tmp305, Scalar(2)) + std::pow(_tmp322, Scalar(2));
  }

  if (rhs != nullptr) {
    Eigen::Matrix<Scalar, 13, 1>& _rhs = (*rhs);

    _rhs(0, 0) = _tmp119 * _tmp161 + _tmp120 * _tmp309;
    _rhs(1, 0) = _tmp119 * _tmp178 + _tmp120 * _tmp310;
    _rhs(2, 0) = _tmp119 * _tmp191 + _tmp120 * _tmp311;
    _rhs(3, 0) = _tmp119 * _tmp209 + _tmp120 * _tmp312;
    _rhs(4, 0) = _tmp119 * _tmp224 + _tmp120 * _tmp313;
    _rhs(5, 0) = _tmp119 * _tmp238 + _tmp120 * _tmp314;
    _rhs(6, 0) = _tmp119 * _tmp255 + _tmp120 * _tmp315;
    _rhs(7, 0) = _tmp119 * _tmp266 + _tmp120 * _tmp317;
    _rhs(8, 0) = _tmp119 * _tmp274 + _tmp120 * _tmp318;
    _rhs(9, 0) = _tmp119 * _tmp281 + _tmp120 * _tmp319;
    _rhs(10, 0) = _tmp119 * _tmp288 + _tmp120 * _tmp320;
    _rhs(11, 0) = _tmp119 * _tmp295 + _tmp120 * _tmp321;
    _rhs(12, 0) = _tmp119 * _tmp305 + _tmp120 * _tmp322;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
