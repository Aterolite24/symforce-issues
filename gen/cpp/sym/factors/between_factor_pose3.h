// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     cpp_templates/function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/pose3.h>

namespace sym {

/**
 * Residual that penalizes the difference between between(a, b) and a_T_b.
 *
 * In vector space terms that would be:
 *     (b - a) - a_T_b
 *
 * In lie group terms:
 *     local_coordinates(a_T_b, between(a, b))
 *     to_tangent(compose(inverse(a_T_b), compose(inverse(a), b)))
 *
 * Args:
 *     sqrt_info: Square root information matrix to whiten residual. This can be computed from
 *                a covariance matrix as the cholesky decomposition of the inverse. In the case
 *                of a diagonal it will contain 1/sigma values. Must match the tangent dim.
 *     jacobian: (6x12) jacobian of res wrt args a (6), b (6)
 *     hessian: (12x12) Gauss-Newton hessian for args a (6), b (6)
 *     rhs: (12x1) Gauss-Newton rhs for args a (6), b (6)
 */
template <typename Scalar>
void BetweenFactorPose3(const sym::Pose3<Scalar>& a, const sym::Pose3<Scalar>& b,
                        const sym::Pose3<Scalar>& a_T_b,
                        const Eigen::Matrix<Scalar, 6, 6>& sqrt_info, const Scalar epsilon,
                        Eigen::Matrix<Scalar, 6, 1>* const res = nullptr,
                        Eigen::Matrix<Scalar, 6, 12>* const jacobian = nullptr,
                        Eigen::Matrix<Scalar, 12, 12>* const hessian = nullptr,
                        Eigen::Matrix<Scalar, 12, 1>* const rhs = nullptr) {
  // Total ops: 2386

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _a = a.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _b = b.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _a_T_b = a_T_b.Data();

  // Intermediate terms (369)
  const Scalar _tmp0 = std::pow(_a[0], Scalar(2));
  const Scalar _tmp1 = 2 * _tmp0;
  const Scalar _tmp2 = -_tmp1;
  const Scalar _tmp3 = std::pow(_a[2], Scalar(2));
  const Scalar _tmp4 = 2 * _tmp3;
  const Scalar _tmp5 = 1 - _tmp4;
  const Scalar _tmp6 = _tmp2 + _tmp5;
  const Scalar _tmp7 = 2 * _a[1];
  const Scalar _tmp8 = _a[2] * _tmp7;
  const Scalar _tmp9 = 2 * _a[3];
  const Scalar _tmp10 = _a[0] * _tmp9;
  const Scalar _tmp11 = _tmp10 + _tmp8;
  const Scalar _tmp12 = _a[6] * _tmp11;
  const Scalar _tmp13 = _a[0] * _tmp7;
  const Scalar _tmp14 = _a[2] * _tmp9;
  const Scalar _tmp15 = -_tmp14;
  const Scalar _tmp16 = _tmp13 + _tmp15;
  const Scalar _tmp17 = _a[4] * _tmp16;
  const Scalar _tmp18 = _b[4] * _tmp16 + _b[6] * _tmp11;
  const Scalar _tmp19 = -_a[5] * _tmp6 - _a_T_b[5] + _b[5] * _tmp6 - _tmp12 - _tmp17 + _tmp18;
  const Scalar _tmp20 = std::pow(_a[1], Scalar(2));
  const Scalar _tmp21 = 2 * _tmp20;
  const Scalar _tmp22 = -_tmp21;
  const Scalar _tmp23 = _tmp22 + _tmp5;
  const Scalar _tmp24 = 2 * _a[0] * _a[2];
  const Scalar _tmp25 = _a[3] * _tmp7;
  const Scalar _tmp26 = -_tmp25;
  const Scalar _tmp27 = _tmp24 + _tmp26;
  const Scalar _tmp28 = _a[6] * _tmp27;
  const Scalar _tmp29 = _tmp13 + _tmp14;
  const Scalar _tmp30 = _a[5] * _tmp29;
  const Scalar _tmp31 = _b[5] * _tmp29 + _b[6] * _tmp27;
  const Scalar _tmp32 = -_a[4] * _tmp23 - _a_T_b[4] + _b[4] * _tmp23 - _tmp28 - _tmp30 + _tmp31;
  const Scalar _tmp33 = _a[0] * _b[1];
  const Scalar _tmp34 = _a[2] * _b[3];
  const Scalar _tmp35 = _a[3] * _b[2];
  const Scalar _tmp36 = _a[1] * _b[0];
  const Scalar _tmp37 = -_tmp33 - _tmp34 + _tmp35 + _tmp36;
  const Scalar _tmp38 = _a[2] * _b[1];
  const Scalar _tmp39 = _a[0] * _b[3];
  const Scalar _tmp40 = _a[1] * _b[2];
  const Scalar _tmp41 = _a[3] * _b[0];
  const Scalar _tmp42 = _tmp38 - _tmp39 - _tmp40 + _tmp41;
  const Scalar _tmp43 = _a[3] * _b[1];
  const Scalar _tmp44 = _a[1] * _b[3];
  const Scalar _tmp45 = _a[0] * _b[2];
  const Scalar _tmp46 = _a[2] * _b[0];
  const Scalar _tmp47 = _tmp43 - _tmp44 + _tmp45 - _tmp46;
  const Scalar _tmp48 = _a[1] * _b[1];
  const Scalar _tmp49 = _a[2] * _b[2];
  const Scalar _tmp50 = _a[0] * _b[0];
  const Scalar _tmp51 = _a[3] * _b[3];
  const Scalar _tmp52 = _tmp48 + _tmp49 + _tmp50 + _tmp51;
  const Scalar _tmp53 =
      -_a_T_b[0] * _tmp47 + _a_T_b[1] * _tmp42 - _a_T_b[2] * _tmp52 + _a_T_b[3] * _tmp37;
  const Scalar _tmp54 = _a_T_b[2] * _tmp37;
  const Scalar _tmp55 = _a_T_b[0] * _tmp42;
  const Scalar _tmp56 = _a_T_b[1] * _tmp47;
  const Scalar _tmp57 = -_tmp54 - _tmp55 - _tmp56;
  const Scalar _tmp58 = _a_T_b[3] * _tmp52;
  const Scalar _tmp59 =
      2 * std::min<Scalar>(0, (((-_tmp57 + _tmp58) > 0) - ((-_tmp57 + _tmp58) < 0))) + 1;
  const Scalar _tmp60 = 2 * _tmp59;
  const Scalar _tmp61 = 1 - epsilon;
  const Scalar _tmp62 = std::min<Scalar>(_tmp61, std::fabs(_tmp57 - _tmp58));
  const Scalar _tmp63 = std::acos(_tmp62) / std::sqrt(Scalar(1 - std::pow(_tmp62, Scalar(2))));
  const Scalar _tmp64 = _tmp60 * _tmp63;
  const Scalar _tmp65 = _tmp53 * _tmp64;
  const Scalar _tmp66 =
      -_a_T_b[0] * _tmp52 - _a_T_b[1] * _tmp37 + _a_T_b[2] * _tmp47 + _a_T_b[3] * _tmp42;
  const Scalar _tmp67 = _tmp66 * sqrt_info(0, 0);
  const Scalar _tmp68 =
      _a_T_b[0] * _tmp37 - _a_T_b[1] * _tmp52 - _a_T_b[2] * _tmp42 + _a_T_b[3] * _tmp47;
  const Scalar _tmp69 = _tmp63 * _tmp68;
  const Scalar _tmp70 = _tmp60 * _tmp69;
  const Scalar _tmp71 = _tmp2 + _tmp22 + 1;
  const Scalar _tmp72 = -_tmp10;
  const Scalar _tmp73 = _tmp72 + _tmp8;
  const Scalar _tmp74 = _a[5] * _tmp73;
  const Scalar _tmp75 = _tmp24 + _tmp25;
  const Scalar _tmp76 = _a[4] * _tmp75;
  const Scalar _tmp77 = _b[4] * _tmp75 + _b[5] * _tmp73;
  const Scalar _tmp78 = -_a[6] * _tmp71 - _a_T_b[6] + _b[6] * _tmp71 - _tmp74 - _tmp76 + _tmp77;
  const Scalar _tmp79 = _tmp19 * sqrt_info(0, 4) + _tmp32 * sqrt_info(0, 3) + _tmp64 * _tmp67 +
                        _tmp65 * sqrt_info(0, 2) + _tmp70 * sqrt_info(0, 1) +
                        _tmp78 * sqrt_info(0, 5);
  const Scalar _tmp80 = _tmp64 * _tmp66;
  const Scalar _tmp81 = _tmp60 * sqrt_info(1, 1);
  const Scalar _tmp82 = _tmp19 * sqrt_info(1, 4) + _tmp32 * sqrt_info(1, 3) +
                        _tmp65 * sqrt_info(1, 2) + _tmp69 * _tmp81 + _tmp78 * sqrt_info(1, 5) +
                        _tmp80 * sqrt_info(1, 0);
  const Scalar _tmp83 = _tmp19 * sqrt_info(2, 4) + _tmp32 * sqrt_info(2, 3) +
                        _tmp65 * sqrt_info(2, 2) + _tmp70 * sqrt_info(2, 1) +
                        _tmp78 * sqrt_info(2, 5) + _tmp80 * sqrt_info(2, 0);
  const Scalar _tmp84 = _tmp19 * sqrt_info(3, 4) + _tmp32 * sqrt_info(3, 3) +
                        _tmp65 * sqrt_info(3, 2) + _tmp70 * sqrt_info(3, 1) +
                        _tmp78 * sqrt_info(3, 5) + _tmp80 * sqrt_info(3, 0);
  const Scalar _tmp85 = _tmp19 * sqrt_info(4, 4) + _tmp32 * sqrt_info(4, 3) +
                        _tmp65 * sqrt_info(4, 2) + _tmp70 * sqrt_info(4, 1) +
                        _tmp78 * sqrt_info(4, 5) + _tmp80 * sqrt_info(4, 0);
  const Scalar _tmp86 = _tmp60 * sqrt_info(5, 1);
  const Scalar _tmp87 = _tmp19 * sqrt_info(5, 4) + _tmp32 * sqrt_info(5, 3) +
                        _tmp65 * sqrt_info(5, 2) + _tmp69 * _tmp86 + _tmp78 * sqrt_info(5, 5) +
                        _tmp80 * sqrt_info(5, 0);
  const Scalar _tmp88 = (Scalar(1) / Scalar(2)) * _tmp48;
  const Scalar _tmp89 = (Scalar(1) / Scalar(2)) * _tmp51;
  const Scalar _tmp90 = (Scalar(1) / Scalar(2)) * _tmp49;
  const Scalar _tmp91 = (Scalar(1) / Scalar(2)) * _tmp50;
  const Scalar _tmp92 = -_tmp88 - _tmp89 - _tmp90 - _tmp91;
  const Scalar _tmp93 = _a_T_b[0] * _tmp92;
  const Scalar _tmp94 = (Scalar(1) / Scalar(2)) * _tmp38;
  const Scalar _tmp95 = (Scalar(1) / Scalar(2)) * _tmp39;
  const Scalar _tmp96 = (Scalar(1) / Scalar(2)) * _tmp40;
  const Scalar _tmp97 = (Scalar(1) / Scalar(2)) * _tmp41;
  const Scalar _tmp98 = _tmp94 - _tmp95 - _tmp96 + _tmp97;
  const Scalar _tmp99 = _a_T_b[3] * _tmp98;
  const Scalar _tmp100 = (Scalar(1) / Scalar(2)) * _tmp33;
  const Scalar _tmp101 = (Scalar(1) / Scalar(2)) * _tmp34;
  const Scalar _tmp102 = (Scalar(1) / Scalar(2)) * _tmp35;
  const Scalar _tmp103 = (Scalar(1) / Scalar(2)) * _tmp36;
  const Scalar _tmp104 = -_tmp100 - _tmp101 + _tmp102 + _tmp103;
  const Scalar _tmp105 = _a_T_b[1] * _tmp104;
  const Scalar _tmp106 = (Scalar(1) / Scalar(2)) * _tmp43;
  const Scalar _tmp107 = (Scalar(1) / Scalar(2)) * _tmp44;
  const Scalar _tmp108 = (Scalar(1) / Scalar(2)) * _tmp45;
  const Scalar _tmp109 = (Scalar(1) / Scalar(2)) * _tmp46;
  const Scalar _tmp110 = -_tmp106 + _tmp107 - _tmp108 + _tmp109;
  const Scalar _tmp111 = _a_T_b[2] * _tmp110;
  const Scalar _tmp112 = _tmp105 + _tmp111;
  const Scalar _tmp113 = _tmp112 + _tmp93 + _tmp99;
  const Scalar _tmp114 = _tmp54 + _tmp55 + _tmp56 + _tmp58;
  const Scalar _tmp115 = std::fabs(_tmp114);
  const Scalar _tmp116 = std::min<Scalar>(_tmp115, _tmp61);
  const Scalar _tmp117 = 1 - std::pow(_tmp116, Scalar(2));
  const Scalar _tmp118 = _tmp59 * ((((-_tmp115 + _tmp61) > 0) - ((-_tmp115 + _tmp61) < 0)) + 1) *
                         (((_tmp114) > 0) - ((_tmp114) < 0));
  const Scalar _tmp119 = _tmp118 / _tmp117;
  const Scalar _tmp120 = _tmp119 * _tmp68;
  const Scalar _tmp121 = _tmp113 * _tmp120;
  const Scalar _tmp122 = -_a_T_b[0] * _tmp104;
  const Scalar _tmp123 = _a_T_b[1] * _tmp92;
  const Scalar _tmp124 = _a_T_b[3] * _tmp110;
  const Scalar _tmp125 = _a_T_b[2] * _tmp98;
  const Scalar _tmp126 = _tmp122 + _tmp123 + _tmp124 - _tmp125;
  const Scalar _tmp127 = std::acos(_tmp116);
  const Scalar _tmp128 = _tmp127 / std::sqrt(_tmp117);
  const Scalar _tmp129 = _tmp128 * _tmp60;
  const Scalar _tmp130 = _tmp126 * _tmp129;
  const Scalar _tmp131 = _tmp119 * _tmp67;
  const Scalar _tmp132 = _tmp116 * _tmp118 * _tmp127 / (_tmp117 * std::sqrt(_tmp117));
  const Scalar _tmp133 = _tmp113 * _tmp132;
  const Scalar _tmp134 = _tmp133 * _tmp53;
  const Scalar _tmp135 = _a_T_b[3] * _tmp92;
  const Scalar _tmp136 = _a_T_b[0] * _tmp98;
  const Scalar _tmp137 = _a_T_b[2] * _tmp104;
  const Scalar _tmp138 = -_a_T_b[1] * _tmp110;
  const Scalar _tmp139 = _tmp137 + _tmp138;
  const Scalar _tmp140 = _tmp135 - _tmp136 + _tmp139;
  const Scalar _tmp141 = _tmp129 * sqrt_info(0, 0);
  const Scalar _tmp142 = _tmp68 * sqrt_info(0, 1);
  const Scalar _tmp143 = -_a_T_b[1] * _tmp98;
  const Scalar _tmp144 = _a_T_b[2] * _tmp92;
  const Scalar _tmp145 = _a_T_b[3] * _tmp104;
  const Scalar _tmp146 = _a_T_b[0] * _tmp110;
  const Scalar _tmp147 = _tmp145 + _tmp146;
  const Scalar _tmp148 = _tmp128 * (_tmp143 - _tmp144 + _tmp147);
  const Scalar _tmp149 = _tmp148 * _tmp60;
  const Scalar _tmp150 = -_tmp20;
  const Scalar _tmp151 = std::pow(_a[3], Scalar(2));
  const Scalar _tmp152 = _tmp150 + _tmp151;
  const Scalar _tmp153 = -_tmp0;
  const Scalar _tmp154 = _tmp153 + _tmp3;
  const Scalar _tmp155 = _tmp152 + _tmp154;
  const Scalar _tmp156 = -_a[6] * _tmp155 + _b[6] * _tmp155 - _tmp74 - _tmp76 + _tmp77;
  const Scalar _tmp157 = _tmp119 * _tmp53;
  const Scalar _tmp158 = _tmp113 * _tmp157;
  const Scalar _tmp159 = -_tmp151;
  const Scalar _tmp160 = _tmp0 + _tmp150 + _tmp159 + _tmp3;
  const Scalar _tmp161 = -_tmp8;
  const Scalar _tmp162 = _tmp161 + _tmp72;
  const Scalar _tmp163 = -_tmp13;
  const Scalar _tmp164 = _tmp14 + _tmp163;
  const Scalar _tmp165 = -_a[4] * _tmp164 - _a[5] * _tmp160 - _a[6] * _tmp162 + _b[4] * _tmp164 +
                         _b[5] * _tmp160 + _b[6] * _tmp162;
  const Scalar _tmp166 = -_tmp113 * _tmp131 - _tmp121 * sqrt_info(0, 1) +
                         _tmp130 * sqrt_info(0, 2) + _tmp133 * _tmp142 + _tmp133 * _tmp67 +
                         _tmp134 * sqrt_info(0, 2) + _tmp140 * _tmp141 + _tmp149 * sqrt_info(0, 1) +
                         _tmp156 * sqrt_info(0, 4) - _tmp158 * sqrt_info(0, 2) +
                         _tmp165 * sqrt_info(0, 5);
  const Scalar _tmp167 = _tmp106 - _tmp107 + _tmp108 - _tmp109;
  const Scalar _tmp168 = _a_T_b[3] * _tmp167;
  const Scalar _tmp169 = _tmp100 + _tmp101 - _tmp102 - _tmp103;
  const Scalar _tmp170 = _a_T_b[0] * _tmp169;
  const Scalar _tmp171 = _tmp125 + _tmp170;
  const Scalar _tmp172 = _tmp123 + _tmp168 + _tmp171;
  const Scalar _tmp173 = -_a_T_b[2] * _tmp167;
  const Scalar _tmp174 = _a_T_b[1] * _tmp169;
  const Scalar _tmp175 = _tmp174 + _tmp99;
  const Scalar _tmp176 = _tmp173 + _tmp175 - _tmp93;
  const Scalar _tmp177 = _tmp129 * _tmp176;
  const Scalar _tmp178 = _a_T_b[3] * _tmp169;
  const Scalar _tmp179 = _a_T_b[0] * _tmp167;
  const Scalar _tmp180 = _tmp143 + _tmp144 + _tmp178 - _tmp179;
  const Scalar _tmp181 = _tmp132 * _tmp172;
  const Scalar _tmp182 = _tmp53 * sqrt_info(0, 2);
  const Scalar _tmp183 = _tmp157 * _tmp172;
  const Scalar _tmp184 = _tmp120 * _tmp172;
  const Scalar _tmp185 = _a_T_b[1] * _tmp167;
  const Scalar _tmp186 = -_a_T_b[2] * _tmp169;
  const Scalar _tmp187 = _tmp136 + _tmp186;
  const Scalar _tmp188 = _tmp135 - _tmp185 + _tmp187;
  const Scalar _tmp189 = _tmp129 * sqrt_info(0, 1);
  const Scalar _tmp190 = -_tmp3;
  const Scalar _tmp191 = _tmp0 + _tmp190;
  const Scalar _tmp192 = _tmp159 + _tmp20;
  const Scalar _tmp193 = _tmp191 + _tmp192;
  const Scalar _tmp194 = _tmp10 + _tmp161;
  const Scalar _tmp195 = -_tmp24;
  const Scalar _tmp196 = _tmp195 + _tmp26;
  const Scalar _tmp197 = -_a[4] * _tmp196 - _a[5] * _tmp194 - _a[6] * _tmp193 + _b[4] * _tmp196 +
                         _b[5] * _tmp194 + _b[6] * _tmp193;
  const Scalar _tmp198 = _tmp152 + _tmp191;
  const Scalar _tmp199 = -_a[4] * _tmp198 + _b[4] * _tmp198 - _tmp28 - _tmp30 + _tmp31;
  const Scalar _tmp200 = -_tmp131 * _tmp172 + _tmp141 * _tmp180 + _tmp142 * _tmp181 +
                         _tmp177 * sqrt_info(0, 2) + _tmp181 * _tmp182 + _tmp181 * _tmp67 -
                         _tmp183 * sqrt_info(0, 2) - _tmp184 * sqrt_info(0, 1) + _tmp188 * _tmp189 +
                         _tmp197 * sqrt_info(0, 3) + _tmp199 * sqrt_info(0, 5);
  const Scalar _tmp201 = -_tmp94 + _tmp95 + _tmp96 - _tmp97;
  const Scalar _tmp202 = _a_T_b[1] * _tmp201;
  const Scalar _tmp203 = _tmp179 + _tmp202;
  const Scalar _tmp204 = _tmp144 + _tmp145 + _tmp203;
  const Scalar _tmp205 = _tmp120 * _tmp204;
  const Scalar _tmp206 = _tmp157 * _tmp204;
  const Scalar _tmp207 = _tmp132 * _tmp204;
  const Scalar _tmp208 = _a_T_b[3] * _tmp201;
  const Scalar _tmp209 = -_tmp105 + _tmp173 + _tmp208 + _tmp93;
  const Scalar _tmp210 = _a_T_b[2] * _tmp201;
  const Scalar _tmp211 = _tmp168 + _tmp210;
  const Scalar _tmp212 = _tmp129 * (_tmp122 - _tmp123 + _tmp211);
  const Scalar _tmp213 = -_a_T_b[0] * _tmp201;
  const Scalar _tmp214 = _tmp135 - _tmp137 + _tmp185 + _tmp213;
  const Scalar _tmp215 = _tmp129 * _tmp214;
  const Scalar _tmp216 = _tmp151 + _tmp153 + _tmp190 + _tmp20;
  const Scalar _tmp217 = -_a[5] * _tmp216 + _b[5] * _tmp216 - _tmp12 - _tmp17 + _tmp18;
  const Scalar _tmp218 = _tmp154 + _tmp192;
  const Scalar _tmp219 = _tmp195 + _tmp25;
  const Scalar _tmp220 = _tmp15 + _tmp163;
  const Scalar _tmp221 = -_a[4] * _tmp218 - _a[5] * _tmp220 - _a[6] * _tmp219 + _b[4] * _tmp218 +
                         _b[5] * _tmp220 + _b[6] * _tmp219;
  const Scalar _tmp222 = -_tmp131 * _tmp204 + _tmp142 * _tmp207 + _tmp182 * _tmp207 +
                         _tmp189 * _tmp209 - _tmp205 * sqrt_info(0, 1) - _tmp206 * sqrt_info(0, 2) +
                         _tmp207 * _tmp67 + _tmp212 * sqrt_info(0, 0) + _tmp215 * sqrt_info(0, 2) +
                         _tmp217 * sqrt_info(0, 3) + _tmp221 * sqrt_info(0, 4);
  const Scalar _tmp223 = _tmp4 - 1;
  const Scalar _tmp224 = _tmp21 + _tmp223;
  const Scalar _tmp225 =
      _tmp164 * sqrt_info(0, 4) + _tmp196 * sqrt_info(0, 5) + _tmp224 * sqrt_info(0, 3);
  const Scalar _tmp226 = _tmp1 + _tmp223;
  const Scalar _tmp227 =
      _tmp194 * sqrt_info(0, 5) + _tmp220 * sqrt_info(0, 3) + _tmp226 * sqrt_info(0, 4);
  const Scalar _tmp228 = _tmp1 + _tmp21 - 1;
  const Scalar _tmp229 =
      _tmp162 * sqrt_info(0, 4) + _tmp219 * sqrt_info(0, 3) + _tmp228 * sqrt_info(0, 5);
  const Scalar _tmp230 = _tmp88 + _tmp89 + _tmp90 + _tmp91;
  const Scalar _tmp231 = _a_T_b[0] * _tmp230;
  const Scalar _tmp232 = _tmp208 + _tmp231;
  const Scalar _tmp233 = _tmp112 + _tmp232;
  const Scalar _tmp234 = _tmp132 * _tmp233;
  const Scalar _tmp235 = _tmp157 * _tmp233;
  const Scalar _tmp236 = _tmp120 * _tmp233;
  const Scalar _tmp237 = _a_T_b[3] * _tmp230;
  const Scalar _tmp238 = _tmp213 + _tmp237;
  const Scalar _tmp239 = _tmp139 + _tmp238;
  const Scalar _tmp240 = _a_T_b[1] * _tmp230;
  const Scalar _tmp241 = _tmp124 + _tmp240;
  const Scalar _tmp242 = _tmp122 - _tmp210 + _tmp241;
  const Scalar _tmp243 = _tmp129 * _tmp242;
  const Scalar _tmp244 = _a_T_b[2] * _tmp230;
  const Scalar _tmp245 = _tmp147 - _tmp202 - _tmp244;
  const Scalar _tmp246 = -_tmp131 * _tmp233 + _tmp141 * _tmp239 + _tmp142 * _tmp234 +
                         _tmp182 * _tmp234 + _tmp189 * _tmp245 + _tmp234 * _tmp67 -
                         _tmp235 * sqrt_info(0, 2) - _tmp236 * sqrt_info(0, 1) +
                         _tmp243 * sqrt_info(0, 2);
  const Scalar _tmp247 = -_tmp111 + _tmp175 - _tmp231;
  const Scalar _tmp248 = _tmp129 * _tmp247;
  const Scalar _tmp249 = _tmp171 + _tmp241;
  const Scalar _tmp250 = _tmp132 * _tmp249;
  const Scalar _tmp251 = _tmp120 * _tmp249;
  const Scalar _tmp252 = _tmp178 + _tmp244;
  const Scalar _tmp253 = _tmp143 - _tmp146 + _tmp252;
  const Scalar _tmp254 = _tmp138 + _tmp187 + _tmp237;
  const Scalar _tmp255 = _tmp157 * _tmp249;
  const Scalar _tmp256 = -_tmp131 * _tmp249 + _tmp141 * _tmp253 + _tmp142 * _tmp250 +
                         _tmp182 * _tmp250 + _tmp189 * _tmp254 + _tmp248 * sqrt_info(0, 2) +
                         _tmp250 * _tmp67 - _tmp251 * sqrt_info(0, 1) - _tmp255 * sqrt_info(0, 2);
  const Scalar _tmp257 = _tmp203 + _tmp252;
  const Scalar _tmp258 = _tmp132 * _tmp257;
  const Scalar _tmp259 = _tmp258 * _tmp53;
  const Scalar _tmp260 = _tmp120 * _tmp257;
  const Scalar _tmp261 = _tmp173 - _tmp174 + _tmp232;
  const Scalar _tmp262 = _tmp185 + _tmp186 + _tmp238;
  const Scalar _tmp263 = _tmp129 * _tmp262;
  const Scalar _tmp264 = -_tmp170 + _tmp211 - _tmp240;
  const Scalar _tmp265 = _tmp157 * _tmp257;
  const Scalar _tmp266 = -_tmp131 * _tmp257 + _tmp141 * _tmp264 + _tmp142 * _tmp258 +
                         _tmp189 * _tmp261 + _tmp258 * _tmp67 + _tmp259 * sqrt_info(0, 2) -
                         _tmp260 * sqrt_info(0, 1) + _tmp263 * sqrt_info(0, 2) -
                         _tmp265 * sqrt_info(0, 2);
  const Scalar _tmp267 =
      _tmp16 * sqrt_info(0, 4) + _tmp23 * sqrt_info(0, 3) + _tmp75 * sqrt_info(0, 5);
  const Scalar _tmp268 =
      _tmp29 * sqrt_info(0, 3) + _tmp6 * sqrt_info(0, 4) + _tmp73 * sqrt_info(0, 5);
  const Scalar _tmp269 =
      _tmp11 * sqrt_info(0, 4) + _tmp27 * sqrt_info(0, 3) + _tmp71 * sqrt_info(0, 5);
  const Scalar _tmp270 = _tmp129 * sqrt_info(1, 2);
  const Scalar _tmp271 = _tmp119 * _tmp66;
  const Scalar _tmp272 = _tmp113 * _tmp271;
  const Scalar _tmp273 = _tmp53 * sqrt_info(1, 2);
  const Scalar _tmp274 = _tmp129 * _tmp140;
  const Scalar _tmp275 = _tmp133 * _tmp68;
  const Scalar _tmp276 = _tmp133 * _tmp66;
  const Scalar _tmp277 = -_tmp121 * sqrt_info(1, 1) + _tmp126 * _tmp270 + _tmp133 * _tmp273 +
                         _tmp148 * _tmp81 + _tmp156 * sqrt_info(1, 4) - _tmp158 * sqrt_info(1, 2) +
                         _tmp165 * sqrt_info(1, 5) - _tmp272 * sqrt_info(1, 0) +
                         _tmp274 * sqrt_info(1, 0) + _tmp275 * sqrt_info(1, 1) +
                         _tmp276 * sqrt_info(1, 0);
  const Scalar _tmp278 = _tmp172 * _tmp271;
  const Scalar _tmp279 = _tmp129 * _tmp180;
  const Scalar _tmp280 = _tmp181 * _tmp66;
  const Scalar _tmp281 = _tmp181 * _tmp68;
  const Scalar _tmp282 = _tmp129 * _tmp188;
  const Scalar _tmp283 = _tmp176 * _tmp270 + _tmp181 * _tmp273 - _tmp183 * sqrt_info(1, 2) -
                         _tmp184 * sqrt_info(1, 1) + _tmp197 * sqrt_info(1, 3) +
                         _tmp199 * sqrt_info(1, 5) - _tmp278 * sqrt_info(1, 0) +
                         _tmp279 * sqrt_info(1, 0) + _tmp280 * sqrt_info(1, 0) +
                         _tmp281 * sqrt_info(1, 1) + _tmp282 * sqrt_info(1, 1);
  const Scalar _tmp284 = _tmp204 * _tmp271;
  const Scalar _tmp285 = _tmp129 * _tmp209;
  const Scalar _tmp286 = _tmp207 * _tmp68;
  const Scalar _tmp287 = _tmp207 * _tmp66;
  const Scalar _tmp288 = -_tmp205 * sqrt_info(1, 1) - _tmp206 * sqrt_info(1, 2) +
                         _tmp207 * _tmp273 + _tmp212 * sqrt_info(1, 0) + _tmp214 * _tmp270 +
                         _tmp217 * sqrt_info(1, 3) + _tmp221 * sqrt_info(1, 4) -
                         _tmp284 * sqrt_info(1, 0) + _tmp285 * sqrt_info(1, 1) +
                         _tmp286 * sqrt_info(1, 1) + _tmp287 * sqrt_info(1, 0);
  const Scalar _tmp289 =
      _tmp164 * sqrt_info(1, 4) + _tmp196 * sqrt_info(1, 5) + _tmp224 * sqrt_info(1, 3);
  const Scalar _tmp290 =
      _tmp194 * sqrt_info(1, 5) + _tmp220 * sqrt_info(1, 3) + _tmp226 * sqrt_info(1, 4);
  const Scalar _tmp291 =
      _tmp162 * sqrt_info(1, 4) + _tmp219 * sqrt_info(1, 3) + _tmp228 * sqrt_info(1, 5);
  const Scalar _tmp292 = _tmp234 * _tmp66;
  const Scalar _tmp293 = _tmp234 * _tmp68;
  const Scalar _tmp294 = _tmp233 * _tmp271;
  const Scalar _tmp295 = _tmp129 * _tmp239;
  const Scalar _tmp296 = _tmp129 * _tmp245;
  const Scalar _tmp297 = _tmp234 * _tmp273 - _tmp235 * sqrt_info(1, 2) - _tmp236 * sqrt_info(1, 1) +
                         _tmp242 * _tmp270 + _tmp292 * sqrt_info(1, 0) + _tmp293 * sqrt_info(1, 1) -
                         _tmp294 * sqrt_info(1, 0) + _tmp295 * sqrt_info(1, 0) +
                         _tmp296 * sqrt_info(1, 1);
  const Scalar _tmp298 = _tmp250 * _tmp68;
  const Scalar _tmp299 = _tmp129 * _tmp253;
  const Scalar _tmp300 = _tmp249 * _tmp271;
  const Scalar _tmp301 = _tmp129 * _tmp254;
  const Scalar _tmp302 = _tmp250 * _tmp66;
  const Scalar _tmp303 = _tmp247 * _tmp270 + _tmp250 * _tmp273 - _tmp251 * sqrt_info(1, 1) -
                         _tmp255 * sqrt_info(1, 2) + _tmp298 * sqrt_info(1, 1) +
                         _tmp299 * sqrt_info(1, 0) - _tmp300 * sqrt_info(1, 0) +
                         _tmp301 * sqrt_info(1, 1) + _tmp302 * sqrt_info(1, 0);
  const Scalar _tmp304 = _tmp257 * _tmp271;
  const Scalar _tmp305 = _tmp129 * _tmp261;
  const Scalar _tmp306 = _tmp129 * _tmp264;
  const Scalar _tmp307 = _tmp258 * _tmp68;
  const Scalar _tmp308 = _tmp258 * _tmp66;
  const Scalar _tmp309 = _tmp258 * _tmp273 - _tmp260 * sqrt_info(1, 1) + _tmp262 * _tmp270 -
                         _tmp265 * sqrt_info(1, 2) - _tmp304 * sqrt_info(1, 0) +
                         _tmp305 * sqrt_info(1, 1) + _tmp306 * sqrt_info(1, 0) +
                         _tmp307 * sqrt_info(1, 1) + _tmp308 * sqrt_info(1, 0);
  const Scalar _tmp310 =
      _tmp16 * sqrt_info(1, 4) + _tmp23 * sqrt_info(1, 3) + _tmp75 * sqrt_info(1, 5);
  const Scalar _tmp311 =
      _tmp29 * sqrt_info(1, 3) + _tmp6 * sqrt_info(1, 4) + _tmp73 * sqrt_info(1, 5);
  const Scalar _tmp312 =
      _tmp11 * sqrt_info(1, 4) + _tmp27 * sqrt_info(1, 3) + _tmp71 * sqrt_info(1, 5);
  const Scalar _tmp313 = _tmp120 * sqrt_info(2, 1);
  const Scalar _tmp314 =
      -_tmp113 * _tmp313 + _tmp130 * sqrt_info(2, 2) + _tmp134 * sqrt_info(2, 2) +
      _tmp149 * sqrt_info(2, 1) + _tmp156 * sqrt_info(2, 4) - _tmp158 * sqrt_info(2, 2) +
      _tmp165 * sqrt_info(2, 5) - _tmp272 * sqrt_info(2, 0) + _tmp274 * sqrt_info(2, 0) +
      _tmp275 * sqrt_info(2, 1) + _tmp276 * sqrt_info(2, 0);
  const Scalar _tmp315 = _tmp53 * sqrt_info(2, 2);
  const Scalar _tmp316 = -_tmp172 * _tmp313 + _tmp177 * sqrt_info(2, 2) + _tmp181 * _tmp315 -
                         _tmp183 * sqrt_info(2, 2) + _tmp197 * sqrt_info(2, 3) +
                         _tmp199 * sqrt_info(2, 5) - _tmp278 * sqrt_info(2, 0) +
                         _tmp279 * sqrt_info(2, 0) + _tmp280 * sqrt_info(2, 0) +
                         _tmp281 * sqrt_info(2, 1) + _tmp282 * sqrt_info(2, 1);
  const Scalar _tmp317 = -_tmp205 * sqrt_info(2, 1) - _tmp206 * sqrt_info(2, 2) +
                         _tmp207 * _tmp315 + _tmp212 * sqrt_info(2, 0) + _tmp215 * sqrt_info(2, 2) +
                         _tmp217 * sqrt_info(2, 3) + _tmp221 * sqrt_info(2, 4) -
                         _tmp284 * sqrt_info(2, 0) + _tmp285 * sqrt_info(2, 1) +
                         _tmp286 * sqrt_info(2, 1) + _tmp287 * sqrt_info(2, 0);
  const Scalar _tmp318 =
      _tmp164 * sqrt_info(2, 4) + _tmp196 * sqrt_info(2, 5) + _tmp224 * sqrt_info(2, 3);
  const Scalar _tmp319 =
      _tmp194 * sqrt_info(2, 5) + _tmp220 * sqrt_info(2, 3) + _tmp226 * sqrt_info(2, 4);
  const Scalar _tmp320 =
      _tmp162 * sqrt_info(2, 4) + _tmp219 * sqrt_info(2, 3) + _tmp228 * sqrt_info(2, 5);
  const Scalar _tmp321 = -_tmp233 * _tmp313 + _tmp234 * _tmp315 - _tmp235 * sqrt_info(2, 2) +
                         _tmp243 * sqrt_info(2, 2) + _tmp292 * sqrt_info(2, 0) +
                         _tmp293 * sqrt_info(2, 1) - _tmp294 * sqrt_info(2, 0) +
                         _tmp295 * sqrt_info(2, 0) + _tmp296 * sqrt_info(2, 1);
  const Scalar _tmp322 = _tmp129 * sqrt_info(2, 0);
  const Scalar _tmp323 = _tmp248 * sqrt_info(2, 2) - _tmp249 * _tmp313 + _tmp250 * _tmp315 +
                         _tmp253 * _tmp322 - _tmp255 * sqrt_info(2, 2) + _tmp298 * sqrt_info(2, 1) -
                         _tmp300 * sqrt_info(2, 0) + _tmp301 * sqrt_info(2, 1) +
                         _tmp302 * sqrt_info(2, 0);
  const Scalar _tmp324 = -_tmp257 * _tmp313 + _tmp259 * sqrt_info(2, 2) +
                         _tmp263 * sqrt_info(2, 2) + _tmp264 * _tmp322 - _tmp265 * sqrt_info(2, 2) -
                         _tmp304 * sqrt_info(2, 0) + _tmp305 * sqrt_info(2, 1) +
                         _tmp307 * sqrt_info(2, 1) + _tmp308 * sqrt_info(2, 0);
  const Scalar _tmp325 =
      _tmp16 * sqrt_info(2, 4) + _tmp23 * sqrt_info(2, 3) + _tmp75 * sqrt_info(2, 5);
  const Scalar _tmp326 =
      _tmp29 * sqrt_info(2, 3) + _tmp6 * sqrt_info(2, 4) + _tmp73 * sqrt_info(2, 5);
  const Scalar _tmp327 =
      _tmp11 * sqrt_info(2, 4) + _tmp27 * sqrt_info(2, 3) + _tmp71 * sqrt_info(2, 5);
  const Scalar _tmp328 = _tmp68 * sqrt_info(3, 1);
  const Scalar _tmp329 = -_tmp121 * sqrt_info(3, 1) + _tmp130 * sqrt_info(3, 2) +
                         _tmp133 * _tmp328 + _tmp134 * sqrt_info(3, 2) + _tmp149 * sqrt_info(3, 1) +
                         _tmp156 * sqrt_info(3, 4) - _tmp158 * sqrt_info(3, 2) +
                         _tmp165 * sqrt_info(3, 5) - _tmp272 * sqrt_info(3, 0) +
                         _tmp274 * sqrt_info(3, 0) + _tmp276 * sqrt_info(3, 0);
  const Scalar _tmp330 = _tmp53 * sqrt_info(3, 2);
  const Scalar _tmp331 = _tmp177 * sqrt_info(3, 2) + _tmp181 * _tmp328 + _tmp181 * _tmp330 -
                         _tmp183 * sqrt_info(3, 2) - _tmp184 * sqrt_info(3, 1) +
                         _tmp197 * sqrt_info(3, 3) + _tmp199 * sqrt_info(3, 5) -
                         _tmp278 * sqrt_info(3, 0) + _tmp279 * sqrt_info(3, 0) +
                         _tmp280 * sqrt_info(3, 0) + _tmp282 * sqrt_info(3, 1);
  const Scalar _tmp332 = -_tmp205 * sqrt_info(3, 1) - _tmp206 * sqrt_info(3, 2) +
                         _tmp207 * _tmp330 + _tmp212 * sqrt_info(3, 0) + _tmp215 * sqrt_info(3, 2) +
                         _tmp217 * sqrt_info(3, 3) + _tmp221 * sqrt_info(3, 4) -
                         _tmp284 * sqrt_info(3, 0) + _tmp285 * sqrt_info(3, 1) +
                         _tmp286 * sqrt_info(3, 1) + _tmp287 * sqrt_info(3, 0);
  const Scalar _tmp333 =
      _tmp164 * sqrt_info(3, 4) + _tmp196 * sqrt_info(3, 5) + _tmp224 * sqrt_info(3, 3);
  const Scalar _tmp334 =
      _tmp194 * sqrt_info(3, 5) + _tmp220 * sqrt_info(3, 3) + _tmp226 * sqrt_info(3, 4);
  const Scalar _tmp335 =
      _tmp162 * sqrt_info(3, 4) + _tmp219 * sqrt_info(3, 3) + _tmp228 * sqrt_info(3, 5);
  const Scalar _tmp336 = _tmp234 * _tmp328 + _tmp234 * _tmp330 - _tmp235 * sqrt_info(3, 2) -
                         _tmp236 * sqrt_info(3, 1) + _tmp243 * sqrt_info(3, 2) +
                         _tmp292 * sqrt_info(3, 0) - _tmp294 * sqrt_info(3, 0) +
                         _tmp295 * sqrt_info(3, 0) + _tmp296 * sqrt_info(3, 1);
  const Scalar _tmp337 = _tmp248 * sqrt_info(3, 2) + _tmp250 * _tmp328 + _tmp250 * _tmp330 -
                         _tmp251 * sqrt_info(3, 1) - _tmp255 * sqrt_info(3, 2) +
                         _tmp299 * sqrt_info(3, 0) - _tmp300 * sqrt_info(3, 0) +
                         _tmp301 * sqrt_info(3, 1) + _tmp302 * sqrt_info(3, 0);
  const Scalar _tmp338 = _tmp258 * _tmp328 + _tmp259 * sqrt_info(3, 2) - _tmp260 * sqrt_info(3, 1) +
                         _tmp263 * sqrt_info(3, 2) - _tmp265 * sqrt_info(3, 2) -
                         _tmp304 * sqrt_info(3, 0) + _tmp305 * sqrt_info(3, 1) +
                         _tmp306 * sqrt_info(3, 0) + _tmp308 * sqrt_info(3, 0);
  const Scalar _tmp339 =
      _tmp16 * sqrt_info(3, 4) + _tmp23 * sqrt_info(3, 3) + _tmp75 * sqrt_info(3, 5);
  const Scalar _tmp340 =
      _tmp29 * sqrt_info(3, 3) + _tmp6 * sqrt_info(3, 4) + _tmp73 * sqrt_info(3, 5);
  const Scalar _tmp341 =
      _tmp11 * sqrt_info(3, 4) + _tmp27 * sqrt_info(3, 3) + _tmp71 * sqrt_info(3, 5);
  const Scalar _tmp342 = _tmp53 * sqrt_info(4, 2);
  const Scalar _tmp343 = -_tmp121 * sqrt_info(4, 1) + _tmp130 * sqrt_info(4, 2) +
                         _tmp133 * _tmp342 + _tmp149 * sqrt_info(4, 1) + _tmp156 * sqrt_info(4, 4) -
                         _tmp158 * sqrt_info(4, 2) + _tmp165 * sqrt_info(4, 5) -
                         _tmp272 * sqrt_info(4, 0) + _tmp274 * sqrt_info(4, 0) +
                         _tmp275 * sqrt_info(4, 1) + _tmp276 * sqrt_info(4, 0);
  const Scalar _tmp344 = _tmp177 * sqrt_info(4, 2) + _tmp181 * _tmp342 - _tmp183 * sqrt_info(4, 2) -
                         _tmp184 * sqrt_info(4, 1) + _tmp197 * sqrt_info(4, 3) +
                         _tmp199 * sqrt_info(4, 5) - _tmp278 * sqrt_info(4, 0) +
                         _tmp279 * sqrt_info(4, 0) + _tmp280 * sqrt_info(4, 0) +
                         _tmp281 * sqrt_info(4, 1) + _tmp282 * sqrt_info(4, 1);
  const Scalar _tmp345 = -_tmp205 * sqrt_info(4, 1) - _tmp206 * sqrt_info(4, 2) +
                         _tmp207 * _tmp342 + _tmp212 * sqrt_info(4, 0) + _tmp215 * sqrt_info(4, 2) +
                         _tmp217 * sqrt_info(4, 3) + _tmp221 * sqrt_info(4, 4) -
                         _tmp284 * sqrt_info(4, 0) + _tmp285 * sqrt_info(4, 1) +
                         _tmp286 * sqrt_info(4, 1) + _tmp287 * sqrt_info(4, 0);
  const Scalar _tmp346 =
      _tmp164 * sqrt_info(4, 4) + _tmp196 * sqrt_info(4, 5) + _tmp224 * sqrt_info(4, 3);
  const Scalar _tmp347 =
      _tmp194 * sqrt_info(4, 5) + _tmp220 * sqrt_info(4, 3) + _tmp226 * sqrt_info(4, 4);
  const Scalar _tmp348 =
      _tmp162 * sqrt_info(4, 4) + _tmp219 * sqrt_info(4, 3) + _tmp228 * sqrt_info(4, 5);
  const Scalar _tmp349 = _tmp234 * _tmp342 - _tmp235 * sqrt_info(4, 2) - _tmp236 * sqrt_info(4, 1) +
                         _tmp243 * sqrt_info(4, 2) + _tmp292 * sqrt_info(4, 0) +
                         _tmp293 * sqrt_info(4, 1) - _tmp294 * sqrt_info(4, 0) +
                         _tmp295 * sqrt_info(4, 0) + _tmp296 * sqrt_info(4, 1);
  const Scalar _tmp350 = _tmp248 * sqrt_info(4, 2) + _tmp250 * _tmp342 - _tmp251 * sqrt_info(4, 1) -
                         _tmp255 * sqrt_info(4, 2) + _tmp298 * sqrt_info(4, 1) +
                         _tmp299 * sqrt_info(4, 0) - _tmp300 * sqrt_info(4, 0) +
                         _tmp301 * sqrt_info(4, 1) + _tmp302 * sqrt_info(4, 0);
  const Scalar _tmp351 =
      _tmp259 * sqrt_info(4, 2) - _tmp260 * sqrt_info(4, 1) + _tmp263 * sqrt_info(4, 2) -
      _tmp265 * sqrt_info(4, 2) - _tmp304 * sqrt_info(4, 0) + _tmp305 * sqrt_info(4, 1) +
      _tmp306 * sqrt_info(4, 0) + _tmp307 * sqrt_info(4, 1) + _tmp308 * sqrt_info(4, 0);
  const Scalar _tmp352 =
      _tmp16 * sqrt_info(4, 4) + _tmp23 * sqrt_info(4, 3) + _tmp75 * sqrt_info(4, 5);
  const Scalar _tmp353 =
      _tmp29 * sqrt_info(4, 3) + _tmp6 * sqrt_info(4, 4) + _tmp73 * sqrt_info(4, 5);
  const Scalar _tmp354 =
      _tmp11 * sqrt_info(4, 4) + _tmp27 * sqrt_info(4, 3) + _tmp71 * sqrt_info(4, 5);
  const Scalar _tmp355 = _tmp53 * sqrt_info(5, 2);
  const Scalar _tmp356 = -_tmp121 * sqrt_info(5, 1) + _tmp130 * sqrt_info(5, 2) +
                         _tmp133 * _tmp355 + _tmp148 * _tmp86 + _tmp156 * sqrt_info(5, 4) -
                         _tmp158 * sqrt_info(5, 2) + _tmp165 * sqrt_info(5, 5) -
                         _tmp272 * sqrt_info(5, 0) + _tmp274 * sqrt_info(5, 0) +
                         _tmp275 * sqrt_info(5, 1) + _tmp276 * sqrt_info(5, 0);
  const Scalar _tmp357 = _tmp128 * _tmp86;
  const Scalar _tmp358 = _tmp177 * sqrt_info(5, 2) + _tmp181 * _tmp355 - _tmp183 * sqrt_info(5, 2) -
                         _tmp184 * sqrt_info(5, 1) + _tmp188 * _tmp357 + _tmp197 * sqrt_info(5, 3) +
                         _tmp199 * sqrt_info(5, 5) - _tmp278 * sqrt_info(5, 0) +
                         _tmp279 * sqrt_info(5, 0) + _tmp280 * sqrt_info(5, 0) +
                         _tmp281 * sqrt_info(5, 1);
  const Scalar _tmp359 = -_tmp205 * sqrt_info(5, 1) - _tmp206 * sqrt_info(5, 2) +
                         _tmp207 * _tmp355 + _tmp209 * _tmp357 + _tmp212 * sqrt_info(5, 0) +
                         _tmp215 * sqrt_info(5, 2) + _tmp217 * sqrt_info(5, 3) +
                         _tmp221 * sqrt_info(5, 4) - _tmp284 * sqrt_info(5, 0) +
                         _tmp286 * sqrt_info(5, 1) + _tmp287 * sqrt_info(5, 0);
  const Scalar _tmp360 =
      _tmp164 * sqrt_info(5, 4) + _tmp196 * sqrt_info(5, 5) + _tmp224 * sqrt_info(5, 3);
  const Scalar _tmp361 =
      _tmp194 * sqrt_info(5, 5) + _tmp220 * sqrt_info(5, 3) + _tmp226 * sqrt_info(5, 4);
  const Scalar _tmp362 =
      _tmp162 * sqrt_info(5, 4) + _tmp219 * sqrt_info(5, 3) + _tmp228 * sqrt_info(5, 5);
  const Scalar _tmp363 = _tmp234 * _tmp355 - _tmp235 * sqrt_info(5, 2) - _tmp236 * sqrt_info(5, 1) +
                         _tmp243 * sqrt_info(5, 2) + _tmp245 * _tmp357 + _tmp292 * sqrt_info(5, 0) +
                         _tmp293 * sqrt_info(5, 1) - _tmp294 * sqrt_info(5, 0) +
                         _tmp295 * sqrt_info(5, 0);
  const Scalar _tmp364 = _tmp248 * sqrt_info(5, 2) + _tmp250 * _tmp355 - _tmp251 * sqrt_info(5, 1) +
                         _tmp254 * _tmp357 - _tmp255 * sqrt_info(5, 2) + _tmp298 * sqrt_info(5, 1) +
                         _tmp299 * sqrt_info(5, 0) - _tmp300 * sqrt_info(5, 0) +
                         _tmp302 * sqrt_info(5, 0);
  const Scalar _tmp365 = _tmp258 * _tmp355 - _tmp260 * sqrt_info(5, 1) + _tmp261 * _tmp357 +
                         _tmp263 * sqrt_info(5, 2) - _tmp265 * sqrt_info(5, 2) -
                         _tmp304 * sqrt_info(5, 0) + _tmp306 * sqrt_info(5, 0) +
                         _tmp307 * sqrt_info(5, 1) + _tmp308 * sqrt_info(5, 0);
  const Scalar _tmp366 =
      _tmp16 * sqrt_info(5, 4) + _tmp23 * sqrt_info(5, 3) + _tmp75 * sqrt_info(5, 5);
  const Scalar _tmp367 =
      _tmp29 * sqrt_info(5, 3) + _tmp6 * sqrt_info(5, 4) + _tmp73 * sqrt_info(5, 5);
  const Scalar _tmp368 =
      _tmp11 * sqrt_info(5, 4) + _tmp27 * sqrt_info(5, 3) + _tmp71 * sqrt_info(5, 5);

  // Output terms (4)
  if (res != nullptr) {
    Eigen::Matrix<Scalar, 6, 1>& _res = (*res);

    _res(0, 0) = _tmp79;
    _res(1, 0) = _tmp82;
    _res(2, 0) = _tmp83;
    _res(3, 0) = _tmp84;
    _res(4, 0) = _tmp85;
    _res(5, 0) = _tmp87;
  }

  if (jacobian != nullptr) {
    Eigen::Matrix<Scalar, 6, 12>& _jacobian = (*jacobian);

    _jacobian(0, 0) = _tmp166;
    _jacobian(0, 1) = _tmp200;
    _jacobian(0, 2) = _tmp222;
    _jacobian(0, 3) = _tmp225;
    _jacobian(0, 4) = _tmp227;
    _jacobian(0, 5) = _tmp229;
    _jacobian(0, 6) = _tmp246;
    _jacobian(0, 7) = _tmp256;
    _jacobian(0, 8) = _tmp266;
    _jacobian(0, 9) = _tmp267;
    _jacobian(0, 10) = _tmp268;
    _jacobian(0, 11) = _tmp269;
    _jacobian(1, 0) = _tmp277;
    _jacobian(1, 1) = _tmp283;
    _jacobian(1, 2) = _tmp288;
    _jacobian(1, 3) = _tmp289;
    _jacobian(1, 4) = _tmp290;
    _jacobian(1, 5) = _tmp291;
    _jacobian(1, 6) = _tmp297;
    _jacobian(1, 7) = _tmp303;
    _jacobian(1, 8) = _tmp309;
    _jacobian(1, 9) = _tmp310;
    _jacobian(1, 10) = _tmp311;
    _jacobian(1, 11) = _tmp312;
    _jacobian(2, 0) = _tmp314;
    _jacobian(2, 1) = _tmp316;
    _jacobian(2, 2) = _tmp317;
    _jacobian(2, 3) = _tmp318;
    _jacobian(2, 4) = _tmp319;
    _jacobian(2, 5) = _tmp320;
    _jacobian(2, 6) = _tmp321;
    _jacobian(2, 7) = _tmp323;
    _jacobian(2, 8) = _tmp324;
    _jacobian(2, 9) = _tmp325;
    _jacobian(2, 10) = _tmp326;
    _jacobian(2, 11) = _tmp327;
    _jacobian(3, 0) = _tmp329;
    _jacobian(3, 1) = _tmp331;
    _jacobian(3, 2) = _tmp332;
    _jacobian(3, 3) = _tmp333;
    _jacobian(3, 4) = _tmp334;
    _jacobian(3, 5) = _tmp335;
    _jacobian(3, 6) = _tmp336;
    _jacobian(3, 7) = _tmp337;
    _jacobian(3, 8) = _tmp338;
    _jacobian(3, 9) = _tmp339;
    _jacobian(3, 10) = _tmp340;
    _jacobian(3, 11) = _tmp341;
    _jacobian(4, 0) = _tmp343;
    _jacobian(4, 1) = _tmp344;
    _jacobian(4, 2) = _tmp345;
    _jacobian(4, 3) = _tmp346;
    _jacobian(4, 4) = _tmp347;
    _jacobian(4, 5) = _tmp348;
    _jacobian(4, 6) = _tmp349;
    _jacobian(4, 7) = _tmp350;
    _jacobian(4, 8) = _tmp351;
    _jacobian(4, 9) = _tmp352;
    _jacobian(4, 10) = _tmp353;
    _jacobian(4, 11) = _tmp354;
    _jacobian(5, 0) = _tmp356;
    _jacobian(5, 1) = _tmp358;
    _jacobian(5, 2) = _tmp359;
    _jacobian(5, 3) = _tmp360;
    _jacobian(5, 4) = _tmp361;
    _jacobian(5, 5) = _tmp362;
    _jacobian(5, 6) = _tmp363;
    _jacobian(5, 7) = _tmp364;
    _jacobian(5, 8) = _tmp365;
    _jacobian(5, 9) = _tmp366;
    _jacobian(5, 10) = _tmp367;
    _jacobian(5, 11) = _tmp368;
  }

  if (hessian != nullptr) {
    Eigen::Matrix<Scalar, 12, 12>& _hessian = (*hessian);

    _hessian(0, 0) = std::pow(_tmp166, Scalar(2)) + std::pow(_tmp277, Scalar(2)) +
                     std::pow(_tmp314, Scalar(2)) + std::pow(_tmp329, Scalar(2)) +
                     std::pow(_tmp343, Scalar(2)) + std::pow(_tmp356, Scalar(2));
    _hessian(0, 1) = 0;
    _hessian(0, 2) = 0;
    _hessian(0, 3) = 0;
    _hessian(0, 4) = 0;
    _hessian(0, 5) = 0;
    _hessian(0, 6) = 0;
    _hessian(0, 7) = 0;
    _hessian(0, 8) = 0;
    _hessian(0, 9) = 0;
    _hessian(0, 10) = 0;
    _hessian(0, 11) = 0;
    _hessian(1, 0) = _tmp166 * _tmp200 + _tmp277 * _tmp283 + _tmp314 * _tmp316 + _tmp329 * _tmp331 +
                     _tmp343 * _tmp344 + _tmp356 * _tmp358;
    _hessian(1, 1) = std::pow(_tmp200, Scalar(2)) + std::pow(_tmp283, Scalar(2)) +
                     std::pow(_tmp316, Scalar(2)) + std::pow(_tmp331, Scalar(2)) +
                     std::pow(_tmp344, Scalar(2)) + std::pow(_tmp358, Scalar(2));
    _hessian(1, 2) = 0;
    _hessian(1, 3) = 0;
    _hessian(1, 4) = 0;
    _hessian(1, 5) = 0;
    _hessian(1, 6) = 0;
    _hessian(1, 7) = 0;
    _hessian(1, 8) = 0;
    _hessian(1, 9) = 0;
    _hessian(1, 10) = 0;
    _hessian(1, 11) = 0;
    _hessian(2, 0) = _tmp166 * _tmp222 + _tmp277 * _tmp288 + _tmp314 * _tmp317 + _tmp329 * _tmp332 +
                     _tmp343 * _tmp345 + _tmp356 * _tmp359;
    _hessian(2, 1) = _tmp200 * _tmp222 + _tmp283 * _tmp288 + _tmp316 * _tmp317 + _tmp331 * _tmp332 +
                     _tmp344 * _tmp345 + _tmp358 * _tmp359;
    _hessian(2, 2) = std::pow(_tmp222, Scalar(2)) + std::pow(_tmp288, Scalar(2)) +
                     std::pow(_tmp317, Scalar(2)) + std::pow(_tmp332, Scalar(2)) +
                     std::pow(_tmp345, Scalar(2)) + std::pow(_tmp359, Scalar(2));
    _hessian(2, 3) = 0;
    _hessian(2, 4) = 0;
    _hessian(2, 5) = 0;
    _hessian(2, 6) = 0;
    _hessian(2, 7) = 0;
    _hessian(2, 8) = 0;
    _hessian(2, 9) = 0;
    _hessian(2, 10) = 0;
    _hessian(2, 11) = 0;
    _hessian(3, 0) = _tmp166 * _tmp225 + _tmp277 * _tmp289 + _tmp314 * _tmp318 + _tmp329 * _tmp333 +
                     _tmp343 * _tmp346 + _tmp356 * _tmp360;
    _hessian(3, 1) = _tmp200 * _tmp225 + _tmp283 * _tmp289 + _tmp316 * _tmp318 + _tmp331 * _tmp333 +
                     _tmp344 * _tmp346 + _tmp358 * _tmp360;
    _hessian(3, 2) = _tmp222 * _tmp225 + _tmp288 * _tmp289 + _tmp317 * _tmp318 + _tmp332 * _tmp333 +
                     _tmp345 * _tmp346 + _tmp359 * _tmp360;
    _hessian(3, 3) = std::pow(_tmp225, Scalar(2)) + std::pow(_tmp289, Scalar(2)) +
                     std::pow(_tmp318, Scalar(2)) + std::pow(_tmp333, Scalar(2)) +
                     std::pow(_tmp346, Scalar(2)) + std::pow(_tmp360, Scalar(2));
    _hessian(3, 4) = 0;
    _hessian(3, 5) = 0;
    _hessian(3, 6) = 0;
    _hessian(3, 7) = 0;
    _hessian(3, 8) = 0;
    _hessian(3, 9) = 0;
    _hessian(3, 10) = 0;
    _hessian(3, 11) = 0;
    _hessian(4, 0) = _tmp166 * _tmp227 + _tmp277 * _tmp290 + _tmp314 * _tmp319 + _tmp329 * _tmp334 +
                     _tmp343 * _tmp347 + _tmp356 * _tmp361;
    _hessian(4, 1) = _tmp200 * _tmp227 + _tmp283 * _tmp290 + _tmp316 * _tmp319 + _tmp331 * _tmp334 +
                     _tmp344 * _tmp347 + _tmp358 * _tmp361;
    _hessian(4, 2) = _tmp222 * _tmp227 + _tmp288 * _tmp290 + _tmp317 * _tmp319 + _tmp332 * _tmp334 +
                     _tmp345 * _tmp347 + _tmp359 * _tmp361;
    _hessian(4, 3) = _tmp225 * _tmp227 + _tmp289 * _tmp290 + _tmp318 * _tmp319 + _tmp333 * _tmp334 +
                     _tmp346 * _tmp347 + _tmp360 * _tmp361;
    _hessian(4, 4) = std::pow(_tmp227, Scalar(2)) + std::pow(_tmp290, Scalar(2)) +
                     std::pow(_tmp319, Scalar(2)) + std::pow(_tmp334, Scalar(2)) +
                     std::pow(_tmp347, Scalar(2)) + std::pow(_tmp361, Scalar(2));
    _hessian(4, 5) = 0;
    _hessian(4, 6) = 0;
    _hessian(4, 7) = 0;
    _hessian(4, 8) = 0;
    _hessian(4, 9) = 0;
    _hessian(4, 10) = 0;
    _hessian(4, 11) = 0;
    _hessian(5, 0) = _tmp166 * _tmp229 + _tmp277 * _tmp291 + _tmp314 * _tmp320 + _tmp329 * _tmp335 +
                     _tmp343 * _tmp348 + _tmp356 * _tmp362;
    _hessian(5, 1) = _tmp200 * _tmp229 + _tmp283 * _tmp291 + _tmp316 * _tmp320 + _tmp331 * _tmp335 +
                     _tmp344 * _tmp348 + _tmp358 * _tmp362;
    _hessian(5, 2) = _tmp222 * _tmp229 + _tmp288 * _tmp291 + _tmp317 * _tmp320 + _tmp332 * _tmp335 +
                     _tmp345 * _tmp348 + _tmp359 * _tmp362;
    _hessian(5, 3) = _tmp225 * _tmp229 + _tmp289 * _tmp291 + _tmp318 * _tmp320 + _tmp333 * _tmp335 +
                     _tmp346 * _tmp348 + _tmp360 * _tmp362;
    _hessian(5, 4) = _tmp227 * _tmp229 + _tmp290 * _tmp291 + _tmp319 * _tmp320 + _tmp334 * _tmp335 +
                     _tmp347 * _tmp348 + _tmp361 * _tmp362;
    _hessian(5, 5) = std::pow(_tmp229, Scalar(2)) + std::pow(_tmp291, Scalar(2)) +
                     std::pow(_tmp320, Scalar(2)) + std::pow(_tmp335, Scalar(2)) +
                     std::pow(_tmp348, Scalar(2)) + std::pow(_tmp362, Scalar(2));
    _hessian(5, 6) = 0;
    _hessian(5, 7) = 0;
    _hessian(5, 8) = 0;
    _hessian(5, 9) = 0;
    _hessian(5, 10) = 0;
    _hessian(5, 11) = 0;
    _hessian(6, 0) = _tmp166 * _tmp246 + _tmp277 * _tmp297 + _tmp314 * _tmp321 + _tmp329 * _tmp336 +
                     _tmp343 * _tmp349 + _tmp356 * _tmp363;
    _hessian(6, 1) = _tmp200 * _tmp246 + _tmp283 * _tmp297 + _tmp316 * _tmp321 + _tmp331 * _tmp336 +
                     _tmp344 * _tmp349 + _tmp358 * _tmp363;
    _hessian(6, 2) = _tmp222 * _tmp246 + _tmp288 * _tmp297 + _tmp317 * _tmp321 + _tmp332 * _tmp336 +
                     _tmp345 * _tmp349 + _tmp359 * _tmp363;
    _hessian(6, 3) = _tmp225 * _tmp246 + _tmp289 * _tmp297 + _tmp318 * _tmp321 + _tmp333 * _tmp336 +
                     _tmp346 * _tmp349 + _tmp360 * _tmp363;
    _hessian(6, 4) = _tmp227 * _tmp246 + _tmp290 * _tmp297 + _tmp319 * _tmp321 + _tmp334 * _tmp336 +
                     _tmp347 * _tmp349 + _tmp361 * _tmp363;
    _hessian(6, 5) = _tmp229 * _tmp246 + _tmp291 * _tmp297 + _tmp320 * _tmp321 + _tmp335 * _tmp336 +
                     _tmp348 * _tmp349 + _tmp362 * _tmp363;
    _hessian(6, 6) = std::pow(_tmp246, Scalar(2)) + std::pow(_tmp297, Scalar(2)) +
                     std::pow(_tmp321, Scalar(2)) + std::pow(_tmp336, Scalar(2)) +
                     std::pow(_tmp349, Scalar(2)) + std::pow(_tmp363, Scalar(2));
    _hessian(6, 7) = 0;
    _hessian(6, 8) = 0;
    _hessian(6, 9) = 0;
    _hessian(6, 10) = 0;
    _hessian(6, 11) = 0;
    _hessian(7, 0) = _tmp166 * _tmp256 + _tmp277 * _tmp303 + _tmp314 * _tmp323 + _tmp329 * _tmp337 +
                     _tmp343 * _tmp350 + _tmp356 * _tmp364;
    _hessian(7, 1) = _tmp200 * _tmp256 + _tmp283 * _tmp303 + _tmp316 * _tmp323 + _tmp331 * _tmp337 +
                     _tmp344 * _tmp350 + _tmp358 * _tmp364;
    _hessian(7, 2) = _tmp222 * _tmp256 + _tmp288 * _tmp303 + _tmp317 * _tmp323 + _tmp332 * _tmp337 +
                     _tmp345 * _tmp350 + _tmp359 * _tmp364;
    _hessian(7, 3) = _tmp225 * _tmp256 + _tmp289 * _tmp303 + _tmp318 * _tmp323 + _tmp333 * _tmp337 +
                     _tmp346 * _tmp350 + _tmp360 * _tmp364;
    _hessian(7, 4) = _tmp227 * _tmp256 + _tmp290 * _tmp303 + _tmp319 * _tmp323 + _tmp334 * _tmp337 +
                     _tmp347 * _tmp350 + _tmp361 * _tmp364;
    _hessian(7, 5) = _tmp229 * _tmp256 + _tmp291 * _tmp303 + _tmp320 * _tmp323 + _tmp335 * _tmp337 +
                     _tmp348 * _tmp350 + _tmp362 * _tmp364;
    _hessian(7, 6) = _tmp246 * _tmp256 + _tmp297 * _tmp303 + _tmp321 * _tmp323 + _tmp336 * _tmp337 +
                     _tmp349 * _tmp350 + _tmp363 * _tmp364;
    _hessian(7, 7) = std::pow(_tmp256, Scalar(2)) + std::pow(_tmp303, Scalar(2)) +
                     std::pow(_tmp323, Scalar(2)) + std::pow(_tmp337, Scalar(2)) +
                     std::pow(_tmp350, Scalar(2)) + std::pow(_tmp364, Scalar(2));
    _hessian(7, 8) = 0;
    _hessian(7, 9) = 0;
    _hessian(7, 10) = 0;
    _hessian(7, 11) = 0;
    _hessian(8, 0) = _tmp166 * _tmp266 + _tmp277 * _tmp309 + _tmp314 * _tmp324 + _tmp329 * _tmp338 +
                     _tmp343 * _tmp351 + _tmp356 * _tmp365;
    _hessian(8, 1) = _tmp200 * _tmp266 + _tmp283 * _tmp309 + _tmp316 * _tmp324 + _tmp331 * _tmp338 +
                     _tmp344 * _tmp351 + _tmp358 * _tmp365;
    _hessian(8, 2) = _tmp222 * _tmp266 + _tmp288 * _tmp309 + _tmp317 * _tmp324 + _tmp332 * _tmp338 +
                     _tmp345 * _tmp351 + _tmp359 * _tmp365;
    _hessian(8, 3) = _tmp225 * _tmp266 + _tmp289 * _tmp309 + _tmp318 * _tmp324 + _tmp333 * _tmp338 +
                     _tmp346 * _tmp351 + _tmp360 * _tmp365;
    _hessian(8, 4) = _tmp227 * _tmp266 + _tmp290 * _tmp309 + _tmp319 * _tmp324 + _tmp334 * _tmp338 +
                     _tmp347 * _tmp351 + _tmp361 * _tmp365;
    _hessian(8, 5) = _tmp229 * _tmp266 + _tmp291 * _tmp309 + _tmp320 * _tmp324 + _tmp335 * _tmp338 +
                     _tmp348 * _tmp351 + _tmp362 * _tmp365;
    _hessian(8, 6) = _tmp246 * _tmp266 + _tmp297 * _tmp309 + _tmp321 * _tmp324 + _tmp336 * _tmp338 +
                     _tmp349 * _tmp351 + _tmp363 * _tmp365;
    _hessian(8, 7) = _tmp256 * _tmp266 + _tmp303 * _tmp309 + _tmp323 * _tmp324 + _tmp337 * _tmp338 +
                     _tmp350 * _tmp351 + _tmp364 * _tmp365;
    _hessian(8, 8) = std::pow(_tmp266, Scalar(2)) + std::pow(_tmp309, Scalar(2)) +
                     std::pow(_tmp324, Scalar(2)) + std::pow(_tmp338, Scalar(2)) +
                     std::pow(_tmp351, Scalar(2)) + std::pow(_tmp365, Scalar(2));
    _hessian(8, 9) = 0;
    _hessian(8, 10) = 0;
    _hessian(8, 11) = 0;
    _hessian(9, 0) = _tmp166 * _tmp267 + _tmp277 * _tmp310 + _tmp314 * _tmp325 + _tmp329 * _tmp339 +
                     _tmp343 * _tmp352 + _tmp356 * _tmp366;
    _hessian(9, 1) = _tmp200 * _tmp267 + _tmp283 * _tmp310 + _tmp316 * _tmp325 + _tmp331 * _tmp339 +
                     _tmp344 * _tmp352 + _tmp358 * _tmp366;
    _hessian(9, 2) = _tmp222 * _tmp267 + _tmp288 * _tmp310 + _tmp317 * _tmp325 + _tmp332 * _tmp339 +
                     _tmp345 * _tmp352 + _tmp359 * _tmp366;
    _hessian(9, 3) = _tmp225 * _tmp267 + _tmp289 * _tmp310 + _tmp318 * _tmp325 + _tmp333 * _tmp339 +
                     _tmp346 * _tmp352 + _tmp360 * _tmp366;
    _hessian(9, 4) = _tmp227 * _tmp267 + _tmp290 * _tmp310 + _tmp319 * _tmp325 + _tmp334 * _tmp339 +
                     _tmp347 * _tmp352 + _tmp361 * _tmp366;
    _hessian(9, 5) = _tmp229 * _tmp267 + _tmp291 * _tmp310 + _tmp320 * _tmp325 + _tmp335 * _tmp339 +
                     _tmp348 * _tmp352 + _tmp362 * _tmp366;
    _hessian(9, 6) = _tmp246 * _tmp267 + _tmp297 * _tmp310 + _tmp321 * _tmp325 + _tmp336 * _tmp339 +
                     _tmp349 * _tmp352 + _tmp363 * _tmp366;
    _hessian(9, 7) = _tmp256 * _tmp267 + _tmp303 * _tmp310 + _tmp323 * _tmp325 + _tmp337 * _tmp339 +
                     _tmp350 * _tmp352 + _tmp364 * _tmp366;
    _hessian(9, 8) = _tmp266 * _tmp267 + _tmp309 * _tmp310 + _tmp324 * _tmp325 + _tmp338 * _tmp339 +
                     _tmp351 * _tmp352 + _tmp365 * _tmp366;
    _hessian(9, 9) = std::pow(_tmp267, Scalar(2)) + std::pow(_tmp310, Scalar(2)) +
                     std::pow(_tmp325, Scalar(2)) + std::pow(_tmp339, Scalar(2)) +
                     std::pow(_tmp352, Scalar(2)) + std::pow(_tmp366, Scalar(2));
    _hessian(9, 10) = 0;
    _hessian(9, 11) = 0;
    _hessian(10, 0) = _tmp166 * _tmp268 + _tmp277 * _tmp311 + _tmp314 * _tmp326 +
                      _tmp329 * _tmp340 + _tmp343 * _tmp353 + _tmp356 * _tmp367;
    _hessian(10, 1) = _tmp200 * _tmp268 + _tmp283 * _tmp311 + _tmp316 * _tmp326 +
                      _tmp331 * _tmp340 + _tmp344 * _tmp353 + _tmp358 * _tmp367;
    _hessian(10, 2) = _tmp222 * _tmp268 + _tmp288 * _tmp311 + _tmp317 * _tmp326 +
                      _tmp332 * _tmp340 + _tmp345 * _tmp353 + _tmp359 * _tmp367;
    _hessian(10, 3) = _tmp225 * _tmp268 + _tmp289 * _tmp311 + _tmp318 * _tmp326 +
                      _tmp333 * _tmp340 + _tmp346 * _tmp353 + _tmp360 * _tmp367;
    _hessian(10, 4) = _tmp227 * _tmp268 + _tmp290 * _tmp311 + _tmp319 * _tmp326 +
                      _tmp334 * _tmp340 + _tmp347 * _tmp353 + _tmp361 * _tmp367;
    _hessian(10, 5) = _tmp229 * _tmp268 + _tmp291 * _tmp311 + _tmp320 * _tmp326 +
                      _tmp335 * _tmp340 + _tmp348 * _tmp353 + _tmp362 * _tmp367;
    _hessian(10, 6) = _tmp246 * _tmp268 + _tmp297 * _tmp311 + _tmp321 * _tmp326 +
                      _tmp336 * _tmp340 + _tmp349 * _tmp353 + _tmp363 * _tmp367;
    _hessian(10, 7) = _tmp256 * _tmp268 + _tmp303 * _tmp311 + _tmp323 * _tmp326 +
                      _tmp337 * _tmp340 + _tmp350 * _tmp353 + _tmp364 * _tmp367;
    _hessian(10, 8) = _tmp266 * _tmp268 + _tmp309 * _tmp311 + _tmp324 * _tmp326 +
                      _tmp338 * _tmp340 + _tmp351 * _tmp353 + _tmp365 * _tmp367;
    _hessian(10, 9) = _tmp267 * _tmp268 + _tmp310 * _tmp311 + _tmp325 * _tmp326 +
                      _tmp339 * _tmp340 + _tmp352 * _tmp353 + _tmp366 * _tmp367;
    _hessian(10, 10) = std::pow(_tmp268, Scalar(2)) + std::pow(_tmp311, Scalar(2)) +
                       std::pow(_tmp326, Scalar(2)) + std::pow(_tmp340, Scalar(2)) +
                       std::pow(_tmp353, Scalar(2)) + std::pow(_tmp367, Scalar(2));
    _hessian(10, 11) = 0;
    _hessian(11, 0) = _tmp166 * _tmp269 + _tmp277 * _tmp312 + _tmp314 * _tmp327 +
                      _tmp329 * _tmp341 + _tmp343 * _tmp354 + _tmp356 * _tmp368;
    _hessian(11, 1) = _tmp200 * _tmp269 + _tmp283 * _tmp312 + _tmp316 * _tmp327 +
                      _tmp331 * _tmp341 + _tmp344 * _tmp354 + _tmp358 * _tmp368;
    _hessian(11, 2) = _tmp222 * _tmp269 + _tmp288 * _tmp312 + _tmp317 * _tmp327 +
                      _tmp332 * _tmp341 + _tmp345 * _tmp354 + _tmp359 * _tmp368;
    _hessian(11, 3) = _tmp225 * _tmp269 + _tmp289 * _tmp312 + _tmp318 * _tmp327 +
                      _tmp333 * _tmp341 + _tmp346 * _tmp354 + _tmp360 * _tmp368;
    _hessian(11, 4) = _tmp227 * _tmp269 + _tmp290 * _tmp312 + _tmp319 * _tmp327 +
                      _tmp334 * _tmp341 + _tmp347 * _tmp354 + _tmp361 * _tmp368;
    _hessian(11, 5) = _tmp229 * _tmp269 + _tmp291 * _tmp312 + _tmp320 * _tmp327 +
                      _tmp335 * _tmp341 + _tmp348 * _tmp354 + _tmp362 * _tmp368;
    _hessian(11, 6) = _tmp246 * _tmp269 + _tmp297 * _tmp312 + _tmp321 * _tmp327 +
                      _tmp336 * _tmp341 + _tmp349 * _tmp354 + _tmp363 * _tmp368;
    _hessian(11, 7) = _tmp256 * _tmp269 + _tmp303 * _tmp312 + _tmp323 * _tmp327 +
                      _tmp337 * _tmp341 + _tmp350 * _tmp354 + _tmp364 * _tmp368;
    _hessian(11, 8) = _tmp266 * _tmp269 + _tmp309 * _tmp312 + _tmp324 * _tmp327 +
                      _tmp338 * _tmp341 + _tmp351 * _tmp354 + _tmp365 * _tmp368;
    _hessian(11, 9) = _tmp267 * _tmp269 + _tmp310 * _tmp312 + _tmp325 * _tmp327 +
                      _tmp339 * _tmp341 + _tmp352 * _tmp354 + _tmp366 * _tmp368;
    _hessian(11, 10) = _tmp268 * _tmp269 + _tmp311 * _tmp312 + _tmp326 * _tmp327 +
                       _tmp340 * _tmp341 + _tmp353 * _tmp354 + _tmp367 * _tmp368;
    _hessian(11, 11) = std::pow(_tmp269, Scalar(2)) + std::pow(_tmp312, Scalar(2)) +
                       std::pow(_tmp327, Scalar(2)) + std::pow(_tmp341, Scalar(2)) +
                       std::pow(_tmp354, Scalar(2)) + std::pow(_tmp368, Scalar(2));
  }

  if (rhs != nullptr) {
    Eigen::Matrix<Scalar, 12, 1>& _rhs = (*rhs);

    _rhs(0, 0) = _tmp166 * _tmp79 + _tmp277 * _tmp82 + _tmp314 * _tmp83 + _tmp329 * _tmp84 +
                 _tmp343 * _tmp85 + _tmp356 * _tmp87;
    _rhs(1, 0) = _tmp200 * _tmp79 + _tmp283 * _tmp82 + _tmp316 * _tmp83 + _tmp331 * _tmp84 +
                 _tmp344 * _tmp85 + _tmp358 * _tmp87;
    _rhs(2, 0) = _tmp222 * _tmp79 + _tmp288 * _tmp82 + _tmp317 * _tmp83 + _tmp332 * _tmp84 +
                 _tmp345 * _tmp85 + _tmp359 * _tmp87;
    _rhs(3, 0) = _tmp225 * _tmp79 + _tmp289 * _tmp82 + _tmp318 * _tmp83 + _tmp333 * _tmp84 +
                 _tmp346 * _tmp85 + _tmp360 * _tmp87;
    _rhs(4, 0) = _tmp227 * _tmp79 + _tmp290 * _tmp82 + _tmp319 * _tmp83 + _tmp334 * _tmp84 +
                 _tmp347 * _tmp85 + _tmp361 * _tmp87;
    _rhs(5, 0) = _tmp229 * _tmp79 + _tmp291 * _tmp82 + _tmp320 * _tmp83 + _tmp335 * _tmp84 +
                 _tmp348 * _tmp85 + _tmp362 * _tmp87;
    _rhs(6, 0) = _tmp246 * _tmp79 + _tmp297 * _tmp82 + _tmp321 * _tmp83 + _tmp336 * _tmp84 +
                 _tmp349 * _tmp85 + _tmp363 * _tmp87;
    _rhs(7, 0) = _tmp256 * _tmp79 + _tmp303 * _tmp82 + _tmp323 * _tmp83 + _tmp337 * _tmp84 +
                 _tmp350 * _tmp85 + _tmp364 * _tmp87;
    _rhs(8, 0) = _tmp266 * _tmp79 + _tmp309 * _tmp82 + _tmp324 * _tmp83 + _tmp338 * _tmp84 +
                 _tmp351 * _tmp85 + _tmp365 * _tmp87;
    _rhs(9, 0) = _tmp267 * _tmp79 + _tmp310 * _tmp82 + _tmp325 * _tmp83 + _tmp339 * _tmp84 +
                 _tmp352 * _tmp85 + _tmp366 * _tmp87;
    _rhs(10, 0) = _tmp268 * _tmp79 + _tmp311 * _tmp82 + _tmp326 * _tmp83 + _tmp340 * _tmp84 +
                  _tmp353 * _tmp85 + _tmp367 * _tmp87;
    _rhs(11, 0) = _tmp269 * _tmp79 + _tmp312 * _tmp82 + _tmp327 * _tmp83 + _tmp341 * _tmp84 +
                  _tmp354 * _tmp85 + _tmp368 * _tmp87;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
