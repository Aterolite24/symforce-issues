// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     cpp_templates/cam_package/CLASS.cc.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#include "./atan_camera_cal.h"

// Camera operation implementations
namespace sym {

template <typename Scalar>
Eigen::Matrix<Scalar, 2, 1> ATANCameraCal<Scalar>::FocalLength() const {
  // Total ops: 0

  // Input arrays
  const Eigen::Matrix<Scalar, 5, 1>& _self = Data();

  // Intermediate terms (0)

  // Output terms (1)
  Eigen::Matrix<Scalar, 2, 1> _focal_length;

  _focal_length(0, 0) = _self[0];
  _focal_length(1, 0) = _self[1];

  return _focal_length;
}

template <typename Scalar>
Eigen::Matrix<Scalar, 2, 1> ATANCameraCal<Scalar>::PrincipalPoint() const {
  // Total ops: 0

  // Input arrays
  const Eigen::Matrix<Scalar, 5, 1>& _self = Data();

  // Intermediate terms (0)

  // Output terms (1)
  Eigen::Matrix<Scalar, 2, 1> _principal_point;

  _principal_point(0, 0) = _self[2];
  _principal_point(1, 0) = _self[3];

  return _principal_point;
}

template <typename Scalar>
Eigen::Matrix<Scalar, 2, 1> ATANCameraCal<Scalar>::PixelFromCameraPoint(
    const Eigen::Matrix<Scalar, 3, 1>& point, const Scalar epsilon, Scalar* const is_valid) const {
  // Total ops: 29

  // Input arrays
  const Eigen::Matrix<Scalar, 5, 1>& _self = Data();

  // Intermediate terms (4)
  const Scalar _tmp0 = std::max<Scalar>(epsilon, std::fabs(point(2, 0)));
  const Scalar _tmp1 = std::pow(_tmp0, Scalar(-2));
  const Scalar _tmp2 = std::sqrt(Scalar(_tmp1 * std::pow(point(0, 0), Scalar(2)) +
                                        _tmp1 * std::pow(point(1, 0), Scalar(2)) + epsilon));
  const Scalar _tmp3 =
      std::atan(2 * _tmp2 * std::tan(Scalar(0.5) * _self[4])) / (_self[4] * _tmp0 * _tmp2);

  // Output terms (2)
  Eigen::Matrix<Scalar, 2, 1> _pixel;

  _pixel(0, 0) = _self[0] * _tmp3 * point(0, 0) + _self[2];
  _pixel(1, 0) = _self[1] * _tmp3 * point(1, 0) + _self[3];

  if (is_valid != nullptr) {
    Scalar& _is_valid = (*is_valid);

    _is_valid = std::max<Scalar>(0, (((point(2, 0)) > 0) - ((point(2, 0)) < 0)));
  }

  return _pixel;
}

template <typename Scalar>
Eigen::Matrix<Scalar, 2, 1> ATANCameraCal<Scalar>::PixelFromCameraPointWithJacobians(
    const Eigen::Matrix<Scalar, 3, 1>& point, const Scalar epsilon, Scalar* const is_valid,
    Eigen::Matrix<Scalar, 2, 5>* const pixel_D_cal,
    Eigen::Matrix<Scalar, 2, 3>* const pixel_D_point) const {
  // Total ops: 133

  // Input arrays
  const Eigen::Matrix<Scalar, 5, 1>& _self = Data();

  // Intermediate terms (52)
  const Scalar _tmp0 = Scalar(0.5) * _self[4];
  const Scalar _tmp1 = std::tan(_tmp0);
  const Scalar _tmp2 = std::pow(point(0, 0), Scalar(2));
  const Scalar _tmp3 = std::fabs(point(2, 0));
  const Scalar _tmp4 = std::max<Scalar>(_tmp3, epsilon);
  const Scalar _tmp5 = std::pow(_tmp4, Scalar(-2));
  const Scalar _tmp6 = std::pow(point(1, 0), Scalar(2));
  const Scalar _tmp7 = _tmp2 * _tmp5 + _tmp5 * _tmp6 + epsilon;
  const Scalar _tmp8 = std::sqrt(_tmp7);
  const Scalar _tmp9 = 2 * _tmp8;
  const Scalar _tmp10 = std::atan(_tmp1 * _tmp9);
  const Scalar _tmp11 = Scalar(1.0) / (_tmp8);
  const Scalar _tmp12 = Scalar(1.0) / (_self[4]);
  const Scalar _tmp13 = Scalar(1.0) / (_tmp4);
  const Scalar _tmp14 = _tmp12 * _tmp13;
  const Scalar _tmp15 = _tmp11 * _tmp14;
  const Scalar _tmp16 = _tmp10 * _tmp15;
  const Scalar _tmp17 = _self[0] * _tmp16;
  const Scalar _tmp18 = _self[1] * _tmp16;
  const Scalar _tmp19 = (((point(2, 0)) > 0) - ((point(2, 0)) < 0));
  const Scalar _tmp20 = std::tan(_tmp0);
  const Scalar _tmp21 = std::atan(_tmp20 * _tmp9);
  const Scalar _tmp22 = _tmp15 * _tmp21;
  const Scalar _tmp23 = _self[0] * point(0, 0);
  const Scalar _tmp24 = _tmp14 * _tmp23;
  const Scalar _tmp25 = std::pow(_tmp20, Scalar(2));
  const Scalar _tmp26 = 4 * _tmp7;
  const Scalar _tmp27 = Scalar(1.0) * (_tmp25 + 1) / (_tmp25 * _tmp26 + 1);
  const Scalar _tmp28 = _tmp11 * _tmp23;
  const Scalar _tmp29 = _tmp13 * _tmp21 / std::pow(_self[4], Scalar(2));
  const Scalar _tmp30 = _self[1] * point(1, 0);
  const Scalar _tmp31 = _tmp14 * _tmp30;
  const Scalar _tmp32 = _tmp10 / (_tmp7 * std::sqrt(_tmp7));
  const Scalar _tmp33 = _tmp12 * _tmp32;
  const Scalar _tmp34 = std::pow(_tmp4, Scalar(-3));
  const Scalar _tmp35 = _tmp2 * _tmp34;
  const Scalar _tmp36 = _self[0] * _tmp35;
  const Scalar _tmp37 = _tmp1 / (_tmp7 * (std::pow(_tmp1, Scalar(2)) * _tmp26 + 1));
  const Scalar _tmp38 = 2 * _tmp37;
  const Scalar _tmp39 = _tmp12 * _tmp38;
  const Scalar _tmp40 = _tmp34 * point(1, 0);
  const Scalar _tmp41 = _tmp23 * _tmp40;
  const Scalar _tmp42 = _tmp34 * _tmp6;
  const Scalar _tmp43 = _tmp19 * ((((_tmp3 - epsilon) > 0) - ((_tmp3 - epsilon) < 0)) + 1);
  const Scalar _tmp44 = -_tmp35 * _tmp43 - _tmp42 * _tmp43;
  const Scalar _tmp45 = _tmp24 * _tmp44;
  const Scalar _tmp46 = (Scalar(1) / Scalar(2)) * _tmp32;
  const Scalar _tmp47 = (Scalar(1) / Scalar(2)) * _tmp10 * _tmp43 * _tmp5;
  const Scalar _tmp48 = _self[1] * _tmp12;
  const Scalar _tmp49 = _tmp40 * _tmp48 * point(0, 0);
  const Scalar _tmp50 = _tmp42 * _tmp48;
  const Scalar _tmp51 = _tmp31 * _tmp44;

  // Output terms (4)
  Eigen::Matrix<Scalar, 2, 1> _pixel;

  _pixel(0, 0) = _self[2] + _tmp17 * point(0, 0);
  _pixel(1, 0) = _self[3] + _tmp18 * point(1, 0);

  if (is_valid != nullptr) {
    Scalar& _is_valid = (*is_valid);

    _is_valid = std::max<Scalar>(0, _tmp19);
  }

  if (pixel_D_cal != nullptr) {
    Eigen::Matrix<Scalar, 2, 5>& _pixel_D_cal = (*pixel_D_cal);

    _pixel_D_cal(0, 0) = _tmp22 * point(0, 0);
    _pixel_D_cal(0, 1) = 0;
    _pixel_D_cal(0, 2) = 1;
    _pixel_D_cal(0, 3) = 0;
    _pixel_D_cal(0, 4) = _tmp24 * _tmp27 - _tmp28 * _tmp29;
    _pixel_D_cal(1, 0) = 0;
    _pixel_D_cal(1, 1) = _tmp22 * point(1, 0);
    _pixel_D_cal(1, 2) = 0;
    _pixel_D_cal(1, 3) = 1;
    _pixel_D_cal(1, 4) = -_tmp11 * _tmp29 * _tmp30 + _tmp27 * _tmp31;
  }

  if (pixel_D_point != nullptr) {
    Eigen::Matrix<Scalar, 2, 3>& _pixel_D_point = (*pixel_D_point);

    _pixel_D_point(0, 0) = _tmp17 - _tmp33 * _tmp36 + _tmp36 * _tmp39;
    _pixel_D_point(0, 1) = -_tmp33 * _tmp41 + _tmp39 * _tmp41;
    _pixel_D_point(0, 2) = -_tmp12 * _tmp28 * _tmp47 + _tmp37 * _tmp45 - _tmp45 * _tmp46;
    _pixel_D_point(1, 0) = -_tmp32 * _tmp49 + _tmp38 * _tmp49;
    _pixel_D_point(1, 1) = _tmp18 - _tmp32 * _tmp50 + _tmp38 * _tmp50;
    _pixel_D_point(1, 2) =
        -_tmp11 * _tmp47 * _tmp48 * point(1, 0) + _tmp37 * _tmp51 - _tmp46 * _tmp51;
  }

  return _pixel;
}

template <typename Scalar>
Eigen::Matrix<Scalar, 3, 1> ATANCameraCal<Scalar>::CameraRayFromPixel(
    const Eigen::Matrix<Scalar, 2, 1>& pixel, const Scalar epsilon, Scalar* const is_valid) const {
  // Total ops: 34

  // Input arrays
  const Eigen::Matrix<Scalar, 5, 1>& _self = Data();

  // Intermediate terms (5)
  const Scalar _tmp0 = -_self[2] + pixel(0, 0);
  const Scalar _tmp1 = -_self[3] + pixel(1, 0);
  const Scalar _tmp2 =
      std::sqrt(Scalar(epsilon + std::pow(_tmp1, Scalar(2)) / std::pow(_self[1], Scalar(2)) +
                       std::pow(_tmp0, Scalar(2)) / std::pow(_self[0], Scalar(2))));
  const Scalar _tmp3 = _self[4] * _tmp2;
  const Scalar _tmp4 =
      (Scalar(1) / Scalar(2)) * std::tan(_tmp3) / (_tmp2 * std::tan(Scalar(0.5) * _self[4]));

  // Output terms (2)
  Eigen::Matrix<Scalar, 3, 1> _camera_ray;

  _camera_ray(0, 0) = _tmp0 * _tmp4 / _self[0];
  _camera_ray(1, 0) = _tmp1 * _tmp4 / _self[1];
  _camera_ray(2, 0) = 1;

  if (is_valid != nullptr) {
    Scalar& _is_valid = (*is_valid);

    _is_valid = std::max<Scalar>(0, (((-std::fabs(_tmp3) + Scalar(M_PI_2)) > 0) -
                                     ((-std::fabs(_tmp3) + Scalar(M_PI_2)) < 0)));
  }

  return _camera_ray;
}

template <typename Scalar>
Eigen::Matrix<Scalar, 3, 1> ATANCameraCal<Scalar>::CameraRayFromPixelWithJacobians(
    const Eigen::Matrix<Scalar, 2, 1>& pixel, const Scalar epsilon, Scalar* const is_valid,
    Eigen::Matrix<Scalar, 3, 5>* const point_D_cal,
    Eigen::Matrix<Scalar, 3, 2>* const point_D_pixel) const {
  // Total ops: 146

  // Input arrays
  const Eigen::Matrix<Scalar, 5, 1>& _self = Data();

  // Intermediate terms (46)
  const Scalar _tmp0 = -_self[2] + pixel(0, 0);
  const Scalar _tmp1 = Scalar(1.0) / (_self[0]);
  const Scalar _tmp2 = _tmp0 * _tmp1;
  const Scalar _tmp3 = -_self[3] + pixel(1, 0);
  const Scalar _tmp4 = std::pow(_tmp3, Scalar(2));
  const Scalar _tmp5 = std::pow(_self[1], Scalar(-2));
  const Scalar _tmp6 = std::pow(_tmp0, Scalar(2));
  const Scalar _tmp7 = std::pow(_self[0], Scalar(-2));
  const Scalar _tmp8 = _tmp4 * _tmp5 + _tmp6 * _tmp7 + epsilon;
  const Scalar _tmp9 = std::sqrt(_tmp8);
  const Scalar _tmp10 = _self[4] * _tmp9;
  const Scalar _tmp11 = std::tan(_tmp10);
  const Scalar _tmp12 = _tmp11 / _tmp9;
  const Scalar _tmp13 = Scalar(0.5) * _self[4];
  const Scalar _tmp14 = (Scalar(1) / Scalar(2)) / std::tan(_tmp13);
  const Scalar _tmp15 = _tmp12 * _tmp14;
  const Scalar _tmp16 = Scalar(1.0) / (_self[1]);
  const Scalar _tmp17 = _tmp16 * _tmp3;
  const Scalar _tmp18 = std::tan(_tmp13);
  const Scalar _tmp19 = (Scalar(1) / Scalar(2)) / _tmp18;
  const Scalar _tmp20 = _tmp12 * _tmp19;
  const Scalar _tmp21 = _tmp0 * _tmp7;
  const Scalar _tmp22 = _tmp11 / (_tmp8 * std::sqrt(_tmp8));
  const Scalar _tmp23 = _tmp19 * _tmp22;
  const Scalar _tmp24 = [&]() {
    const Scalar base = _tmp0;
    return base * base * base;
  }() / std::pow(_self[0], Scalar(4));
  const Scalar _tmp25 = std::pow(_tmp11, Scalar(2)) + 1;
  const Scalar _tmp26 = _tmp19 * _tmp25;
  const Scalar _tmp27 = _self[4] / _tmp8;
  const Scalar _tmp28 = _tmp26 * _tmp27;
  const Scalar _tmp29 = _tmp2 * _tmp26;
  const Scalar _tmp30 = _tmp4 / [&]() {
    const Scalar base = _self[1];
    return base * base * base;
  }();
  const Scalar _tmp31 = _tmp27 * _tmp30;
  const Scalar _tmp32 = _tmp23 * _tmp30;
  const Scalar _tmp33 = _tmp6 / [&]() {
    const Scalar base = _self[0];
    return base * base * base;
  }();
  const Scalar _tmp34 = _tmp27 * _tmp33;
  const Scalar _tmp35 = _tmp23 * _tmp33;
  const Scalar _tmp36 = _tmp3 * _tmp5;
  const Scalar _tmp37 = _tmp2 * _tmp36;
  const Scalar _tmp38 = std::pow(_tmp18, Scalar(2));
  const Scalar _tmp39 = Scalar(0.25) * _tmp12 * (_tmp38 + 1) / _tmp38;
  const Scalar _tmp40 = _tmp17 * _tmp26;
  const Scalar _tmp41 = [&]() {
    const Scalar base = _tmp3;
    return base * base * base;
  }() / std::pow(_self[1], Scalar(4));
  const Scalar _tmp42 = _tmp17 * _tmp21;
  const Scalar _tmp43 = _tmp14 * _tmp22;
  const Scalar _tmp44 = _tmp14 * _tmp25;
  const Scalar _tmp45 = _tmp27 * _tmp44;

  // Output terms (4)
  Eigen::Matrix<Scalar, 3, 1> _camera_ray;

  _camera_ray(0, 0) = _tmp15 * _tmp2;
  _camera_ray(1, 0) = _tmp15 * _tmp17;
  _camera_ray(2, 0) = 1;

  if (is_valid != nullptr) {
    Scalar& _is_valid = (*is_valid);

    _is_valid = std::max<Scalar>(0, (((-std::fabs(_tmp10) + Scalar(M_PI_2)) > 0) -
                                     ((-std::fabs(_tmp10) + Scalar(M_PI_2)) < 0)));
  }

  if (point_D_cal != nullptr) {
    Eigen::Matrix<Scalar, 3, 5>& _point_D_cal = (*point_D_cal);

    _point_D_cal(0, 0) = -_tmp20 * _tmp21 + _tmp23 * _tmp24 - _tmp24 * _tmp28;
    _point_D_cal(0, 1) = _tmp2 * _tmp32 - _tmp29 * _tmp31;
    _point_D_cal(0, 2) = -_tmp1 * _tmp20 - _tmp26 * _tmp34 + _tmp35;
    _point_D_cal(0, 3) = _tmp23 * _tmp37 - _tmp27 * _tmp29 * _tmp36;
    _point_D_cal(0, 4) = -_tmp2 * _tmp39 + _tmp29;
    _point_D_cal(1, 0) = _tmp17 * _tmp35 - _tmp34 * _tmp40;
    _point_D_cal(1, 1) = -_tmp20 * _tmp36 + _tmp23 * _tmp41 - _tmp28 * _tmp41;
    _point_D_cal(1, 2) = -_tmp21 * _tmp27 * _tmp40 + _tmp23 * _tmp42;
    _point_D_cal(1, 3) = -_tmp16 * _tmp20 - _tmp26 * _tmp31 + _tmp32;
    _point_D_cal(1, 4) = -_tmp17 * _tmp39 + _tmp40;
    _point_D_cal(2, 0) = 0;
    _point_D_cal(2, 1) = 0;
    _point_D_cal(2, 2) = 0;
    _point_D_cal(2, 3) = 0;
    _point_D_cal(2, 4) = 0;
  }

  if (point_D_pixel != nullptr) {
    Eigen::Matrix<Scalar, 3, 2>& _point_D_pixel = (*point_D_pixel);

    _point_D_pixel(0, 0) = _tmp1 * _tmp15 - _tmp33 * _tmp43 + _tmp34 * _tmp44;
    _point_D_pixel(0, 1) = -_tmp37 * _tmp43 + _tmp37 * _tmp45;
    _point_D_pixel(1, 0) = -_tmp42 * _tmp43 + _tmp42 * _tmp45;
    _point_D_pixel(1, 1) = _tmp15 * _tmp16 - _tmp30 * _tmp43 + _tmp31 * _tmp44;
    _point_D_pixel(2, 0) = 0;
    _point_D_pixel(2, 1) = 0;
  }

  return _camera_ray;
}

// Print implementations
std::ostream& operator<<(std::ostream& os, const ATANCameraCald& a) {
  const Eigen::IOFormat fmt(Eigen::StreamPrecision, Eigen::DontAlignCols, ", ", "\n", "[", "]");
  os << "<ATANCameraCald " << a.Data().transpose().format(fmt) << ">";
  return os;
}

std::ostream& operator<<(std::ostream& os, const ATANCameraCalf& a) {
  const Eigen::IOFormat fmt(Eigen::StreamPrecision, Eigen::DontAlignCols, ", ", "\n", "[", "]");
  os << "<ATANCameraCalf " << a.Data().transpose().format(fmt) << ">";
  return os;
}

}  // namespace sym

// Concept implementations for this class
#include "./ops/atan_camera_cal/storage_ops.h"

// Explicit instantiation
template class sym::ATANCameraCal<double>;
template class sym::ATANCameraCal<float>;
