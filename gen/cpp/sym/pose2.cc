//  -----------------------------------------------------------------------------
// This file was autogenerated by symforce. Do NOT modify by hand.
// -----------------------------------------------------------------------------

#include "./pose2.h"

// Print implementations
std::ostream& operator<<(std::ostream& os, const sym::Pose2d& a) {
  const Eigen::IOFormat fmt(Eigen::StreamPrecision, Eigen::DontAlignCols, ", ", "\n", "[", "]");
  os << "<Pose2d " << a.Data().transpose().format(fmt) << ">";
  return os;
}
std::ostream& operator<<(std::ostream& os, const sym::Pose2f& a) {
  const Eigen::IOFormat fmt(Eigen::StreamPrecision, Eigen::DontAlignCols, ", ", "\n", "[", "]");
  os << "<Pose2f " << a.Data().transpose().format(fmt) << ">";
  return os;
}

// --------------------------------------------------------------------------
// Custom generated methods
// --------------------------------------------------------------------------

template <typename Scalar>
Eigen::Matrix<Scalar, 2, 1> sym::Pose2<Scalar>::InverseCompose(
    const Eigen::Matrix<Scalar, 2, 1>& point) const {
  // Total ops: 18

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _self = Data();

  // Intermediate terms (0)

  // Output terms (1)
  Eigen::Matrix<Scalar, 2, 1> _res;

  _res(0, 0) =
      -_self[0] * _self[2] + _self[0] * point(0, 0) - _self[1] * _self[3] + _self[1] * point(1, 0);
  _res(1, 0) =
      -_self[0] * _self[3] + _self[0] * point(1, 0) + _self[1] * _self[2] - _self[1] * point(0, 0);

  return _res;
}

// Explicit instantiation
template class sym::Pose2<double>;
template class sym::Pose2<float>;
