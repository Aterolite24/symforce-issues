//  -----------------------------------------------------------------------------
// This file was autogenerated by symforce. Do NOT modify by hand.
// -----------------------------------------------------------------------------

#include "./linear_camera_cal.h"

// Explicit instantiation
template class cam::LinearCameraCal<double>;
template class cam::LinearCameraCal<float>;

// Camera operation implementations
namespace cam {

template <typename Scalar>
Eigen::Matrix<Scalar, 2, 1> LinearCameraCal<Scalar>::PixelFromCameraPoint(const Eigen::Matrix<Scalar, 3, 1>& point, const Scalar epsilon, Scalar* const is_valid) const {
    // Input arrays
    const Eigen::Matrix<Scalar, 4, 1>& _self = Data();
    assert( is_valid != nullptr );

    // Intermediate terms (1)
    const Scalar _tmp0 = 1.0 / (std::max<Scalar>(epsilon, std::fabs(point[2])));

    // Output terms (2)
    Eigen::Matrix<Scalar, 2, 1> _pixel;
    _pixel(0, 0) = _self[0]*_tmp0*point[0] + _self[2];
    _pixel(1, 0) = _self[1]*_tmp0*point[1] + _self[3];

    Scalar _is_valid;
    _is_valid = std::max<Scalar>(0, (((point[2]) > 0) - ((point[2]) < 0)));
    *is_valid = _is_valid;

    return _pixel;
}

template <typename Scalar>
Eigen::Matrix<Scalar, 3, 1> LinearCameraCal<Scalar>::CameraRayFromPixel(const Eigen::Matrix<Scalar, 2, 1>& pixel, const Scalar epsilon, Scalar* const is_valid) const {
    // Input arrays
    const Eigen::Matrix<Scalar, 4, 1>& _self = Data();
    assert( is_valid != nullptr );

    // Intermediate terms (0)

    // Output terms (2)
    Eigen::Matrix<Scalar, 3, 1> _camera_ray;
    _camera_ray(0, 0) = (-_self[2] + pixel[0])/_self[0];
    _camera_ray(1, 0) = (-_self[3] + pixel[1])/_self[1];
    _camera_ray(2, 0) = 1;

    Scalar _is_valid;
    _is_valid = 1;
    *is_valid = _is_valid;

    return _camera_ray;
}


}  // namespace cam

// Print implementations
std::ostream& operator<<(std::ostream& os, const cam::LinearCameraCald& a) {
    const Eigen::IOFormat fmt(Eigen::StreamPrecision, Eigen::DontAlignCols, ", ", "\n", "[", "]");
    os << "<LinearCameraCald " << a.Data().transpose().format(fmt) << ">";
    return os;
}
std::ostream& operator<<(std::ostream& os, const cam::LinearCameraCalf& a) {
    const Eigen::IOFormat fmt(Eigen::StreamPrecision, Eigen::DontAlignCols, ", ", "\n", "[", "]");
    os << "<LinearCameraCalf " << a.Data().transpose().format(fmt) << ">";
    return os;
}


// Concept implementations for this class
#include "./ops/linear_camera_cal/storage_ops.cc"
