//  -----------------------------------------------------------------------------
// This file was autogenerated by symforce. Do NOT modify by hand.
// -----------------------------------------------------------------------------
/**
C++ StorageOps concept. This template class is specialized per type.

See `symforce.ops.group_ops` for details.
*/
#pragma once

namespace geo {

template <typename T>
struct GroupOps {
  static T Identity();
  static T Inverse(const T& a);
  static T Compose(const T& a, const T& b);
  static T Between(const T& a, const T& b);
};

// Template specializations for scalars
template <typename T>
struct ScalarGroupOps {
  using Scalar = T;
  static_assert(std::is_floating_point<T>::value, "");

  static T Identity() {
    return 0.0;
  }

  static T Inverse(const T& a) {
    return -a;
  }

  static T Compose(const T& a, const T& b) {
    return b + a;
  }

  static T Between(const T& a, const T& b) {
    return b - a;
  }
};

template<>
struct GroupOps<double> : public ScalarGroupOps<double> {};
template<>
struct GroupOps<float> : public ScalarGroupOps<float> {};


// Template specialization for fixed size matrices
template <typename ScalarType, int Rows, int Cols>
struct MatrixGroupOps {
  using Scalar = ScalarType;
  using T = Eigen::Matrix<Scalar, Rows, Cols>;
  static_assert(std::is_floating_point<ScalarType>::value, "");

  static T Identity() {
    return T::Zero();
  }

  static T Inverse(const T& a) {
    return -a;
  }

  static T Compose(const T& a, const T& b) {
    return b + a;
  }

  static T Between(const T& a, const T& b) {
    return b - a;
  }
};

template<>
struct GroupOps<Eigen::Matrix<double, 1, 1>> : public MatrixGroupOps<double, 1, 1> {};
template<>
struct GroupOps<Eigen::Matrix<double, 2, 1>> : public MatrixGroupOps<double, 2, 1> {};
template<>
struct GroupOps<Eigen::Matrix<double, 3, 1>> : public MatrixGroupOps<double, 3, 1> {};
template<>
struct GroupOps<Eigen::Matrix<double, 4, 1>> : public MatrixGroupOps<double, 4, 1> {};
template<>
struct GroupOps<Eigen::Matrix<double, 5, 1>> : public MatrixGroupOps<double, 5, 1> {};
template<>
struct GroupOps<Eigen::Matrix<double, 6, 1>> : public MatrixGroupOps<double, 6, 1> {};
template<>
struct GroupOps<Eigen::Matrix<double, 7, 1>> : public MatrixGroupOps<double, 7, 1> {};
template<>
struct GroupOps<Eigen::Matrix<double, 8, 1>> : public MatrixGroupOps<double, 8, 1> {};
template<>
struct GroupOps<Eigen::Matrix<double, 9, 1>> : public MatrixGroupOps<double, 9, 1> {};
template<>
struct GroupOps<Eigen::Matrix<float, 1, 1>> : public MatrixGroupOps<float, 1, 1> {};
template<>
struct GroupOps<Eigen::Matrix<float, 2, 1>> : public MatrixGroupOps<float, 2, 1> {};
template<>
struct GroupOps<Eigen::Matrix<float, 3, 1>> : public MatrixGroupOps<float, 3, 1> {};
template<>
struct GroupOps<Eigen::Matrix<float, 4, 1>> : public MatrixGroupOps<float, 4, 1> {};
template<>
struct GroupOps<Eigen::Matrix<float, 5, 1>> : public MatrixGroupOps<float, 5, 1> {};
template<>
struct GroupOps<Eigen::Matrix<float, 6, 1>> : public MatrixGroupOps<float, 6, 1> {};
template<>
struct GroupOps<Eigen::Matrix<float, 7, 1>> : public MatrixGroupOps<float, 7, 1> {};
template<>
struct GroupOps<Eigen::Matrix<float, 8, 1>> : public MatrixGroupOps<float, 8, 1> {};
template<>
struct GroupOps<Eigen::Matrix<float, 9, 1>> : public MatrixGroupOps<float, 9, 1> {};

}  // namespace geo
