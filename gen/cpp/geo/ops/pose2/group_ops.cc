//  ----------------------------------------------------------------------------
// This file was autogenerated by symforce. Do NOT modify by hand.
// -----------------------------------------------------------------------------

#include "./group_ops.h"

namespace geo {
namespace pose2 {

/**
 *
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: <lambda>
 * Arg type(s):
 * Return type(s): Pose2
 *
 */
template <typename Scalar>
geo::Pose2<Scalar> GroupOps<Scalar>::Identity() {
    // Input arrays

    // Intermediate terms (0)

    // Output terms (1)
    Eigen::Matrix<Scalar, 4, 1> _res;

    _res[0] = 1;
    _res[1] = 0;
    _res[2] = 0;
    _res[3] = 0;


    return geo::Pose2<Scalar>(_res);
}

/**
 *
 * Inverse of the element a.
 *
 * Args:
 *     a (Element):
 *
 * Returns:
 *     Element: b such that a @ b = identity
 *
 */
template <typename Scalar>
geo::Pose2<Scalar> GroupOps<Scalar>::Inverse(const geo::Pose2<Scalar>& a) {
    // Input arrays
    const Eigen::Matrix<Scalar, 4, 1>& _a = a.Data();

    // Intermediate terms (3)
    const Scalar _tmp0 = 1.0 / ((_a[0] * _a[0]) + (_a[1] * _a[1]));
    const Scalar _tmp1 = _a[0]*_tmp0;
    const Scalar _tmp2 = _a[1]*_tmp0;

    // Output terms (1)
    Eigen::Matrix<Scalar, 4, 1> _res;

    _res[0] = _tmp1;
    _res[1] = -_tmp2;
    _res[2] = -_a[2]*_tmp1 - _a[3]*_tmp2;
    _res[3] = _a[2]*_tmp2 - _a[3]*_tmp1;


    return geo::Pose2<Scalar>(_res);
}

/**
 *
 * Composition of two elements in the group.
 *
 * Args:
 *     a (Element):
 *     b (Element):
 *
 * Returns:
 *     Element: a @ b
 *
 */
template <typename Scalar>
geo::Pose2<Scalar> GroupOps<Scalar>::Compose(const geo::Pose2<Scalar>& a, const geo::Pose2<Scalar>& b) {
    // Input arrays
    const Eigen::Matrix<Scalar, 4, 1>& _a = a.Data();
    const Eigen::Matrix<Scalar, 4, 1>& _b = b.Data();

    // Intermediate terms (0)

    // Output terms (1)
    Eigen::Matrix<Scalar, 4, 1> _res;

    _res[0] = _a[0]*_b[0] - _a[1]*_b[1];
    _res[1] = _a[0]*_b[1] + _a[1]*_b[0];
    _res[2] = _a[0]*_b[2] - _a[1]*_b[3] + _a[2];
    _res[3] = _a[0]*_b[3] + _a[1]*_b[2] + _a[3];


    return geo::Pose2<Scalar>(_res);
}

/**
 *
 * Returns the element that when composed with a produces b. For vector spaces it is b - a.
 *
 * Implementation is simply `compose(inverse(a), b)`.
 *
 * Args:
 *     a (Element):
 *     b (Element):
 *
 * Returns:
 *     Element: c such that a @ c = b
 *
 */
template <typename Scalar>
geo::Pose2<Scalar> GroupOps<Scalar>::Between(const geo::Pose2<Scalar>& a, const geo::Pose2<Scalar>& b) {
    // Input arrays
    const Eigen::Matrix<Scalar, 4, 1>& _a = a.Data();
    const Eigen::Matrix<Scalar, 4, 1>& _b = b.Data();

    // Intermediate terms (5)
    const Scalar _tmp0 = 1.0 / ((_a[0] * _a[0]) + (_a[1] * _a[1]));
    const Scalar _tmp1 = _a[1]*_tmp0;
    const Scalar _tmp2 = _a[0]*_tmp0;
    const Scalar _tmp3 = _a[3]*_tmp0;
    const Scalar _tmp4 = _a[2]*_tmp0;

    // Output terms (1)
    Eigen::Matrix<Scalar, 4, 1> _res;

    _res[0] = _b[0]*_tmp2 + _b[1]*_tmp1;
    _res[1] = -_b[0]*_tmp1 + _b[1]*_tmp2;
    _res[2] = -_a[0]*_tmp4 - _a[1]*_tmp3 + _b[2]*_tmp2 + _b[3]*_tmp1;
    _res[3] = -_a[0]*_tmp3 + _a[1]*_tmp4 - _b[2]*_tmp1 + _b[3]*_tmp2;


    return geo::Pose2<Scalar>(_res);
}


}  // namespace pose2
}  // namespace geo

// Explicit instantiation
template struct geo::pose2::GroupOps<double>;
template struct geo::pose2::GroupOps<float>;
