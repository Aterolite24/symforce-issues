//  ----------------------------------------------------------------------------
// This file was autogenerated by symforce. Do NOT modify by hand.
// -----------------------------------------------------------------------------

#include "./group_ops.h"

namespace geo {
namespace pose3 {

/**
 *
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: <lambda>
 * Arg type(s):
 * Return type(s): Pose3
 *
 */
template <typename Scalar>
geo::Pose3<Scalar> GroupOps<Scalar>::Identity() {
    // Input arrays

    // Intermediate terms (0)

    // Output terms (1)
    Eigen::Matrix<Scalar, 7, 1> _res;
    _res[0] = 0;
    _res[1] = 0;
    _res[2] = 0;
    _res[3] = 1;
    _res[4] = 0;
    _res[5] = 0;
    _res[6] = 0;

    return geo::Pose3<Scalar>(_res);
}

/**
 *
 * Inverse of the element a.
 *
 * Args:
 *     a (Element):
 *
 * Returns:
 *     Element: b such that a @ b = identity
 *
 */
template <typename Scalar>
geo::Pose3<Scalar> GroupOps<Scalar>::Inverse(const geo::Pose3<Scalar>& a) {
    // Input arrays
    const Eigen::Matrix<Scalar, 7, 1>& _a = a.Data();

    // Intermediate terms (11)
    const Scalar _tmp0 = 2*_a[1]*_a[3];
    const Scalar _tmp1 = 2*_a[0];
    const Scalar _tmp2 = _a[2]*_tmp1;
    const Scalar _tmp3 = 2*_a[2];
    const Scalar _tmp4 = _a[3]*_tmp3;
    const Scalar _tmp5 = _a[1]*_tmp1;
    const Scalar _tmp6 = -2*(_a[1] * _a[1]);
    const Scalar _tmp7 = -2*(_a[2] * _a[2]) + 1;
    const Scalar _tmp8 = _a[3]*_tmp1;
    const Scalar _tmp9 = _a[1]*_tmp3;
    const Scalar _tmp10 = -2*(_a[0] * _a[0]);

    // Output terms (1)
    Eigen::Matrix<Scalar, 7, 1> _res;
    _res[0] = -_a[0];
    _res[1] = -_a[1];
    _res[2] = -_a[2];
    _res[3] = _a[3];
    _res[4] = -_a[4]*(_tmp6 + _tmp7) - _a[5]*(_tmp4 + _tmp5) - _a[6]*(-_tmp0 + _tmp2);
    _res[5] = -_a[4]*(-_tmp4 + _tmp5) - _a[5]*(_tmp10 + _tmp7) - _a[6]*(_tmp8 + _tmp9);
    _res[6] = -_a[4]*(_tmp0 + _tmp2) - _a[5]*(-_tmp8 + _tmp9) - _a[6]*(_tmp10 + _tmp6 + 1);

    return geo::Pose3<Scalar>(_res);
}

/**
 *
 * Composition of two elements in the group.
 *
 * Args:
 *     a (Element):
 *     b (Element):
 *
 * Returns:
 *     Element: a @ b
 *
 */
template <typename Scalar>
geo::Pose3<Scalar> GroupOps<Scalar>::Compose(const geo::Pose3<Scalar>& a, const geo::Pose3<Scalar>& b) {
    // Input arrays
    const Eigen::Matrix<Scalar, 7, 1>& _a = a.Data();
    const Eigen::Matrix<Scalar, 7, 1>& _b = b.Data();

    // Intermediate terms (11)
    const Scalar _tmp0 = 2*_a[3];
    const Scalar _tmp1 = _a[1]*_tmp0;
    const Scalar _tmp2 = 2*_a[2];
    const Scalar _tmp3 = _a[0]*_tmp2;
    const Scalar _tmp4 = _a[2]*_tmp0;
    const Scalar _tmp5 = 2*_a[0]*_a[1];
    const Scalar _tmp6 = -2*(_a[2] * _a[2]);
    const Scalar _tmp7 = -2*(_a[1] * _a[1]);
    const Scalar _tmp8 = _a[0]*_tmp0;
    const Scalar _tmp9 = _a[1]*_tmp2;
    const Scalar _tmp10 = -2*(_a[0] * _a[0]) + 1;

    // Output terms (1)
    Eigen::Matrix<Scalar, 7, 1> _res;
    _res[0] = _a[0]*_b[3] + _a[1]*_b[2] - _a[2]*_b[1] + _a[3]*_b[0];
    _res[1] = -_a[0]*_b[2] + _a[1]*_b[3] + _a[2]*_b[0] + _a[3]*_b[1];
    _res[2] = _a[0]*_b[1] - _a[1]*_b[0] + _a[2]*_b[3] + _a[3]*_b[2];
    _res[3] = -_a[0]*_b[0] - _a[1]*_b[1] - _a[2]*_b[2] + _a[3]*_b[3];
    _res[4] = _a[4] + _b[4]*(_tmp6 + _tmp7 + 1) + _b[5]*(-_tmp4 + _tmp5) + _b[6]*(_tmp1 + _tmp3);
    _res[5] = _a[5] + _b[4]*(_tmp4 + _tmp5) + _b[5]*(_tmp10 + _tmp6) + _b[6]*(-_tmp8 + _tmp9);
    _res[6] = _a[6] + _b[4]*(-_tmp1 + _tmp3) + _b[5]*(_tmp8 + _tmp9) + _b[6]*(_tmp10 + _tmp7);

    return geo::Pose3<Scalar>(_res);
}

/**
 *
 * Returns the element that when composed with a produces b. For vector spaces it is b - a.
 *
 * Implementation is simply `compose(inverse(a), b)`.
 *
 * Args:
 *     a (Element):
 *     b (Element):
 *
 * Returns:
 *     Element: c such that a @ c = b
 *
 */
template <typename Scalar>
geo::Pose3<Scalar> GroupOps<Scalar>::Between(const geo::Pose3<Scalar>& a, const geo::Pose3<Scalar>& b) {
    // Input arrays
    const Eigen::Matrix<Scalar, 7, 1>& _a = a.Data();
    const Eigen::Matrix<Scalar, 7, 1>& _b = b.Data();

    // Intermediate terms (20)
    const Scalar _tmp0 = 2*_a[1]*_a[3];
    const Scalar _tmp1 = 2*_a[0];
    const Scalar _tmp2 = _a[2]*_tmp1;
    const Scalar _tmp3 = -_tmp0 + _tmp2;
    const Scalar _tmp4 = 2*_a[2];
    const Scalar _tmp5 = _a[3]*_tmp4;
    const Scalar _tmp6 = _a[1]*_tmp1;
    const Scalar _tmp7 = _tmp5 + _tmp6;
    const Scalar _tmp8 = -2*(_a[2] * _a[2]);
    const Scalar _tmp9 = -2*(_a[1] * _a[1]);
    const Scalar _tmp10 = _tmp8 + _tmp9 + 1;
    const Scalar _tmp11 = _a[3]*_tmp1;
    const Scalar _tmp12 = _a[1]*_tmp4;
    const Scalar _tmp13 = _tmp11 + _tmp12;
    const Scalar _tmp14 = -2*(_a[0] * _a[0]) + 1;
    const Scalar _tmp15 = _tmp14 + _tmp8;
    const Scalar _tmp16 = -_tmp5 + _tmp6;
    const Scalar _tmp17 = _tmp14 + _tmp9;
    const Scalar _tmp18 = -_tmp11 + _tmp12;
    const Scalar _tmp19 = _tmp0 + _tmp2;

    // Output terms (1)
    Eigen::Matrix<Scalar, 7, 1> _res;
    _res[0] = -_a[0]*_b[3] - _a[1]*_b[2] + _a[2]*_b[1] + _a[3]*_b[0];
    _res[1] = _a[0]*_b[2] - _a[1]*_b[3] - _a[2]*_b[0] + _a[3]*_b[1];
    _res[2] = -_a[0]*_b[1] + _a[1]*_b[0] - _a[2]*_b[3] + _a[3]*_b[2];
    _res[3] = _a[0]*_b[0] + _a[1]*_b[1] + _a[2]*_b[2] + _a[3]*_b[3];
    _res[4] = -_a[4]*_tmp10 - _a[5]*_tmp7 - _a[6]*_tmp3 + _b[4]*_tmp10 + _b[5]*_tmp7 + _b[6]*_tmp3;
    _res[5] = -_a[4]*_tmp16 - _a[5]*_tmp15 - _a[6]*_tmp13 + _b[4]*_tmp16 + _b[5]*_tmp15 + _b[6]*_tmp13;
    _res[6] = -_a[4]*_tmp19 - _a[5]*_tmp18 - _a[6]*_tmp17 + _b[4]*_tmp19 + _b[5]*_tmp18 + _b[6]*_tmp17;

    return geo::Pose3<Scalar>(_res);
}


}  // namespace pose3
}  // namespace geo

// Explicit instantiation
template struct geo::pose3::GroupOps<double>;
template struct geo::pose3::GroupOps<float>;
