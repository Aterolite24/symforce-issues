//  ----------------------------------------------------------------------------
// This file was autogenerated by symforce. Do NOT modify by hand.
// -----------------------------------------------------------------------------

#include <algorithm>
#include <cmath>
#include <geo/pose3.h>

#include "./lie_group_ops.h"

namespace geo {
namespace pose3 {

template <typename Scalar>
geo::Pose3<Scalar> LieGroupOps<Scalar>::FromTangent(const Eigen::Matrix<Scalar, 6, 1>& vec, const Scalar epsilon) {
    // Input arrays

    // Intermediate terms (19)
    const Scalar _tmp0 = (vec(2, 0) * vec(2, 0));
    const Scalar _tmp1 = (vec(1, 0) * vec(1, 0));
    const Scalar _tmp2 = (vec(0, 0) * vec(0, 0));
    const Scalar _tmp3 = _tmp0 + _tmp1 + _tmp2 + (epsilon * epsilon);
    const Scalar _tmp4 = std::sqrt(_tmp3);
    const Scalar _tmp5 = (1.0/2.0)*_tmp4;
    const Scalar _tmp6 = std::sin(_tmp5)/_tmp4;
    const Scalar _tmp7 = (_tmp4 - std::sin(_tmp4))/(_tmp3 * std::sqrt(_tmp3));
    const Scalar _tmp8 = _tmp7*vec(0, 0);
    const Scalar _tmp9 = _tmp8*vec(2, 0);
    const Scalar _tmp10 = (-std::cos(_tmp4) + 1)/_tmp3;
    const Scalar _tmp11 = _tmp10*vec(1, 0);
    const Scalar _tmp12 = _tmp8*vec(1, 0);
    const Scalar _tmp13 = _tmp10*vec(2, 0);
    const Scalar _tmp14 = -_tmp1;
    const Scalar _tmp15 = -_tmp0;
    const Scalar _tmp16 = _tmp7*vec(1, 0)*vec(2, 0);
    const Scalar _tmp17 = _tmp10*vec(0, 0);
    const Scalar _tmp18 = -_tmp2;

    // Output terms (1)
    Eigen::Matrix<Scalar, 7, 1> _res;

    _res[0] = _tmp6*vec(0, 0);
    _res[1] = _tmp6*vec(1, 0);
    _res[2] = _tmp6*vec(2, 0);
    _res[3] = std::cos(_tmp5);
    _res[4] = vec(3, 0)*(_tmp7*(_tmp14 + _tmp15) + 1) + vec(4, 0)*(_tmp12 - _tmp13) + vec(5, 0)*(_tmp11 + _tmp9);
    _res[5] = vec(3, 0)*(_tmp12 + _tmp13) + vec(4, 0)*(_tmp7*(_tmp15 + _tmp18) + 1) + vec(5, 0)*(_tmp16 - _tmp17);
    _res[6] = vec(3, 0)*(-_tmp11 + _tmp9) + vec(4, 0)*(_tmp16 + _tmp17) + vec(5, 0)*(_tmp7*(_tmp14 + _tmp18) + 1);

    return geo::Pose3<Scalar>(_res);
}

template <typename Scalar>
Eigen::Matrix<Scalar, 6, 1> LieGroupOps<Scalar>::ToTangent(const geo::Pose3<Scalar>& a, const Scalar epsilon) {
    // Input arrays
    const Eigen::Matrix<Scalar, 7, 1>& _a = a.Data();

    // Intermediate terms (25)
    const Scalar _tmp0 = std::max<Scalar>(epsilon - 1, std::min<Scalar>(_a[3], -epsilon + 1));
    const Scalar _tmp1 = -(_tmp0 * _tmp0) + 1;
    const Scalar _tmp2 = std::acos(_tmp0);
    const Scalar _tmp3 = _tmp2/std::sqrt(_tmp1);
    const Scalar _tmp4 = 2*_tmp3;
    const Scalar _tmp5 = _a[1]*_tmp3;
    const Scalar _tmp6 = 4*(_tmp2 * _tmp2)/_tmp1;
    const Scalar _tmp7 = (_a[2] * _a[2])*_tmp6;
    const Scalar _tmp8 = (_a[1] * _a[1])*_tmp6;
    const Scalar _tmp9 = (_a[0] * _a[0])*_tmp6;
    const Scalar _tmp10 = _tmp7 + _tmp8 + _tmp9 + epsilon;
    const Scalar _tmp11 = std::sqrt(_tmp10);
    const Scalar _tmp12 = 0.5*_tmp11;
    const Scalar _tmp13 = (-1.0/2.0*_tmp11*std::cos(_tmp12)/std::sin(_tmp12) + 1)/_tmp10;
    const Scalar _tmp14 = _a[2]*_tmp13*_tmp6;
    const Scalar _tmp15 = _a[0]*_tmp14;
    const Scalar _tmp16 = 1.0*_tmp5;
    const Scalar _tmp17 = _a[0]*_a[1]*_tmp13*_tmp6;
    const Scalar _tmp18 = 1.0*_tmp3;
    const Scalar _tmp19 = _a[2]*_tmp18;
    const Scalar _tmp20 = -_tmp8;
    const Scalar _tmp21 = -_tmp7;
    const Scalar _tmp22 = _a[1]*_tmp14;
    const Scalar _tmp23 = _a[0]*_tmp18;
    const Scalar _tmp24 = -_tmp9;

    // Output terms (1)
    Eigen::Matrix<Scalar, 6, 1> _res;

    _res(0, 0) = _a[0]*_tmp4;
    _res(1, 0) = 2*_tmp5;
    _res(2, 0) = _a[2]*_tmp4;
    _res(3, 0) = _a[4]*(_tmp13*(_tmp20 + _tmp21) + 1.0) + _a[5]*(_tmp17 + _tmp19) + _a[6]*(_tmp15 - _tmp16);
    _res(4, 0) = _a[4]*(_tmp17 - _tmp19) + _a[5]*(_tmp13*(_tmp21 + _tmp24) + 1.0) + _a[6]*(_tmp22 + _tmp23);
    _res(5, 0) = _a[4]*(_tmp15 + _tmp16) + _a[5]*(_tmp22 - _tmp23) + _a[6]*(_tmp13*(_tmp20 + _tmp24) + 1.0);

    return _res;
}

template <typename Scalar>
geo::Pose3<Scalar> LieGroupOps<Scalar>::Retract(const geo::Pose3<Scalar>& a, const Eigen::Matrix<Scalar, 6, 1>& vec, const Scalar epsilon) {
    // Input arrays
    const Eigen::Matrix<Scalar, 7, 1>& _a = a.Data();

    // Intermediate terms (38)
    const Scalar _tmp0 = (vec(2, 0) * vec(2, 0));
    const Scalar _tmp1 = (vec(1, 0) * vec(1, 0));
    const Scalar _tmp2 = (vec(0, 0) * vec(0, 0));
    const Scalar _tmp3 = _tmp0 + _tmp1 + _tmp2 + (epsilon * epsilon);
    const Scalar _tmp4 = std::sqrt(_tmp3);
    const Scalar _tmp5 = (1.0/2.0)*_tmp4;
    const Scalar _tmp6 = std::sin(_tmp5)/_tmp4;
    const Scalar _tmp7 = _tmp6*vec(2, 0);
    const Scalar _tmp8 = _tmp6*vec(1, 0);
    const Scalar _tmp9 = std::cos(_tmp5);
    const Scalar _tmp10 = _a[3]*_tmp6;
    const Scalar _tmp11 = _tmp6*vec(0, 0);
    const Scalar _tmp12 = 2*_a[1];
    const Scalar _tmp13 = _a[3]*_tmp12;
    const Scalar _tmp14 = 2*_a[0];
    const Scalar _tmp15 = _a[2]*_tmp14;
    const Scalar _tmp16 = -_tmp2;
    const Scalar _tmp17 = -_tmp1;
    const Scalar _tmp18 = (_tmp4 - std::sin(_tmp4))/(_tmp3 * std::sqrt(_tmp3));
    const Scalar _tmp19 = _tmp18*vec(1, 0)*vec(2, 0);
    const Scalar _tmp20 = (-std::cos(_tmp4) + 1)/_tmp3;
    const Scalar _tmp21 = _tmp20*vec(0, 0);
    const Scalar _tmp22 = _tmp18*vec(0, 0);
    const Scalar _tmp23 = _tmp22*vec(2, 0);
    const Scalar _tmp24 = _tmp20*vec(1, 0);
    const Scalar _tmp25 = vec(3, 0)*(_tmp23 - _tmp24) + vec(4, 0)*(_tmp19 + _tmp21) + vec(5, 0)*(_tmp18*(_tmp16 + _tmp17) + 1);
    const Scalar _tmp26 = 2*_a[2]*_a[3];
    const Scalar _tmp27 = _a[0]*_tmp12;
    const Scalar _tmp28 = -_tmp0;
    const Scalar _tmp29 = _tmp22*vec(1, 0);
    const Scalar _tmp30 = _tmp20*vec(2, 0);
    const Scalar _tmp31 = vec(3, 0)*(_tmp29 + _tmp30) + vec(4, 0)*(_tmp18*(_tmp16 + _tmp28) + 1) + vec(5, 0)*(_tmp19 - _tmp21);
    const Scalar _tmp32 = -2*(_a[2] * _a[2]);
    const Scalar _tmp33 = -2*(_a[1] * _a[1]) + 1;
    const Scalar _tmp34 = vec(3, 0)*(_tmp18*(_tmp17 + _tmp28) + 1) + vec(4, 0)*(_tmp29 - _tmp30) + vec(5, 0)*(_tmp23 + _tmp24);
    const Scalar _tmp35 = _a[3]*_tmp14;
    const Scalar _tmp36 = _a[2]*_tmp12;
    const Scalar _tmp37 = -2*(_a[0] * _a[0]);

    // Output terms (1)
    Eigen::Matrix<Scalar, 7, 1> _res;

    _res[0] = _a[0]*_tmp9 + _a[1]*_tmp7 - _a[2]*_tmp8 + _tmp10*vec(0, 0);
    _res[1] = -_a[0]*_tmp7 + _a[1]*_tmp9 + _a[2]*_tmp11 + _a[3]*_tmp8;
    _res[2] = _a[0]*_tmp8 - _a[1]*_tmp11 + _a[2]*_tmp9 + _tmp10*vec(2, 0);
    _res[3] = -_a[0]*_tmp11 - _a[1]*_tmp8 - _a[2]*_tmp7 + _a[3]*_tmp9;
    _res[4] = _a[4] + _tmp25*(_tmp13 + _tmp15) + _tmp31*(-_tmp26 + _tmp27) + _tmp34*(_tmp32 + _tmp33);
    _res[5] = _a[5] + _tmp25*(-_tmp35 + _tmp36) + _tmp31*(_tmp32 + _tmp37 + 1) + _tmp34*(_tmp26 + _tmp27);
    _res[6] = _a[6] + _tmp25*(_tmp33 + _tmp37) + _tmp31*(_tmp35 + _tmp36) + _tmp34*(-_tmp13 + _tmp15);

    return geo::Pose3<Scalar>(_res);
}

template <typename Scalar>
Eigen::Matrix<Scalar, 6, 1> LieGroupOps<Scalar>::LocalCoordinates(const geo::Pose3<Scalar>& a, const geo::Pose3<Scalar>& b, const Scalar epsilon) {
    // Input arrays
    const Eigen::Matrix<Scalar, 7, 1>& _a = a.Data();
    const Eigen::Matrix<Scalar, 7, 1>& _b = b.Data();

    // Intermediate terms (51)
    const Scalar _tmp0 = -_a[0]*_b[3] - _a[1]*_b[2] + _a[2]*_b[1] + _a[3]*_b[0];
    const Scalar _tmp1 = std::max<Scalar>(epsilon - 1, std::min<Scalar>(-epsilon + 1, _a[0]*_b[0] + _a[1]*_b[1] + _a[2]*_b[2] + _a[3]*_b[3]));
    const Scalar _tmp2 = -(_tmp1 * _tmp1) + 1;
    const Scalar _tmp3 = std::acos(_tmp1);
    const Scalar _tmp4 = _tmp3/std::sqrt(_tmp2);
    const Scalar _tmp5 = 2*_tmp4;
    const Scalar _tmp6 = _a[0]*_b[2] - _a[1]*_b[3] - _a[2]*_b[0] + _a[3]*_b[1];
    const Scalar _tmp7 = -_a[0]*_b[1] + _a[1]*_b[0] - _a[2]*_b[3] + _a[3]*_b[2];
    const Scalar _tmp8 = _tmp4*_tmp7;
    const Scalar _tmp9 = -2*(_a[1] * _a[1]);
    const Scalar _tmp10 = -2*(_a[0] * _a[0]) + 1;
    const Scalar _tmp11 = _tmp10 + _tmp9;
    const Scalar _tmp12 = 2*_a[3];
    const Scalar _tmp13 = _a[0]*_tmp12;
    const Scalar _tmp14 = 2*_a[2];
    const Scalar _tmp15 = _a[1]*_tmp14;
    const Scalar _tmp16 = -_tmp13 + _tmp15;
    const Scalar _tmp17 = _a[1]*_tmp12;
    const Scalar _tmp18 = _a[0]*_tmp14;
    const Scalar _tmp19 = _tmp17 + _tmp18;
    const Scalar _tmp20 = -_a[4]*_tmp19 - _a[5]*_tmp16 - _a[6]*_tmp11 + _b[4]*_tmp19 + _b[5]*_tmp16 + _b[6]*_tmp11;
    const Scalar _tmp21 = 4*(_tmp3 * _tmp3)/_tmp2;
    const Scalar _tmp22 = _tmp21*(_tmp6 * _tmp6);
    const Scalar _tmp23 = _tmp21*(_tmp7 * _tmp7);
    const Scalar _tmp24 = (_tmp0 * _tmp0)*_tmp21;
    const Scalar _tmp25 = _tmp22 + _tmp23 + _tmp24 + epsilon;
    const Scalar _tmp26 = std::sqrt(_tmp25);
    const Scalar _tmp27 = 0.5*_tmp26;
    const Scalar _tmp28 = (-1.0/2.0*_tmp26*std::cos(_tmp27)/std::sin(_tmp27) + 1)/_tmp25;
    const Scalar _tmp29 = _tmp21*_tmp28*_tmp7;
    const Scalar _tmp30 = _tmp0*_tmp29;
    const Scalar _tmp31 = 1.0*_tmp4;
    const Scalar _tmp32 = _tmp31*_tmp6;
    const Scalar _tmp33 = _tmp0*_tmp21*_tmp28*_tmp6;
    const Scalar _tmp34 = 1.0*_tmp8;
    const Scalar _tmp35 = _tmp13 + _tmp15;
    const Scalar _tmp36 = -2*(_a[2] * _a[2]);
    const Scalar _tmp37 = _tmp10 + _tmp36;
    const Scalar _tmp38 = _a[3]*_tmp14;
    const Scalar _tmp39 = 2*_a[0]*_a[1];
    const Scalar _tmp40 = -_tmp38 + _tmp39;
    const Scalar _tmp41 = -_a[4]*_tmp40 - _a[5]*_tmp37 - _a[6]*_tmp35 + _b[4]*_tmp40 + _b[5]*_tmp37 + _b[6]*_tmp35;
    const Scalar _tmp42 = -_tmp17 + _tmp18;
    const Scalar _tmp43 = _tmp38 + _tmp39;
    const Scalar _tmp44 = _tmp36 + _tmp9 + 1;
    const Scalar _tmp45 = -_a[4]*_tmp44 - _a[5]*_tmp43 - _a[6]*_tmp42 + _b[4]*_tmp44 + _b[5]*_tmp43 + _b[6]*_tmp42;
    const Scalar _tmp46 = -_tmp22;
    const Scalar _tmp47 = -_tmp23;
    const Scalar _tmp48 = _tmp29*_tmp6;
    const Scalar _tmp49 = _tmp0*_tmp31;
    const Scalar _tmp50 = -_tmp24;

    // Output terms (1)
    Eigen::Matrix<Scalar, 6, 1> _res;

    _res(0, 0) = _tmp0*_tmp5;
    _res(1, 0) = _tmp5*_tmp6;
    _res(2, 0) = 2*_tmp8;
    _res(3, 0) = _tmp20*(_tmp30 - _tmp32) + _tmp41*(_tmp33 + _tmp34) + _tmp45*(_tmp28*(_tmp46 + _tmp47) + 1.0);
    _res(4, 0) = _tmp20*(_tmp48 + _tmp49) + _tmp41*(_tmp28*(_tmp47 + _tmp50) + 1.0) + _tmp45*(_tmp33 - _tmp34);
    _res(5, 0) = _tmp20*(_tmp28*(_tmp46 + _tmp50) + 1.0) + _tmp41*(_tmp48 - _tmp49) + _tmp45*(_tmp30 + _tmp32);

    return _res;
}


}  // namespace pose3
}  // namespace geo

// Explicit instantiation
template struct geo::pose3::LieGroupOps<double>;
template struct geo::pose3::LieGroupOps<float>;
