//  ----------------------------------------------------------------------------
// This file was autogenerated by symforce. Do NOT modify by hand.
// -----------------------------------------------------------------------------

#include "./lie_group_ops.h"

namespace geo {
namespace pose2 {

template <typename Scalar>
Pose2<Scalar> LieGroupOps<Scalar>::Expmap(const Eigen::Matrix<Scalar, 3, 1>& vec, const Scalar epsilon) {
    // Input arrays

    // Output array
    Eigen::Matrix<Scalar, 4, 1> res;

    // Intermediate terms (5)
    const Scalar _tmp0 = std::cos(vec[2]);
    const Scalar _tmp1 = std::sin(vec[2]);
    const Scalar _tmp2 = 1.0 / (epsilon + vec[2]);
    const Scalar _tmp3 = _tmp2*(1 - _tmp0);
    const Scalar _tmp4 = _tmp1*_tmp2;

    // Output terms (4)
    res[0] = _tmp0;
    res[1] = _tmp1;
    res[2] = -_tmp3*vec[1] + _tmp4*vec[0];
    res[3] = _tmp3*vec[0] + _tmp4*vec[1];

    return Pose2<Scalar>(res);
}

template <typename Scalar>
Eigen::Matrix<Scalar, 3, 1> LieGroupOps<Scalar>::Logmap(const Pose2<Scalar>& a, const Scalar epsilon) {
    // Input arrays
    const Eigen::Matrix<Scalar, 4, 1>& _a = a.Storage();

    // Output array
    Eigen::Matrix<Scalar, 3, 1> res;

    // Intermediate terms (4)
    const Scalar _tmp0 = std::atan2(_a[1], _a[0] + epsilon);
    const Scalar _tmp1 = 0.5*_tmp0;
    const Scalar _tmp2 = _a[2]*_tmp1;
    const Scalar _tmp3 = _a[1]/std::max(epsilon, 1 - _a[0]);

    // Output terms (3)
    res[0] = _a[3]*_tmp1 + _tmp2*_tmp3;
    res[1] = 0.5*_a[3]*_tmp0*_tmp3 - _tmp2;
    res[2] = _tmp0;

    return res;
}

template <typename Scalar>
Pose2<Scalar> LieGroupOps<Scalar>::Retract(const Pose2<Scalar>& a, const Eigen::Matrix<Scalar, 3, 1>& vec, const Scalar epsilon) {
    // Input arrays
    const Eigen::Matrix<Scalar, 4, 1>& _a = a.Storage();

    // Output array
    Eigen::Matrix<Scalar, 4, 1> res;

    // Intermediate terms (8)
    const Scalar _tmp0 = std::sin(vec[2]);
    const Scalar _tmp1 = std::cos(vec[2]);
    const Scalar _tmp2 = 1 - _tmp1;
    const Scalar _tmp3 = 1.0 / (epsilon + vec[2]);
    const Scalar _tmp4 = _tmp3*vec[1];
    const Scalar _tmp5 = _tmp3*vec[0];
    const Scalar _tmp6 = _tmp0*_tmp5 - _tmp2*_tmp4;
    const Scalar _tmp7 = _tmp0*_tmp4 + _tmp2*_tmp5;

    // Output terms (4)
    res[0] = _a[0]*_tmp1 - _a[1]*_tmp0;
    res[1] = _a[0]*_tmp0 + _a[1]*_tmp1;
    res[2] = _a[0]*_tmp6 - _a[1]*_tmp7 + _a[2];
    res[3] = _a[0]*_tmp7 + _a[1]*_tmp6 + _a[3];

    return Pose2<Scalar>(res);
}

template <typename Scalar>
Eigen::Matrix<Scalar, 3, 1> LieGroupOps<Scalar>::LocalCoordinates(const Pose2<Scalar>& a, const Pose2<Scalar>& b, const Scalar epsilon) {
    // Input arrays
    const Eigen::Matrix<Scalar, 4, 1>& _a = a.Storage();
    const Eigen::Matrix<Scalar, 4, 1>& _b = b.Storage();

    // Output array
    Eigen::Matrix<Scalar, 3, 1> res;

    // Intermediate terms (14)
    const Scalar _tmp0 = 1.0 / ((_a[0] * _a[0]) + (_a[1] * _a[1]));
    const Scalar _tmp1 = _a[3]*_tmp0;
    const Scalar _tmp2 = _a[2]*_tmp0;
    const Scalar _tmp3 = _b[3]*_tmp0;
    const Scalar _tmp4 = _b[2]*_tmp0;
    const Scalar _tmp5 = _b[1]*_tmp0;
    const Scalar _tmp6 = _b[0]*_tmp0;
    const Scalar _tmp7 = _a[0]*_tmp5 - _a[1]*_tmp6;
    const Scalar _tmp8 = _a[0]*_tmp6 + _a[1]*_tmp5;
    const Scalar _tmp9 = std::atan2(_tmp7, _tmp8 + epsilon);
    const Scalar _tmp10 = 0.5*_tmp9;
    const Scalar _tmp11 = _tmp10*(-_a[0]*_tmp1 + _a[0]*_tmp3 + _a[1]*_tmp2 - _a[1]*_tmp4);
    const Scalar _tmp12 = _tmp10*(-_a[0]*_tmp2 + _a[0]*_tmp4 - _a[1]*_tmp1 + _a[1]*_tmp3);
    const Scalar _tmp13 = _tmp7/std::max(epsilon, 1 - _tmp8);

    // Output terms (3)
    res[0] = _tmp11 + _tmp12*_tmp13;
    res[1] = _tmp11*_tmp13 - _tmp12;
    res[2] = _tmp9;

    return res;
}


}  // namespace pose2
}  // namespace geo

// Explicit instantiation
template struct geo::pose2::LieGroupOps<double>;
template struct geo::pose2::LieGroupOps<float>;
