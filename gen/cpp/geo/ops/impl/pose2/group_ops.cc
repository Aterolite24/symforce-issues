//  ----------------------------------------------------------------------------
// This file was autogenerated by symforce. Do NOT modify by hand.
// -----------------------------------------------------------------------------

#include "./group_ops.h"

namespace geo {
namespace pose2 {

template <typename Scalar>
Pose2<Scalar> GroupOps<Scalar>::Identity() {
    // Input arrays

    // Output array
    Eigen::Matrix<Scalar, 4, 1> res;

    // Intermediate terms (0)

    // Output terms (4)
    res[0] = 1;
    res[1] = 0;
    res[2] = 0;
    res[3] = 0;

    return Pose2<Scalar>(res);
}

template <typename Scalar>
Pose2<Scalar> GroupOps<Scalar>::Inverse(const Pose2<Scalar>& a) {
    // Input arrays
    const Eigen::Matrix<Scalar, 4, 1>& _a = a.Storage();

    // Output array
    Eigen::Matrix<Scalar, 4, 1> res;

    // Intermediate terms (3)
    const Scalar _tmp0 = 1.0 / ((_a[0] * _a[0]) + (_a[1] * _a[1]));
    const Scalar _tmp1 = _a[0]*_tmp0;
    const Scalar _tmp2 = _a[1]*_tmp0;

    // Output terms (4)
    res[0] = _tmp1;
    res[1] = -_tmp2;
    res[2] = -_a[2]*_tmp1 - _a[3]*_tmp2;
    res[3] = _a[2]*_tmp2 - _a[3]*_tmp1;

    return Pose2<Scalar>(res);
}

template <typename Scalar>
Pose2<Scalar> GroupOps<Scalar>::Compose(const Pose2<Scalar>& a, const Pose2<Scalar>& b) {
    // Input arrays
    const Eigen::Matrix<Scalar, 4, 1>& _a = a.Storage();
    const Eigen::Matrix<Scalar, 4, 1>& _b = b.Storage();

    // Output array
    Eigen::Matrix<Scalar, 4, 1> res;

    // Intermediate terms (0)

    // Output terms (4)
    res[0] = _a[0]*_b[0] - _a[1]*_b[1];
    res[1] = _a[0]*_b[1] + _a[1]*_b[0];
    res[2] = _a[0]*_b[2] - _a[1]*_b[3] + _a[2];
    res[3] = _a[0]*_b[3] + _a[1]*_b[2] + _a[3];

    return Pose2<Scalar>(res);
}

template <typename Scalar>
Pose2<Scalar> GroupOps<Scalar>::Between(const Pose2<Scalar>& a, const Pose2<Scalar>& b) {
    // Input arrays
    const Eigen::Matrix<Scalar, 4, 1>& _a = a.Storage();
    const Eigen::Matrix<Scalar, 4, 1>& _b = b.Storage();

    // Output array
    Eigen::Matrix<Scalar, 4, 1> res;

    // Intermediate terms (7)
    const Scalar _tmp0 = 1.0 / ((_a[0] * _a[0]) + (_a[1] * _a[1]));
    const Scalar _tmp1 = _b[1]*_tmp0;
    const Scalar _tmp2 = _b[0]*_tmp0;
    const Scalar _tmp3 = _a[3]*_tmp0;
    const Scalar _tmp4 = _a[2]*_tmp0;
    const Scalar _tmp5 = _b[3]*_tmp0;
    const Scalar _tmp6 = _b[2]*_tmp0;

    // Output terms (4)
    res[0] = _a[0]*_tmp2 + _a[1]*_tmp1;
    res[1] = _a[0]*_tmp1 - _a[1]*_tmp2;
    res[2] = -_a[0]*_tmp4 + _a[0]*_tmp6 - _a[1]*_tmp3 + _a[1]*_tmp5;
    res[3] = -_a[0]*_tmp3 + _a[0]*_tmp5 + _a[1]*_tmp4 - _a[1]*_tmp6;

    return Pose2<Scalar>(res);
}


}  // namespace pose2
}  // namespace geo

// Explicit instantiation
template struct geo::pose2::GroupOps<double>;
template struct geo::pose2::GroupOps<float>;
