//  ----------------------------------------------------------------------------
// This file was autogenerated by symforce. Do NOT modify by hand.
// -----------------------------------------------------------------------------

#include "./lie_group_ops.h"

namespace geo {
namespace rot2 {

template <typename Scalar>
Rot2<Scalar> LieGroupOps<Scalar>::Expmap(const Eigen::Matrix<Scalar, 1, 1>& vec, const Scalar epsilon) {
    // Input arrays

    // Output array
    Eigen::Matrix<Scalar, 2, 1> res;

    // Intermediate terms (0)

    // Output terms (2)
    res[0] = std::cos(vec[0]);
    res[1] = std::sin(vec[0]);

    return Rot2<Scalar>(res);
}

template <typename Scalar>
Eigen::Matrix<Scalar, 1, 1> LieGroupOps<Scalar>::Logmap(const Rot2<Scalar>& a, const Scalar epsilon) {
    // Input arrays
    const Eigen::Matrix<Scalar, 2, 1>& _a = a.Storage();

    // Output array
    Eigen::Matrix<Scalar, 1, 1> res;

    // Intermediate terms (0)

    // Output terms (1)
    res[0] = std::atan2(_a[1], _a[0] + epsilon);

    return res;
}

template <typename Scalar>
Rot2<Scalar> LieGroupOps<Scalar>::Retract(const Rot2<Scalar>& a, const Eigen::Matrix<Scalar, 1, 1>& vec, const Scalar epsilon) {
    // Input arrays
    const Eigen::Matrix<Scalar, 2, 1>& _a = a.Storage();

    // Output array
    Eigen::Matrix<Scalar, 2, 1> res;

    // Intermediate terms (2)
    const Scalar _tmp0 = std::sin(vec[0]);
    const Scalar _tmp1 = std::cos(vec[0]);

    // Output terms (2)
    res[0] = _a[0]*_tmp1 - _a[1]*_tmp0;
    res[1] = _a[0]*_tmp0 + _a[1]*_tmp1;

    return Rot2<Scalar>(res);
}

template <typename Scalar>
Eigen::Matrix<Scalar, 1, 1> LieGroupOps<Scalar>::LocalCoordinates(const Rot2<Scalar>& a, const Rot2<Scalar>& b, const Scalar epsilon) {
    // Input arrays
    const Eigen::Matrix<Scalar, 2, 1>& _a = a.Storage();
    const Eigen::Matrix<Scalar, 2, 1>& _b = b.Storage();

    // Output array
    Eigen::Matrix<Scalar, 1, 1> res;

    // Intermediate terms (3)
    const Scalar _tmp0 = 1.0 / ((_a[0] * _a[0]) + (_a[1] * _a[1]));
    const Scalar _tmp1 = _b[1]*_tmp0;
    const Scalar _tmp2 = _b[0]*_tmp0;

    // Output terms (1)
    res[0] = std::atan2(_a[0]*_tmp1 - _a[1]*_tmp2, _a[0]*_tmp2 + _a[1]*_tmp1 + epsilon);

    return res;
}


}  // namespace rot2
}  // namespace geo

// Explicit instantiation
template struct geo::rot2::LieGroupOps<double>;
template struct geo::rot2::LieGroupOps<float>;
