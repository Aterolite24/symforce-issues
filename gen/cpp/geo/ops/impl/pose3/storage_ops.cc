//  ----------------------------------------------------------------------------
// This file was autogenerated by symforce. Do NOT modify by hand.
// -----------------------------------------------------------------------------

#include "./storage_ops.h"

namespace geo {
namespace pose3 {

template <typename Scalar>
void StorageOps<Scalar>::ToList(const geo::Pose3<Scalar>& a, std::vector<Scalar>* vec) {
  assert(vec != nullptr);
  const typename geo::Pose3<Scalar>::StorageVec& storage = a.Storage();
  vec->resize(storage.size());
  std::copy_n(storage.data(), storage.size(), vec->begin());
}

template <typename Scalar>
geo::Pose3<Scalar> StorageOps<Scalar>::FromList(const std::vector<Scalar>& vec) {
  assert(vec.size() == StorageOps<Scalar>::StorageDim());
  return geo::Pose3<Scalar>(
    Eigen::Map<const typename geo::Pose3<Scalar>::StorageVec>(vec.data()));
}

}  // namespace pose3
}  // namespace geo


// Explicit instantiation
template struct geo::pose3::StorageOps<double>;
template struct geo::pose3::StorageOps<float>;
