//  ----------------------------------------------------------------------------
// This file was autogenerated by symforce. Do NOT modify by hand.
// -----------------------------------------------------------------------------

#include <algorithm>
#include <cmath>

#include "./lie_group_ops.h"

namespace geo {
namespace pose3 {

template <typename Scalar>
Pose3<Scalar> LieGroupOps<Scalar>::FromTangent(const Eigen::Matrix<Scalar, 6, 1>& vec, const Scalar epsilon) {
    // Input arrays

    // Output array
    Eigen::Matrix<Scalar, 7, 1> res;

    // Intermediate terms (19)
    const Scalar _tmp0 = (vec[2] * vec[2]);
    const Scalar _tmp1 = (vec[1] * vec[1]);
    const Scalar _tmp2 = (vec[0] * vec[0]);
    const Scalar _tmp3 = _tmp0 + _tmp1 + _tmp2 + (epsilon * epsilon);
    const Scalar _tmp4 = std::sqrt(_tmp3);
    const Scalar _tmp5 = (1.0/2.0)*_tmp4;
    const Scalar _tmp6 = std::sin(_tmp5)/_tmp4;
    const Scalar _tmp7 = (_tmp4 - std::sin(_tmp4))/(_tmp3 * std::sqrt(_tmp3));
    const Scalar _tmp8 = _tmp7*vec[0];
    const Scalar _tmp9 = _tmp8*vec[2];
    const Scalar _tmp10 = (-std::cos(_tmp4) + 1)/_tmp3;
    const Scalar _tmp11 = _tmp10*vec[1];
    const Scalar _tmp12 = _tmp8*vec[1];
    const Scalar _tmp13 = _tmp10*vec[2];
    const Scalar _tmp14 = -_tmp1;
    const Scalar _tmp15 = -_tmp0;
    const Scalar _tmp16 = _tmp7*vec[1]*vec[2];
    const Scalar _tmp17 = _tmp10*vec[0];
    const Scalar _tmp18 = -_tmp2;

    // Output terms (7)
    res[0] = _tmp6*vec[0];
    res[1] = _tmp6*vec[1];
    res[2] = _tmp6*vec[2];
    res[3] = std::cos(_tmp5);
    res[4] = vec[3]*(_tmp7*(_tmp14 + _tmp15) + 1) + vec[4]*(_tmp12 - _tmp13) + vec[5]*(_tmp11 + _tmp9);
    res[5] = vec[3]*(_tmp12 + _tmp13) + vec[4]*(_tmp7*(_tmp15 + _tmp18) + 1) + vec[5]*(_tmp16 - _tmp17);
    res[6] = vec[3]*(-_tmp11 + _tmp9) + vec[4]*(_tmp16 + _tmp17) + vec[5]*(_tmp7*(_tmp14 + _tmp18) + 1);

    return Pose3<Scalar>(res);
}

template <typename Scalar>
Eigen::Matrix<Scalar, 6, 1> LieGroupOps<Scalar>::ToTangent(const Pose3<Scalar>& a, const Scalar epsilon) {
    // Input arrays
    const Eigen::Matrix<Scalar, 7, 1>& _a = a.Data();

    // Output array
    Eigen::Matrix<Scalar, 6, 1> res;

    // Intermediate terms (23)
    const Scalar _tmp0 = std::acos(std::max<Scalar>(-1, std::min<Scalar>(1, _a[3])));
    const Scalar _tmp1 = std::max<Scalar>(epsilon, -(_a[3] * _a[3]) + 1);
    const Scalar _tmp2 = _tmp0/std::sqrt(_tmp1);
    const Scalar _tmp3 = 2*_tmp2;
    const Scalar _tmp4 = 4*(_tmp0 * _tmp0)/_tmp1;
    const Scalar _tmp5 = (_a[2] * _a[2])*_tmp4;
    const Scalar _tmp6 = (_a[1] * _a[1])*_tmp4;
    const Scalar _tmp7 = (_a[0] * _a[0])*_tmp4;
    const Scalar _tmp8 = _tmp5 + _tmp6 + _tmp7 + epsilon;
    const Scalar _tmp9 = std::sqrt(_tmp8);
    const Scalar _tmp10 = 0.5*_tmp9;
    const Scalar _tmp11 = (-1.0/2.0*_tmp9*std::cos(_tmp10)/std::sin(_tmp10) + 1)/_tmp8;
    const Scalar _tmp12 = _a[1]*_tmp11*_tmp4;
    const Scalar _tmp13 = _a[0]*_tmp12;
    const Scalar _tmp14 = 1.0*_tmp2;
    const Scalar _tmp15 = _a[2]*_tmp14;
    const Scalar _tmp16 = _a[0]*_a[2]*_tmp11*_tmp4;
    const Scalar _tmp17 = _a[1]*_tmp14;
    const Scalar _tmp18 = -_tmp6;
    const Scalar _tmp19 = -_tmp5;
    const Scalar _tmp20 = _a[2]*_tmp12;
    const Scalar _tmp21 = _a[0]*_tmp14;
    const Scalar _tmp22 = -_tmp7;

    // Output terms (6)
    res[0] = _a[0]*_tmp3;
    res[1] = _a[1]*_tmp3;
    res[2] = _a[2]*_tmp3;
    res[3] = _a[4]*(_tmp11*(_tmp18 + _tmp19) + 1.0) + _a[5]*(_tmp13 + _tmp15) + _a[6]*(_tmp16 - _tmp17);
    res[4] = _a[4]*(_tmp13 - _tmp15) + _a[5]*(_tmp11*(_tmp19 + _tmp22) + 1.0) + _a[6]*(_tmp20 + _tmp21);
    res[5] = _a[4]*(_tmp16 + _tmp17) + _a[5]*(_tmp20 - _tmp21) + _a[6]*(_tmp11*(_tmp18 + _tmp22) + 1.0);

    return res;
}

template <typename Scalar>
Pose3<Scalar> LieGroupOps<Scalar>::Retract(const Pose3<Scalar>& a, const Eigen::Matrix<Scalar, 6, 1>& vec, const Scalar epsilon) {
    // Input arrays
    const Eigen::Matrix<Scalar, 7, 1>& _a = a.Data();

    // Output array
    Eigen::Matrix<Scalar, 7, 1> res;

    // Intermediate terms (39)
    const Scalar _tmp0 = (vec[2] * vec[2]);
    const Scalar _tmp1 = (vec[1] * vec[1]);
    const Scalar _tmp2 = (vec[0] * vec[0]);
    const Scalar _tmp3 = _tmp0 + _tmp1 + _tmp2 + (epsilon * epsilon);
    const Scalar _tmp4 = std::sqrt(_tmp3);
    const Scalar _tmp5 = (1.0/2.0)*_tmp4;
    const Scalar _tmp6 = std::sin(_tmp5)/_tmp4;
    const Scalar _tmp7 = _tmp6*vec[2];
    const Scalar _tmp8 = _tmp6*vec[1];
    const Scalar _tmp9 = std::cos(_tmp5);
    const Scalar _tmp10 = _tmp6*vec[0];
    const Scalar _tmp11 = _a[0]*_tmp6;
    const Scalar _tmp12 = _a[3]*_tmp6;
    const Scalar _tmp13 = 2*_a[3];
    const Scalar _tmp14 = _a[1]*_tmp13;
    const Scalar _tmp15 = 2*_a[2];
    const Scalar _tmp16 = _a[0]*_tmp15;
    const Scalar _tmp17 = -_tmp2;
    const Scalar _tmp18 = -_tmp1;
    const Scalar _tmp19 = (_tmp4 - std::sin(_tmp4))/(_tmp3 * std::sqrt(_tmp3));
    const Scalar _tmp20 = _tmp19*vec[1]*vec[2];
    const Scalar _tmp21 = (-std::cos(_tmp4) + 1)/_tmp3;
    const Scalar _tmp22 = _tmp21*vec[0];
    const Scalar _tmp23 = _tmp19*vec[0];
    const Scalar _tmp24 = _tmp23*vec[2];
    const Scalar _tmp25 = _tmp21*vec[1];
    const Scalar _tmp26 = vec[3]*(_tmp24 - _tmp25) + vec[4]*(_tmp20 + _tmp22) + vec[5]*(_tmp19*(_tmp17 + _tmp18) + 1);
    const Scalar _tmp27 = _a[3]*_tmp15;
    const Scalar _tmp28 = 2*_a[0]*_a[1];
    const Scalar _tmp29 = -_tmp0;
    const Scalar _tmp30 = _tmp23*vec[1];
    const Scalar _tmp31 = _tmp21*vec[2];
    const Scalar _tmp32 = vec[3]*(_tmp30 + _tmp31) + vec[4]*(_tmp19*(_tmp17 + _tmp29) + 1) + vec[5]*(_tmp20 - _tmp22);
    const Scalar _tmp33 = -2*(_a[1] * _a[1]);
    const Scalar _tmp34 = -2*(_a[2] * _a[2]) + 1;
    const Scalar _tmp35 = vec[3]*(_tmp19*(_tmp18 + _tmp29) + 1) + vec[4]*(_tmp30 - _tmp31) + vec[5]*(_tmp24 + _tmp25);
    const Scalar _tmp36 = _a[0]*_tmp13;
    const Scalar _tmp37 = _a[1]*_tmp15;
    const Scalar _tmp38 = -2*(_a[0] * _a[0]);

    // Output terms (7)
    res[0] = _a[0]*_tmp9 + _a[1]*_tmp7 - _a[2]*_tmp8 + _a[3]*_tmp10;
    res[1] = _a[1]*_tmp9 + _a[2]*_tmp10 - _tmp11*vec[2] + _tmp12*vec[1];
    res[2] = -_a[1]*_tmp10 + _a[2]*_tmp9 + _tmp11*vec[1] + _tmp12*vec[2];
    res[3] = -_a[1]*_tmp8 - _a[2]*_tmp7 + _a[3]*_tmp9 - _tmp11*vec[0];
    res[4] = _a[4] + _tmp26*(_tmp14 + _tmp16) + _tmp32*(-_tmp27 + _tmp28) + _tmp35*(_tmp33 + _tmp34);
    res[5] = _a[5] + _tmp26*(-_tmp36 + _tmp37) + _tmp32*(_tmp34 + _tmp38) + _tmp35*(_tmp27 + _tmp28);
    res[6] = _a[6] + _tmp26*(_tmp33 + _tmp38 + 1) + _tmp32*(_tmp36 + _tmp37) + _tmp35*(-_tmp14 + _tmp16);

    return Pose3<Scalar>(res);
}

template <typename Scalar>
Eigen::Matrix<Scalar, 6, 1> LieGroupOps<Scalar>::LocalCoordinates(const Pose3<Scalar>& a, const Pose3<Scalar>& b, const Scalar epsilon) {
    // Input arrays
    const Eigen::Matrix<Scalar, 7, 1>& _a = a.Data();
    const Eigen::Matrix<Scalar, 7, 1>& _b = b.Data();

    // Output array
    Eigen::Matrix<Scalar, 6, 1> res;

    // Intermediate terms (51)
    const Scalar _tmp0 = -_a[0]*_b[3] - _a[1]*_b[2] + _a[2]*_b[1] + _a[3]*_b[0];
    const Scalar _tmp1 = _a[0]*_b[0] + _a[1]*_b[1] + _a[2]*_b[2] + _a[3]*_b[3];
    const Scalar _tmp2 = std::acos(std::max<Scalar>(-1, std::min<Scalar>(1, _tmp1)));
    const Scalar _tmp3 = std::max<Scalar>(epsilon, -(_tmp1 * _tmp1) + 1);
    const Scalar _tmp4 = _tmp2/std::sqrt(_tmp3);
    const Scalar _tmp5 = 2*_tmp4;
    const Scalar _tmp6 = _a[0]*_b[2] - _a[1]*_b[3] - _a[2]*_b[0] + _a[3]*_b[1];
    const Scalar _tmp7 = -_a[0]*_b[1] + _a[1]*_b[0] - _a[2]*_b[3] + _a[3]*_b[2];
    const Scalar _tmp8 = _tmp4*_tmp7;
    const Scalar _tmp9 = 4*(_tmp2 * _tmp2)/_tmp3;
    const Scalar _tmp10 = (_tmp7 * _tmp7)*_tmp9;
    const Scalar _tmp11 = (_tmp6 * _tmp6)*_tmp9;
    const Scalar _tmp12 = (_tmp0 * _tmp0)*_tmp9;
    const Scalar _tmp13 = _tmp10 + _tmp11 + _tmp12 + epsilon;
    const Scalar _tmp14 = std::sqrt(_tmp13);
    const Scalar _tmp15 = 0.5*_tmp14;
    const Scalar _tmp16 = (-1.0/2.0*_tmp14*std::cos(_tmp15)/std::sin(_tmp15) + 1)/_tmp13;
    const Scalar _tmp17 = _tmp0*_tmp16*_tmp9;
    const Scalar _tmp18 = _tmp17*_tmp6;
    const Scalar _tmp19 = 1.0*_tmp8;
    const Scalar _tmp20 = 2*_a[3];
    const Scalar _tmp21 = _a[0]*_tmp20;
    const Scalar _tmp22 = 2*_a[1]*_a[2];
    const Scalar _tmp23 = _tmp21 + _tmp22;
    const Scalar _tmp24 = -2*(_a[2] * _a[2]);
    const Scalar _tmp25 = -2*(_a[0] * _a[0]);
    const Scalar _tmp26 = _tmp24 + _tmp25 + 1;
    const Scalar _tmp27 = _a[2]*_tmp20;
    const Scalar _tmp28 = 2*_a[0];
    const Scalar _tmp29 = _a[1]*_tmp28;
    const Scalar _tmp30 = -_tmp27 + _tmp29;
    const Scalar _tmp31 = -_a[4]*_tmp30 - _a[5]*_tmp26 - _a[6]*_tmp23 + _b[4]*_tmp30 + _b[5]*_tmp26 + _b[6]*_tmp23;
    const Scalar _tmp32 = _tmp17*_tmp7;
    const Scalar _tmp33 = 1.0*_tmp4;
    const Scalar _tmp34 = _tmp33*_tmp6;
    const Scalar _tmp35 = -2*(_a[1] * _a[1]) + 1;
    const Scalar _tmp36 = _tmp25 + _tmp35;
    const Scalar _tmp37 = -_tmp21 + _tmp22;
    const Scalar _tmp38 = _a[1]*_tmp20;
    const Scalar _tmp39 = _a[2]*_tmp28;
    const Scalar _tmp40 = _tmp38 + _tmp39;
    const Scalar _tmp41 = -_a[4]*_tmp40 - _a[5]*_tmp37 - _a[6]*_tmp36 + _b[4]*_tmp40 + _b[5]*_tmp37 + _b[6]*_tmp36;
    const Scalar _tmp42 = -_tmp11;
    const Scalar _tmp43 = -_tmp10;
    const Scalar _tmp44 = -_tmp38 + _tmp39;
    const Scalar _tmp45 = _tmp27 + _tmp29;
    const Scalar _tmp46 = _tmp24 + _tmp35;
    const Scalar _tmp47 = -_a[4]*_tmp46 - _a[5]*_tmp45 - _a[6]*_tmp44 + _b[4]*_tmp46 + _b[5]*_tmp45 + _b[6]*_tmp44;
    const Scalar _tmp48 = _tmp16*_tmp6*_tmp7*_tmp9;
    const Scalar _tmp49 = _tmp0*_tmp33;
    const Scalar _tmp50 = -_tmp12;

    // Output terms (6)
    res[0] = _tmp0*_tmp5;
    res[1] = _tmp5*_tmp6;
    res[2] = 2*_tmp8;
    res[3] = _tmp31*(_tmp18 + _tmp19) + _tmp41*(_tmp32 - _tmp34) + _tmp47*(_tmp16*(_tmp42 + _tmp43) + 1.0);
    res[4] = _tmp31*(_tmp16*(_tmp43 + _tmp50) + 1.0) + _tmp41*(_tmp48 + _tmp49) + _tmp47*(_tmp18 - _tmp19);
    res[5] = _tmp31*(_tmp48 - _tmp49) + _tmp41*(_tmp16*(_tmp42 + _tmp50) + 1.0) + _tmp47*(_tmp32 + _tmp34);

    return res;
}


}  // namespace pose3
}  // namespace geo

// Explicit instantiation
template struct geo::pose3::LieGroupOps<double>;
template struct geo::pose3::LieGroupOps<float>;
