//  ----------------------------------------------------------------------------
// This file was autogenerated by symforce. Do NOT modify by hand.
// -----------------------------------------------------------------------------

#include "./lie_group_ops.h"

namespace geo {
namespace rot3 {

template <typename Scalar>
Rot3<Scalar> LieGroupOps<Scalar>::Expmap(const Eigen::Matrix<Scalar, 3, 1>& vec, const Scalar epsilon) {
    // Input arrays

    // Output array
    Eigen::Matrix<Scalar, 4, 1> res;

    // Intermediate terms (3)
    const Scalar _tmp0 = std::sqrt((epsilon * epsilon) + (vec[0] * vec[0]) + (vec[1] * vec[1]) + (vec[2] * vec[2]));
    const Scalar _tmp1 = (1.0/2.0)*_tmp0;
    const Scalar _tmp2 = std::sin(_tmp1)/_tmp0;

    // Output terms (4)
    res[0] = _tmp2*vec[0];
    res[1] = _tmp2*vec[1];
    res[2] = _tmp2*vec[2];
    res[3] = std::cos(_tmp1);

    return Rot3<Scalar>(res);
}

template <typename Scalar>
Eigen::Matrix<Scalar, 3, 1> LieGroupOps<Scalar>::Logmap(const Rot3<Scalar>& a, const Scalar epsilon) {
    // Input arrays
    const Eigen::Matrix<Scalar, 4, 1>& _a = a.Storage();

    // Output array
    Eigen::Matrix<Scalar, 3, 1> res;

    // Intermediate terms (2)
    const Scalar _tmp0 = std::sqrt((_a[0] * _a[0]) + (_a[1] * _a[1]) + (_a[2] * _a[2]) + epsilon);
    const Scalar _tmp1 = 2*std::atan(_tmp0/(_a[3] + epsilon))/_tmp0;

    // Output terms (3)
    res[0] = _a[0]*_tmp1;
    res[1] = _a[1]*_tmp1;
    res[2] = _a[2]*_tmp1;

    return res;
}

template <typename Scalar>
Rot3<Scalar> LieGroupOps<Scalar>::Retract(const Rot3<Scalar>& a, const Eigen::Matrix<Scalar, 3, 1>& vec, const Scalar epsilon) {
    // Input arrays
    const Eigen::Matrix<Scalar, 4, 1>& _a = a.Storage();

    // Output array
    Eigen::Matrix<Scalar, 4, 1> res;

    // Intermediate terms (9)
    const Scalar _tmp0 = std::sqrt((epsilon * epsilon) + (vec[0] * vec[0]) + (vec[1] * vec[1]) + (vec[2] * vec[2]));
    const Scalar _tmp1 = 1.0 / (_tmp0);
    const Scalar _tmp2 = (1.0/2.0)*_tmp0;
    const Scalar _tmp3 = std::sin(_tmp2);
    const Scalar _tmp4 = _tmp1*_tmp3;
    const Scalar _tmp5 = _a[1]*_tmp4;
    const Scalar _tmp6 = _a[2]*_tmp4;
    const Scalar _tmp7 = std::cos(_tmp2);
    const Scalar _tmp8 = _a[0]*_tmp4;

    // Output terms (4)
    res[0] = _a[0]*_tmp7 + _a[3]*_tmp1*_tmp3*vec[0] + _tmp5*vec[2] - _tmp6*vec[1];
    res[1] = _a[1]*_tmp7 + _a[3]*_tmp4*vec[1] + _tmp6*vec[0] - _tmp8*vec[2];
    res[2] = _a[2]*_tmp7 + _a[3]*_tmp4*vec[2] - _tmp5*vec[0] + _tmp8*vec[1];
    res[3] = _a[3]*_tmp7 - _tmp5*vec[1] - _tmp6*vec[2] - _tmp8*vec[0];

    return Rot3<Scalar>(res);
}

template <typename Scalar>
Eigen::Matrix<Scalar, 3, 1> LieGroupOps<Scalar>::LocalCoordinates(const Rot3<Scalar>& a, const Rot3<Scalar>& b, const Scalar epsilon) {
    // Input arrays
    const Eigen::Matrix<Scalar, 4, 1>& _a = a.Storage();
    const Eigen::Matrix<Scalar, 4, 1>& _b = b.Storage();

    // Output array
    Eigen::Matrix<Scalar, 3, 1> res;

    // Intermediate terms (5)
    const Scalar _tmp0 = -_a[0]*_b[3] - _a[1]*_b[2] + _a[2]*_b[1] + _a[3]*_b[0];
    const Scalar _tmp1 = _a[0]*_b[2] - _a[1]*_b[3] - _a[2]*_b[0] + _a[3]*_b[1];
    const Scalar _tmp2 = -_a[0]*_b[1] + _a[1]*_b[0] - _a[2]*_b[3] + _a[3]*_b[2];
    const Scalar _tmp3 = std::sqrt((_tmp0 * _tmp0) + (_tmp1 * _tmp1) + (_tmp2 * _tmp2) + epsilon);
    const Scalar _tmp4 = 2*std::atan(_tmp3/(_a[0]*_b[0] + _a[1]*_b[1] + _a[2]*_b[2] + _a[3]*_b[3] + epsilon))/_tmp3;

    // Output terms (3)
    res[0] = _tmp0*_tmp4;
    res[1] = _tmp1*_tmp4;
    res[2] = _tmp2*_tmp4;

    return res;
}


}  // namespace rot3
}  // namespace geo

// Explicit instantiation
template struct geo::rot3::LieGroupOps<double>;
template struct geo::rot3::LieGroupOps<float>;
