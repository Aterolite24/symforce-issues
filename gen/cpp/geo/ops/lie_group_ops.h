//  -----------------------------------------------------------------------------
// This file was autogenerated by symforce. Do NOT modify by hand.
// -----------------------------------------------------------------------------
/**
C++ StorageOps concept. This template class is specialized per type.

See `symforce.ops.lie_group_ops` for details.
*/
#pragma once

#include <Eigen/Dense>

namespace geo {

template <typename T>
struct LieGroupOps {
  using Scalar = typename T::Scalar;

  static constexpr int32_t TangentDim();
  using TangentVec = Eigen::Matrix<Scalar, TangentDim(), 1>;

  static T FromTangent(const TangentVec& vec, const Scalar epsilon);
  static TangentVec ToTangent(const T& a, const Scalar epsilon);
  static T Retract(const T& a, const TangentVec& vec, const Scalar epsilon);
  static TangentVec LocalCoordinates(const T& a, const T& b, const Scalar epsilon);
};

// TODO(hayk): Move scalar and matrix ops into their own files

// Template specializations for scalars
template <typename T>
struct ScalarLieGroupOps {
  using Scalar = T;
  static_assert(std::is_floating_point<T>::value, "");

  static constexpr int32_t TangentDim() {
    return 1;
  }
  using TangentVec = Eigen::Matrix<T, 1, 1>;
  static T FromTangent(const TangentVec& vec, const T epsilon) {
    return vec[0];
  }
  static TangentVec ToTangent(const T& a, const T epsilon) {
    return TangentVec::Constant(a);
  }
  static T Retract(const T& a, const TangentVec& vec, const T epsilon) {
    return a + vec[0];
  }
  static TangentVec LocalCoordinates(const T& a, const T& b, const T epsilon) {
    return TangentVec::Constant(b - a);
  }
};

template<>
struct LieGroupOps<double> : public ScalarLieGroupOps<double> {};
template<>
struct LieGroupOps<float> : public ScalarLieGroupOps<float> {};

// Template specialization for fixed size matrices
template <typename ScalarType, int Rows, int Cols>
struct MatrixLieGroupOps {
  using Scalar = ScalarType;
  using T = Eigen::Matrix<Scalar, Rows, Cols>;
  static_assert(std::is_floating_point<ScalarType>::value, "");

  static constexpr int32_t TangentDim() {
    return Rows * Cols;
  }
  using TangentVec = T;
  static T FromTangent(const TangentVec& vec, const Scalar epsilon) {
    return vec;
  }
  static TangentVec ToTangent(const T& a, const Scalar epsilon) {
    return a;
  }
  static T Retract(const T& a, const TangentVec& vec, const Scalar epsilon) {
    return a + vec;
  }
  static TangentVec LocalCoordinates(const T& a, const T& b, const Scalar epsilon) {
    return b - a;
  }
};

template<>
struct LieGroupOps<Eigen::Matrix<double, 1, 1>> : public MatrixLieGroupOps<double, 1, 1> {};
template<>
struct LieGroupOps<Eigen::Matrix<double, 2, 1>> : public MatrixLieGroupOps<double, 2, 1> {};
template<>
struct LieGroupOps<Eigen::Matrix<double, 3, 1>> : public MatrixLieGroupOps<double, 3, 1> {};
template<>
struct LieGroupOps<Eigen::Matrix<double, 4, 1>> : public MatrixLieGroupOps<double, 4, 1> {};
template<>
struct LieGroupOps<Eigen::Matrix<double, 5, 1>> : public MatrixLieGroupOps<double, 5, 1> {};
template<>
struct LieGroupOps<Eigen::Matrix<double, 6, 1>> : public MatrixLieGroupOps<double, 6, 1> {};
template<>
struct LieGroupOps<Eigen::Matrix<double, 7, 1>> : public MatrixLieGroupOps<double, 7, 1> {};
template<>
struct LieGroupOps<Eigen::Matrix<double, 8, 1>> : public MatrixLieGroupOps<double, 8, 1> {};
template<>
struct LieGroupOps<Eigen::Matrix<double, 9, 1>> : public MatrixLieGroupOps<double, 9, 1> {};
template<>
struct LieGroupOps<Eigen::Matrix<float, 1, 1>> : public MatrixLieGroupOps<float, 1, 1> {};
template<>
struct LieGroupOps<Eigen::Matrix<float, 2, 1>> : public MatrixLieGroupOps<float, 2, 1> {};
template<>
struct LieGroupOps<Eigen::Matrix<float, 3, 1>> : public MatrixLieGroupOps<float, 3, 1> {};
template<>
struct LieGroupOps<Eigen::Matrix<float, 4, 1>> : public MatrixLieGroupOps<float, 4, 1> {};
template<>
struct LieGroupOps<Eigen::Matrix<float, 5, 1>> : public MatrixLieGroupOps<float, 5, 1> {};
template<>
struct LieGroupOps<Eigen::Matrix<float, 6, 1>> : public MatrixLieGroupOps<float, 6, 1> {};
template<>
struct LieGroupOps<Eigen::Matrix<float, 7, 1>> : public MatrixLieGroupOps<float, 7, 1> {};
template<>
struct LieGroupOps<Eigen::Matrix<float, 8, 1>> : public MatrixLieGroupOps<float, 8, 1> {};
template<>
struct LieGroupOps<Eigen::Matrix<float, 9, 1>> : public MatrixLieGroupOps<float, 9, 1> {};

}  // namespace geo
