//  ----------------------------------------------------------------------------
// This file was autogenerated by symforce. Do NOT modify by hand.
// -----------------------------------------------------------------------------
#pragma once

#include <Eigen/Dense>
#include <geo/rot2.h>

namespace sym {
namespace rot2 {

/**
 * C++ GroupOps implementation for <class 'symforce.geo.rot2.Rot2'>.
 */
template <typename Scalar>
struct GroupOps {
  using SelfJacobian = Eigen::Matrix<Scalar, sym::LieGroupOps<Rot2<Scalar>>::TangentDim(),
                                     sym::LieGroupOps<Rot2<Scalar>>::TangentDim()>;

  static sym::Rot2<Scalar> Identity();
  static sym::Rot2<Scalar> Inverse(const sym::Rot2<Scalar>& a);
  static sym::Rot2<Scalar> Compose(const sym::Rot2<Scalar>& a, const sym::Rot2<Scalar>& b);
  static sym::Rot2<Scalar> Between(const sym::Rot2<Scalar>& a, const sym::Rot2<Scalar>& b);
  static sym::Rot2<Scalar> InverseWithJacobian(
      const sym::Rot2<Scalar>& a, Eigen::Matrix<Scalar, 1, 1>* const res_D_a = nullptr);
  static sym::Rot2<Scalar> ComposeWithJacobians(
      const sym::Rot2<Scalar>& a, const sym::Rot2<Scalar>& b,
      Eigen::Matrix<Scalar, 1, 1>* const res_D_a = nullptr,
      Eigen::Matrix<Scalar, 1, 1>* const res_D_b = nullptr);
  static sym::Rot2<Scalar> BetweenWithJacobians(
      const sym::Rot2<Scalar>& a, const sym::Rot2<Scalar>& b,
      Eigen::Matrix<Scalar, 1, 1>* const res_D_a = nullptr,
      Eigen::Matrix<Scalar, 1, 1>* const res_D_b = nullptr);
};

}  // namespace rot2

// Wrapper to specialize the public concept
template <>
struct GroupOps<Rot2<double>> : public rot2::GroupOps<double> {};
template <>
struct GroupOps<Rot2<float>> : public rot2::GroupOps<float> {};

}  // namespace sym
