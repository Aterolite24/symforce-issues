// -----------------------------------------------------------------------------
// This file was autogenerated by symforce. Do NOT modify by hand.
// -----------------------------------------------------------------------------
#pragma once

#include <Eigen/Dense>
#include <sym/pose3.h>

namespace sym {

/**
 * Composition of two elements in the group.
 *
 * Args:
 *     a (Element):
 *     b (Element):
 *
 * Returns:
 *     Element: a @ b
 *     geo.Matrix: Jacobian for arg 1 (b)
 */
template <typename Scalar>
sym::Pose3<Scalar> ComposePose3_ValueAndJacobian1(
    const sym::Pose3<Scalar>& a, const sym::Pose3<Scalar>& b,
    Eigen::Matrix<Scalar, 6, 6>* const res_D_b = nullptr) {
  // Total ops: 390

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _a = a.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _b = b.Data();

  // Intermediate terms (138)
  const Scalar _tmp0 = _a[0] * _b[3];
  const Scalar _tmp1 = _a[1] * _b[2];
  const Scalar _tmp2 = _a[3] * _b[0];
  const Scalar _tmp3 = _a[2] * _b[1];
  const Scalar _tmp4 = _tmp0 + _tmp1 + _tmp2 - _tmp3;
  const Scalar _tmp5 = _a[1] * _b[3];
  const Scalar _tmp6 = _a[2] * _b[0];
  const Scalar _tmp7 = _a[3] * _b[1];
  const Scalar _tmp8 = _a[0] * _b[2];
  const Scalar _tmp9 = _tmp5 + _tmp6 + _tmp7 - _tmp8;
  const Scalar _tmp10 = _a[0] * _b[1];
  const Scalar _tmp11 = _a[2] * _b[3];
  const Scalar _tmp12 = _a[3] * _b[2];
  const Scalar _tmp13 = _a[1] * _b[0];
  const Scalar _tmp14 = _tmp10 + _tmp11 + _tmp12 - _tmp13;
  const Scalar _tmp15 = _a[3] * _b[3];
  const Scalar _tmp16 = _a[0] * _b[0];
  const Scalar _tmp17 = _a[1] * _b[1];
  const Scalar _tmp18 = _a[2] * _b[2];
  const Scalar _tmp19 = _tmp15 - _tmp16 - _tmp17 - _tmp18;
  const Scalar _tmp20 = 2 * _a[1];
  const Scalar _tmp21 = _a[0] * _tmp20;
  const Scalar _tmp22 = 2 * _a[2];
  const Scalar _tmp23 = _a[3] * _tmp22;
  const Scalar _tmp24 = _tmp21 - _tmp23;
  const Scalar _tmp25 = _a[0] * _tmp22;
  const Scalar _tmp26 = _a[3] * _tmp20;
  const Scalar _tmp27 = _tmp25 + _tmp26;
  const Scalar _tmp28 = -2 * (_a[1] * _a[1]);
  const Scalar _tmp29 = 1 - 2 * (_a[2] * _a[2]);
  const Scalar _tmp30 = _tmp28 + _tmp29;
  const Scalar _tmp31 = _tmp21 + _tmp23;
  const Scalar _tmp32 = 2 * _a[0] * _a[3];
  const Scalar _tmp33 = _a[1] * _tmp22;
  const Scalar _tmp34 = -_tmp32 + _tmp33;
  const Scalar _tmp35 = -2 * (_a[0] * _a[0]);
  const Scalar _tmp36 = _tmp29 + _tmp35;
  const Scalar _tmp37 = _tmp25 - _tmp26;
  const Scalar _tmp38 = _tmp32 + _tmp33;
  const Scalar _tmp39 = _tmp28 + _tmp35 + 1;
  const Scalar _tmp40 = 2 * _tmp10;
  const Scalar _tmp41 = 2 * _tmp13;
  const Scalar _tmp42 = 2 * _tmp11;
  const Scalar _tmp43 = 2 * _tmp12;
  const Scalar _tmp44 = _tmp40 - _tmp41 + _tmp42 + _tmp43;
  const Scalar _tmp45 = 2 * _tmp8;
  const Scalar _tmp46 = 2 * _tmp5;
  const Scalar _tmp47 = 2 * _tmp6;
  const Scalar _tmp48 = 2 * _tmp7;
  const Scalar _tmp49 = _tmp45 - _tmp46 - _tmp47 - _tmp48;
  const Scalar _tmp50 = _a[2] * _tmp49;
  const Scalar _tmp51 = 2 * _tmp15 - 2 * _tmp16 - 2 * _tmp17 - 2 * _tmp18;
  const Scalar _tmp52 = _a[0] * _tmp51;
  const Scalar _tmp53 = 2 * _tmp0;
  const Scalar _tmp54 = 2 * _tmp1;
  const Scalar _tmp55 = 2 * _tmp3;
  const Scalar _tmp56 = 2 * _tmp2;
  const Scalar _tmp57 = -_tmp53 - _tmp54 + _tmp55 - _tmp56;
  const Scalar _tmp58 = _a[3] * _tmp57 + _tmp52;
  const Scalar _tmp59 = _a[1] * _tmp44 + _tmp50 + _tmp58;
  const Scalar _tmp60 = (1.0 / 2.0) * _b[0];
  const Scalar _tmp61 = _a[2] * _tmp57;
  const Scalar _tmp62 = _a[1] * _tmp51;
  const Scalar _tmp63 = _a[3] * _tmp49 + _tmp62;
  const Scalar _tmp64 = -_a[0] * _tmp44 - _tmp61 + _tmp63;
  const Scalar _tmp65 = (1.0 / 2.0) * _b[1];
  const Scalar _tmp66 = _a[0] * _tmp49;
  const Scalar _tmp67 = _a[1] * _tmp57;
  const Scalar _tmp68 = _a[2] * _tmp51;
  const Scalar _tmp69 =
      (1.0 / 2.0) * _a[3] * _tmp44 + (1.0 / 2.0) * _tmp66 - 1.0 / 2.0 * _tmp67 - 1.0 / 2.0 * _tmp68;
  const Scalar _tmp70 = -_a[0] * _tmp57;
  const Scalar _tmp71 = _a[3] * _tmp51;
  const Scalar _tmp72 = -_a[1] * _tmp49 + _tmp71;
  const Scalar _tmp73 = (1.0 / 2.0) * _a[2] * _tmp44 + (1.0 / 2.0) * _tmp70 + (1.0 / 2.0) * _tmp72;
  const Scalar _tmp74 = (1.0 / 2.0) * _b[2];
  const Scalar _tmp75 = (1.0 / 2.0) * _b[3];
  const Scalar _tmp76 = -_tmp40 + _tmp41 - _tmp42 - _tmp43;
  const Scalar _tmp77 = _a[0] * _tmp76;
  const Scalar _tmp78 = _tmp53 + _tmp54 - _tmp55 + _tmp56;
  const Scalar _tmp79 = _a[2] * _tmp78 + _tmp63 + _tmp77;
  const Scalar _tmp80 = _a[1] * _tmp76;
  const Scalar _tmp81 = _a[3] * _tmp78 - _tmp50 - _tmp52 + _tmp80;
  const Scalar _tmp82 = -_a[2] * _tmp76;
  const Scalar _tmp83 = _a[0] * _tmp78 + _tmp72 + _tmp82;
  const Scalar _tmp84 = _a[3] * _tmp76 + _tmp68;
  const Scalar _tmp85 = -_a[1] * _tmp78 - _tmp66 + _tmp84;
  const Scalar _tmp86 = -_tmp45 + _tmp46 + _tmp47 + _tmp48;
  const Scalar _tmp87 = _a[0] * _tmp86 + _tmp67 + _tmp84;
  const Scalar _tmp88 = _a[1] * _tmp86 + _tmp70 + _tmp71 + _tmp82;
  const Scalar _tmp89 = -_a[2] * _tmp86 + _tmp58 - _tmp80;
  const Scalar _tmp90 = _a[3] * _tmp86 + _tmp61 - _tmp62 - _tmp77;
  const Scalar _tmp91 = 2 * _b[1];
  const Scalar _tmp92 = _b[0] * _tmp91;
  const Scalar _tmp93 = 2 * _b[2];
  const Scalar _tmp94 = _b[3] * _tmp93;
  const Scalar _tmp95 = _tmp92 + _tmp94;
  const Scalar _tmp96 = -2 * (_tmp9 * _tmp9);
  const Scalar _tmp97 = 1 - 2 * (_tmp14 * _tmp14);
  const Scalar _tmp98 = _tmp96 + _tmp97;
  const Scalar _tmp99 = _tmp14 * _tmp78;
  const Scalar _tmp100 = _tmp19 * _tmp86;
  const Scalar _tmp101 = -_tmp100 + _tmp99;
  const Scalar _tmp102 = _tmp78 * _tmp9;
  const Scalar _tmp103 = _tmp19 * _tmp44;
  const Scalar _tmp104 = _tmp102 + _tmp103;
  const Scalar _tmp105 = _tmp101 * _tmp38 + _tmp104 * _tmp36 + _tmp24 * _tmp98;
  const Scalar _tmp106 = _b[0] * _tmp93;
  const Scalar _tmp107 = _b[3] * _tmp91;
  const Scalar _tmp108 = _tmp106 - _tmp107;
  const Scalar _tmp109 = _tmp101 * _tmp39 + _tmp104 * _tmp34 + _tmp27 * _tmp98;
  const Scalar _tmp110 = -2 * (_b[1] * _b[1]);
  const Scalar _tmp111 = 1 - 2 * (_b[2] * _b[2]);
  const Scalar _tmp112 = _tmp110 + _tmp111;
  const Scalar _tmp113 = _tmp101 * _tmp37 + _tmp104 * _tmp31 + _tmp30 * _tmp98;
  const Scalar _tmp114 = _tmp92 - _tmp94;
  const Scalar _tmp115 = 2 * _b[0] * _b[3];
  const Scalar _tmp116 = _b[2] * _tmp91;
  const Scalar _tmp117 = _tmp115 + _tmp116;
  const Scalar _tmp118 = -2 * (_b[0] * _b[0]);
  const Scalar _tmp119 = _tmp111 + _tmp118;
  const Scalar _tmp120 = _tmp106 + _tmp107;
  const Scalar _tmp121 = -_tmp115 + _tmp116;
  const Scalar _tmp122 = _tmp110 + _tmp118 + 1;
  const Scalar _tmp123 = -2 * (_tmp4 * _tmp4);
  const Scalar _tmp124 = _tmp123 + _tmp97;
  const Scalar _tmp125 = _tmp14 * _tmp86;
  const Scalar _tmp126 = _tmp19 * _tmp78;
  const Scalar _tmp127 = _tmp125 + _tmp126;
  const Scalar _tmp128 = _tmp102 - _tmp103;
  const Scalar _tmp129 = _tmp124 * _tmp36 + _tmp127 * _tmp38 + _tmp128 * _tmp24;
  const Scalar _tmp130 = _tmp124 * _tmp34 + _tmp127 * _tmp39 + _tmp128 * _tmp27;
  const Scalar _tmp131 = _tmp124 * _tmp31 + _tmp127 * _tmp37 + _tmp128 * _tmp30;
  const Scalar _tmp132 = _tmp123 + _tmp96 + 1;
  const Scalar _tmp133 = _tmp100 + _tmp99;
  const Scalar _tmp134 = _tmp125 - _tmp126;
  const Scalar _tmp135 = _tmp132 * _tmp38 + _tmp133 * _tmp24 + _tmp134 * _tmp36;
  const Scalar _tmp136 = _tmp132 * _tmp39 + _tmp133 * _tmp27 + _tmp134 * _tmp34;
  const Scalar _tmp137 = _tmp132 * _tmp37 + _tmp133 * _tmp30 + _tmp134 * _tmp31;

  // Output terms (2)
  Eigen::Matrix<Scalar, 7, 1> _res;

  _res[0] = _tmp4;
  _res[1] = _tmp9;
  _res[2] = _tmp14;
  _res[3] = _tmp19;
  _res[4] = _a[4] + _b[4] * _tmp30 + _b[5] * _tmp24 + _b[6] * _tmp27;
  _res[5] = _a[5] + _b[4] * _tmp31 + _b[5] * _tmp36 + _b[6] * _tmp34;
  _res[6] = _a[6] + _b[4] * _tmp37 + _b[5] * _tmp38 + _b[6] * _tmp39;

  if (res_D_b != nullptr) {
    Eigen::Matrix<Scalar, 6, 6>& _res_D_b = (*res_D_b);

    _res_D_b(0, 0) = _b[2] * _tmp69 + _b[3] * _tmp73 - _tmp59 * _tmp60 - _tmp64 * _tmp65;
    _res_D_b(0, 1) = -_b[2] * _tmp73 + _b[3] * _tmp69 - _tmp59 * _tmp65 + _tmp60 * _tmp64;
    _res_D_b(0, 2) = -_b[0] * _tmp69 + _b[1] * _tmp73 - _tmp59 * _tmp74 + _tmp64 * _tmp75;
    _res_D_b(0, 3) = 0;
    _res_D_b(0, 4) = 0;
    _res_D_b(0, 5) = 0;
    _res_D_b(1, 0) = -_tmp60 * _tmp79 - _tmp65 * _tmp81 + _tmp74 * _tmp83 + _tmp75 * _tmp85;
    _res_D_b(1, 1) = _tmp60 * _tmp81 - _tmp65 * _tmp79 - _tmp74 * _tmp85 + _tmp75 * _tmp83;
    _res_D_b(1, 2) = -_tmp60 * _tmp83 + _tmp65 * _tmp85 - _tmp74 * _tmp79 + _tmp75 * _tmp81;
    _res_D_b(1, 3) = 0;
    _res_D_b(1, 4) = 0;
    _res_D_b(1, 5) = 0;
    _res_D_b(2, 0) = -_tmp60 * _tmp87 - _tmp65 * _tmp88 + _tmp74 * _tmp89 + _tmp75 * _tmp90;
    _res_D_b(2, 1) = _tmp60 * _tmp88 - _tmp65 * _tmp87 - _tmp74 * _tmp90 + _tmp75 * _tmp89;
    _res_D_b(2, 2) = -_tmp60 * _tmp89 + _tmp65 * _tmp90 - _tmp74 * _tmp87 + _tmp75 * _tmp88;
    _res_D_b(2, 3) = 0;
    _res_D_b(2, 4) = 0;
    _res_D_b(2, 5) = 0;
    _res_D_b(3, 0) = 0;
    _res_D_b(3, 1) = 0;
    _res_D_b(3, 2) = 0;
    _res_D_b(3, 3) = _tmp105 * _tmp95 + _tmp108 * _tmp109 + _tmp112 * _tmp113;
    _res_D_b(3, 4) = _tmp105 * _tmp119 + _tmp109 * _tmp117 + _tmp113 * _tmp114;
    _res_D_b(3, 5) = _tmp105 * _tmp121 + _tmp109 * _tmp122 + _tmp113 * _tmp120;
    _res_D_b(4, 0) = 0;
    _res_D_b(4, 1) = 0;
    _res_D_b(4, 2) = 0;
    _res_D_b(4, 3) = _tmp108 * _tmp130 + _tmp112 * _tmp131 + _tmp129 * _tmp95;
    _res_D_b(4, 4) = _tmp114 * _tmp131 + _tmp117 * _tmp130 + _tmp119 * _tmp129;
    _res_D_b(4, 5) = _tmp120 * _tmp131 + _tmp121 * _tmp129 + _tmp122 * _tmp130;
    _res_D_b(5, 0) = 0;
    _res_D_b(5, 1) = 0;
    _res_D_b(5, 2) = 0;
    _res_D_b(5, 3) = _tmp108 * _tmp136 + _tmp112 * _tmp137 + _tmp135 * _tmp95;
    _res_D_b(5, 4) = _tmp114 * _tmp137 + _tmp117 * _tmp136 + _tmp119 * _tmp135;
    _res_D_b(5, 5) = _tmp120 * _tmp137 + _tmp121 * _tmp135 + _tmp122 * _tmp136;
  }

  return sym::Pose3<Scalar>(_res);
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
