// -----------------------------------------------------------------------------
// This file was autogenerated by symforce. Do NOT modify by hand.
// -----------------------------------------------------------------------------
#pragma once

#include <Eigen/Dense>
#include <geo/pose3.h>

namespace sym {

/**
 * Composition of two elements in the group.
 *
 * Args:
 *     a (Element):
 *     b (Element):
 *
 * Returns:
 *     geo.Matrix: Jacobian for arg 1 (b)
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 6, 6> ComposePose3_Jacobian1(const geo::Pose3<Scalar>& a,
                                                   const geo::Pose3<Scalar>& b) {
  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _a = a.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _b = b.Data();

  // Intermediate terms (137)
  const Scalar _tmp0 = _a[0] * _b[1];
  const Scalar _tmp1 = 2 * _tmp0;
  const Scalar _tmp2 = _a[1] * _b[0];
  const Scalar _tmp3 = 2 * _tmp2;
  const Scalar _tmp4 = _a[2] * _b[3];
  const Scalar _tmp5 = 2 * _tmp4;
  const Scalar _tmp6 = _a[3] * _b[2];
  const Scalar _tmp7 = 2 * _tmp6;
  const Scalar _tmp8 = _tmp1 - _tmp3 + _tmp5 + _tmp7;
  const Scalar _tmp9 = _a[0] * _b[2];
  const Scalar _tmp10 = 2 * _tmp9;
  const Scalar _tmp11 = _a[1] * _b[3];
  const Scalar _tmp12 = 2 * _tmp11;
  const Scalar _tmp13 = _a[2] * _b[0];
  const Scalar _tmp14 = 2 * _tmp13;
  const Scalar _tmp15 = _a[3] * _b[1];
  const Scalar _tmp16 = 2 * _tmp15;
  const Scalar _tmp17 = _tmp10 - _tmp12 - _tmp14 - _tmp16;
  const Scalar _tmp18 = _a[2] * _tmp17;
  const Scalar _tmp19 = _a[0] * _b[0];
  const Scalar _tmp20 = _a[1] * _b[1];
  const Scalar _tmp21 = _a[2] * _b[2];
  const Scalar _tmp22 = _a[3] * _b[3];
  const Scalar _tmp23 = -2 * _tmp19 - 2 * _tmp20 - 2 * _tmp21 + 2 * _tmp22;
  const Scalar _tmp24 = _a[0] * _tmp23;
  const Scalar _tmp25 = _a[0] * _b[3];
  const Scalar _tmp26 = 2 * _tmp25;
  const Scalar _tmp27 = _a[1] * _b[2];
  const Scalar _tmp28 = 2 * _tmp27;
  const Scalar _tmp29 = _a[2] * _b[1];
  const Scalar _tmp30 = 2 * _tmp29;
  const Scalar _tmp31 = _a[3] * _b[0];
  const Scalar _tmp32 = 2 * _tmp31;
  const Scalar _tmp33 = -_tmp26 - _tmp28 + _tmp30 - _tmp32;
  const Scalar _tmp34 = _a[3] * _tmp33 + _tmp24;
  const Scalar _tmp35 = _a[1] * _tmp8 + _tmp18 + _tmp34;
  const Scalar _tmp36 = (1.0 / 2.0) * _b[0];
  const Scalar _tmp37 = _a[2] * _tmp33;
  const Scalar _tmp38 = _a[1] * _tmp23;
  const Scalar _tmp39 = _a[3] * _tmp17 + _tmp38;
  const Scalar _tmp40 = -_a[0] * _tmp8 - _tmp37 + _tmp39;
  const Scalar _tmp41 = (1.0 / 2.0) * _b[1];
  const Scalar _tmp42 = _a[0] * _tmp17;
  const Scalar _tmp43 = _a[1] * _tmp33;
  const Scalar _tmp44 = _a[2] * _tmp23;
  const Scalar _tmp45 =
      (1.0 / 2.0) * _a[3] * _tmp8 + (1.0 / 2.0) * _tmp42 - 1.0 / 2.0 * _tmp43 - 1.0 / 2.0 * _tmp44;
  const Scalar _tmp46 = -_a[0] * _tmp33;
  const Scalar _tmp47 = _a[3] * _tmp23;
  const Scalar _tmp48 = -_a[1] * _tmp17 + _tmp47;
  const Scalar _tmp49 = (1.0 / 2.0) * _a[2] * _tmp8 + (1.0 / 2.0) * _tmp46 + (1.0 / 2.0) * _tmp48;
  const Scalar _tmp50 = (1.0 / 2.0) * _b[2];
  const Scalar _tmp51 = (1.0 / 2.0) * _b[3];
  const Scalar _tmp52 = -_tmp1 + _tmp3 - _tmp5 - _tmp7;
  const Scalar _tmp53 = _a[0] * _tmp52;
  const Scalar _tmp54 = _tmp26 + _tmp28 - _tmp30 + _tmp32;
  const Scalar _tmp55 = _a[2] * _tmp54 + _tmp39 + _tmp53;
  const Scalar _tmp56 = _a[1] * _tmp52;
  const Scalar _tmp57 = _a[3] * _tmp54 - _tmp18 - _tmp24 + _tmp56;
  const Scalar _tmp58 = -_a[2] * _tmp52;
  const Scalar _tmp59 = _a[0] * _tmp54 + _tmp48 + _tmp58;
  const Scalar _tmp60 = _a[3] * _tmp52 + _tmp44;
  const Scalar _tmp61 = -_a[1] * _tmp54 - _tmp42 + _tmp60;
  const Scalar _tmp62 = -_tmp10 + _tmp12 + _tmp14 + _tmp16;
  const Scalar _tmp63 = _a[0] * _tmp62 + _tmp43 + _tmp60;
  const Scalar _tmp64 = _a[1] * _tmp62 + _tmp46 + _tmp47 + _tmp58;
  const Scalar _tmp65 = -_a[2] * _tmp62 + _tmp34 - _tmp56;
  const Scalar _tmp66 = _a[3] * _tmp62 + _tmp37 - _tmp38 - _tmp53;
  const Scalar _tmp67 = 2 * _b[1];
  const Scalar _tmp68 = _b[0] * _tmp67;
  const Scalar _tmp69 = 2 * _b[2];
  const Scalar _tmp70 = _b[3] * _tmp69;
  const Scalar _tmp71 = _tmp68 + _tmp70;
  const Scalar _tmp72 = 2 * _a[0];
  const Scalar _tmp73 = _a[1] * _tmp72;
  const Scalar _tmp74 = 2 * _a[2] * _a[3];
  const Scalar _tmp75 = _tmp73 - _tmp74;
  const Scalar _tmp76 = _tmp11 + _tmp13 + _tmp15 - _tmp9;
  const Scalar _tmp77 = -2 * (_tmp76 * _tmp76);
  const Scalar _tmp78 = _tmp0 - _tmp2 + _tmp4 + _tmp6;
  const Scalar _tmp79 = -2 * (_tmp78 * _tmp78) + 1;
  const Scalar _tmp80 = _tmp77 + _tmp79;
  const Scalar _tmp81 = _a[3] * _tmp72;
  const Scalar _tmp82 = 2 * _a[1];
  const Scalar _tmp83 = _a[2] * _tmp82;
  const Scalar _tmp84 = _tmp81 + _tmp83;
  const Scalar _tmp85 = _tmp54 * _tmp78;
  const Scalar _tmp86 = -_tmp19 - _tmp20 - _tmp21 + _tmp22;
  const Scalar _tmp87 = _tmp62 * _tmp86;
  const Scalar _tmp88 = _tmp85 - _tmp87;
  const Scalar _tmp89 = -2 * (_a[2] * _a[2]);
  const Scalar _tmp90 = -2 * (_a[0] * _a[0]) + 1;
  const Scalar _tmp91 = _tmp89 + _tmp90;
  const Scalar _tmp92 = _tmp54 * _tmp76;
  const Scalar _tmp93 = _tmp8 * _tmp86;
  const Scalar _tmp94 = _tmp92 + _tmp93;
  const Scalar _tmp95 = _tmp75 * _tmp80 + _tmp84 * _tmp88 + _tmp91 * _tmp94;
  const Scalar _tmp96 = _b[0] * _tmp69;
  const Scalar _tmp97 = _b[3] * _tmp67;
  const Scalar _tmp98 = _tmp96 - _tmp97;
  const Scalar _tmp99 = _a[2] * _tmp72;
  const Scalar _tmp100 = _a[3] * _tmp82;
  const Scalar _tmp101 = _tmp100 + _tmp99;
  const Scalar _tmp102 = -_tmp81 + _tmp83;
  const Scalar _tmp103 = -2 * (_a[1] * _a[1]);
  const Scalar _tmp104 = _tmp103 + _tmp90;
  const Scalar _tmp105 = _tmp101 * _tmp80 + _tmp102 * _tmp94 + _tmp104 * _tmp88;
  const Scalar _tmp106 = -2 * (_b[1] * _b[1]);
  const Scalar _tmp107 = -2 * (_b[2] * _b[2]) + 1;
  const Scalar _tmp108 = _tmp106 + _tmp107;
  const Scalar _tmp109 = _tmp103 + _tmp89 + 1;
  const Scalar _tmp110 = _tmp73 + _tmp74;
  const Scalar _tmp111 = -_tmp100 + _tmp99;
  const Scalar _tmp112 = _tmp109 * _tmp80 + _tmp110 * _tmp94 + _tmp111 * _tmp88;
  const Scalar _tmp113 = _tmp68 - _tmp70;
  const Scalar _tmp114 = 2 * _b[0] * _b[3];
  const Scalar _tmp115 = _b[2] * _tmp67;
  const Scalar _tmp116 = _tmp114 + _tmp115;
  const Scalar _tmp117 = -2 * (_b[0] * _b[0]);
  const Scalar _tmp118 = _tmp107 + _tmp117;
  const Scalar _tmp119 = _tmp96 + _tmp97;
  const Scalar _tmp120 = -_tmp114 + _tmp115;
  const Scalar _tmp121 = _tmp106 + _tmp117 + 1;
  const Scalar _tmp122 =
      -2 * (_tmp25 + _tmp27 - _tmp29 + _tmp31 * _tmp25 + _tmp27 - _tmp29 + _tmp31);
  const Scalar _tmp123 = _tmp122 + _tmp79;
  const Scalar _tmp124 = _tmp62 * _tmp78;
  const Scalar _tmp125 = _tmp54 * _tmp86;
  const Scalar _tmp126 = _tmp124 + _tmp125;
  const Scalar _tmp127 = _tmp92 - _tmp93;
  const Scalar _tmp128 = _tmp123 * _tmp91 + _tmp126 * _tmp84 + _tmp127 * _tmp75;
  const Scalar _tmp129 = _tmp101 * _tmp127 + _tmp102 * _tmp123 + _tmp104 * _tmp126;
  const Scalar _tmp130 = _tmp109 * _tmp127 + _tmp110 * _tmp123 + _tmp111 * _tmp126;
  const Scalar _tmp131 = _tmp122 + _tmp77 + 1;
  const Scalar _tmp132 = _tmp85 + _tmp87;
  const Scalar _tmp133 = _tmp124 - _tmp125;
  const Scalar _tmp134 = _tmp131 * _tmp84 + _tmp132 * _tmp75 + _tmp133 * _tmp91;
  const Scalar _tmp135 = _tmp101 * _tmp132 + _tmp102 * _tmp133 + _tmp104 * _tmp131;
  const Scalar _tmp136 = _tmp109 * _tmp132 + _tmp110 * _tmp133 + _tmp111 * _tmp131;

  // Output terms (1)
  Eigen::Matrix<Scalar, 6, 6> _res_D_b;

  _res_D_b(0, 0) = _b[2] * _tmp45 + _b[3] * _tmp49 - _tmp35 * _tmp36 - _tmp40 * _tmp41;
  _res_D_b(0, 1) = -_b[2] * _tmp49 + _b[3] * _tmp45 - _tmp35 * _tmp41 + _tmp36 * _tmp40;
  _res_D_b(0, 2) = -_b[0] * _tmp45 + _b[1] * _tmp49 - _tmp35 * _tmp50 + _tmp40 * _tmp51;
  _res_D_b(0, 3) = 0;
  _res_D_b(0, 4) = 0;
  _res_D_b(0, 5) = 0;
  _res_D_b(1, 0) = -_tmp36 * _tmp55 - _tmp41 * _tmp57 + _tmp50 * _tmp59 + _tmp51 * _tmp61;
  _res_D_b(1, 1) = _tmp36 * _tmp57 - _tmp41 * _tmp55 - _tmp50 * _tmp61 + _tmp51 * _tmp59;
  _res_D_b(1, 2) = -_tmp36 * _tmp59 + _tmp41 * _tmp61 - _tmp50 * _tmp55 + _tmp51 * _tmp57;
  _res_D_b(1, 3) = 0;
  _res_D_b(1, 4) = 0;
  _res_D_b(1, 5) = 0;
  _res_D_b(2, 0) = -_tmp36 * _tmp63 - _tmp41 * _tmp64 + _tmp50 * _tmp65 + _tmp51 * _tmp66;
  _res_D_b(2, 1) = _tmp36 * _tmp64 - _tmp41 * _tmp63 - _tmp50 * _tmp66 + _tmp51 * _tmp65;
  _res_D_b(2, 2) = -_tmp36 * _tmp65 + _tmp41 * _tmp66 - _tmp50 * _tmp63 + _tmp51 * _tmp64;
  _res_D_b(2, 3) = 0;
  _res_D_b(2, 4) = 0;
  _res_D_b(2, 5) = 0;
  _res_D_b(3, 0) = 0;
  _res_D_b(3, 1) = 0;
  _res_D_b(3, 2) = 0;
  _res_D_b(3, 3) = _tmp105 * _tmp98 + _tmp108 * _tmp112 + _tmp71 * _tmp95;
  _res_D_b(3, 4) = _tmp105 * _tmp116 + _tmp112 * _tmp113 + _tmp118 * _tmp95;
  _res_D_b(3, 5) = _tmp105 * _tmp121 + _tmp112 * _tmp119 + _tmp120 * _tmp95;
  _res_D_b(4, 0) = 0;
  _res_D_b(4, 1) = 0;
  _res_D_b(4, 2) = 0;
  _res_D_b(4, 3) = _tmp108 * _tmp130 + _tmp128 * _tmp71 + _tmp129 * _tmp98;
  _res_D_b(4, 4) = _tmp113 * _tmp130 + _tmp116 * _tmp129 + _tmp118 * _tmp128;
  _res_D_b(4, 5) = _tmp119 * _tmp130 + _tmp120 * _tmp128 + _tmp121 * _tmp129;
  _res_D_b(5, 0) = 0;
  _res_D_b(5, 1) = 0;
  _res_D_b(5, 2) = 0;
  _res_D_b(5, 3) = _tmp108 * _tmp136 + _tmp134 * _tmp71 + _tmp135 * _tmp98;
  _res_D_b(5, 4) = _tmp113 * _tmp136 + _tmp116 * _tmp135 + _tmp118 * _tmp134;
  _res_D_b(5, 5) = _tmp119 * _tmp136 + _tmp120 * _tmp134 + _tmp121 * _tmp135;

  return _res_D_b;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
