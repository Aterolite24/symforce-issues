// -----------------------------------------------------------------------------
// This file was autogenerated by symforce. Do NOT modify by hand.
// -----------------------------------------------------------------------------
#pragma once

#include <Eigen/Dense>
#include <sym/pose3.h>

namespace sym {

/**
 * Composition of two elements in the group.
 *
 * Returns:
 *     geo.Matrix: Jacobian for arg 0 (a)
 *     geo.Matrix: Jacobian for arg 1 (b)
 */
template <typename Scalar>
void ComposePose3_Jacobians(const sym::Pose3<Scalar>& a, const sym::Pose3<Scalar>& b,
                            Eigen::Matrix<Scalar, 6, 6>* const res_D_a = nullptr,
                            Eigen::Matrix<Scalar, 6, 6>* const res_D_b = nullptr) {
  // Total ops: 452

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _a = a.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _b = b.Data();

  // Intermediate terms (128)
  const Scalar _tmp0 = 2 * _b[0];
  const Scalar _tmp1 = 2 * _b[1];
  const Scalar _tmp2 = 2 * _a[2];
  const Scalar _tmp3 = 2 * _a[3];
  const Scalar _tmp4 = -_a[0] * _tmp0 - _a[1] * _tmp1 - _b[2] * _tmp2 + _b[3] * _tmp3;
  const Scalar _tmp5 = _b[0] * _tmp4;
  const Scalar _tmp6 = _a[0] * _tmp1;
  const Scalar _tmp7 = _a[1] * _tmp0;
  const Scalar _tmp8 = _b[3] * _tmp2;
  const Scalar _tmp9 = _b[2] * _tmp3;
  const Scalar _tmp10 = _tmp6 - _tmp7 + _tmp8 + _tmp9;
  const Scalar _tmp11 = 2 * _b[2];
  const Scalar _tmp12 = _a[0] * _tmp11;
  const Scalar _tmp13 = 2 * _b[3];
  const Scalar _tmp14 = _a[1] * _tmp13;
  const Scalar _tmp15 = _a[2] * _tmp0;
  const Scalar _tmp16 = _a[3] * _tmp1;
  const Scalar _tmp17 = _tmp12 - _tmp14 - _tmp15 - _tmp16;
  const Scalar _tmp18 = _b[2] * _tmp17;
  const Scalar _tmp19 = _a[0] * _tmp13;
  const Scalar _tmp20 = _a[1] * _tmp11;
  const Scalar _tmp21 = _a[2] * _tmp1;
  const Scalar _tmp22 = _a[3] * _tmp0;
  const Scalar _tmp23 = -_tmp19 - _tmp20 + _tmp21 - _tmp22;
  const Scalar _tmp24 = _b[3] * _tmp23;
  const Scalar _tmp25 = _b[1] * _tmp10 + _tmp18 + _tmp24 + _tmp5;
  const Scalar _tmp26 = (1.0 / 2.0) * _a[0];
  const Scalar _tmp27 = _b[3] * _tmp17;
  const Scalar _tmp28 = _b[1] * _tmp4;
  const Scalar _tmp29 = -_b[2] * _tmp23;
  const Scalar _tmp30 = _b[0] * _tmp10 + _tmp27 - _tmp28 + _tmp29;
  const Scalar _tmp31 = (1.0 / 2.0) * _a[1];
  const Scalar _tmp32 = _b[2] * _tmp4;
  const Scalar _tmp33 = -_b[0] * _tmp17;
  const Scalar _tmp34 = _b[1] * _tmp23;
  const Scalar _tmp35 = (1.0 / 2.0) * _b[3] * _tmp10 + (1.0 / 2.0) * _tmp32 + (1.0 / 2.0) * _tmp33 -
                        1.0 / 2.0 * _tmp34;
  const Scalar _tmp36 = _b[1] * _tmp17;
  const Scalar _tmp37 = _b[3] * _tmp4;
  const Scalar _tmp38 = _b[0] * _tmp23;
  const Scalar _tmp39 = -1.0 / 2.0 * _b[2] * _tmp10 + (1.0 / 2.0) * _tmp36 + (1.0 / 2.0) * _tmp37 -
                        1.0 / 2.0 * _tmp38;
  const Scalar _tmp40 = (1.0 / 2.0) * _a[2];
  const Scalar _tmp41 = (1.0 / 2.0) * _a[3];
  const Scalar _tmp42 = -_tmp6 + _tmp7 - _tmp8 - _tmp9;
  const Scalar _tmp43 = _b[0] * _tmp42;
  const Scalar _tmp44 = _tmp19 + _tmp20 - _tmp21 + _tmp22;
  const Scalar _tmp45 = _b[2] * _tmp44 + _tmp27 + _tmp28 + _tmp43;
  const Scalar _tmp46 = -_b[1] * _tmp42;
  const Scalar _tmp47 = _b[3] * _tmp44 - _tmp18 + _tmp46 + _tmp5;
  const Scalar _tmp48 = _b[2] * _tmp42;
  const Scalar _tmp49 = -_b[0] * _tmp44 - _tmp36 + _tmp37 + _tmp48;
  const Scalar _tmp50 = _b[3] * _tmp42;
  const Scalar _tmp51 = _b[1] * _tmp44 - _tmp32 + _tmp33 + _tmp50;
  const Scalar _tmp52 = -_tmp12 + _tmp14 + _tmp15 + _tmp16;
  const Scalar _tmp53 = _b[0] * _tmp52 + _tmp32 + _tmp34 + _tmp50;
  const Scalar _tmp54 = -_b[1] * _tmp52 + _tmp37 + _tmp38 - _tmp48;
  const Scalar _tmp55 = _b[2] * _tmp52 + _tmp24 + _tmp46 - _tmp5;
  const Scalar _tmp56 = _b[3] * _tmp52 + _tmp28 + _tmp29 - _tmp43;
  const Scalar _tmp57 = 2 * _b[6];
  const Scalar _tmp58 = _a[1] * _tmp57;
  const Scalar _tmp59 = _b[5] * _tmp2;
  const Scalar _tmp60 = _tmp58 - _tmp59;
  const Scalar _tmp61 = 2 * _b[5];
  const Scalar _tmp62 = _a[1] * _tmp61;
  const Scalar _tmp63 = _b[6] * _tmp2;
  const Scalar _tmp64 = _tmp62 + _tmp63;
  const Scalar _tmp65 = _a[0] * _tmp57;
  const Scalar _tmp66 = 4 * _b[4];
  const Scalar _tmp67 = _b[5] * _tmp3;
  const Scalar _tmp68 = -_a[2] * _tmp66 + _tmp65 - _tmp67;
  const Scalar _tmp69 = _a[0] * _tmp61;
  const Scalar _tmp70 = _b[6] * _tmp3;
  const Scalar _tmp71 = -_a[1] * _tmp66 + _tmp69 + _tmp70;
  const Scalar _tmp72 = _b[4] * _tmp2;
  const Scalar _tmp73 = -_tmp65 + _tmp72;
  const Scalar _tmp74 = 2 * _b[4];
  const Scalar _tmp75 = _a[0] * _tmp74;
  const Scalar _tmp76 = _tmp63 + _tmp75;
  const Scalar _tmp77 = 4 * _b[5];
  const Scalar _tmp78 = _b[4] * _tmp3;
  const Scalar _tmp79 = -_a[2] * _tmp77 + _tmp58 + _tmp78;
  const Scalar _tmp80 = _a[1] * _tmp74;
  const Scalar _tmp81 = -_a[0] * _tmp77 - _tmp70 + _tmp80;
  const Scalar _tmp82 = _tmp69 - _tmp80;
  const Scalar _tmp83 = _tmp62 + _tmp75;
  const Scalar _tmp84 = 4 * _b[6];
  const Scalar _tmp85 = -_a[1] * _tmp84 + _tmp59 - _tmp78;
  const Scalar _tmp86 = -_a[0] * _tmp84 + _tmp67 + _tmp72;
  const Scalar _tmp87 = _a[2] * _tmp17;
  const Scalar _tmp88 = _a[0] * _tmp4;
  const Scalar _tmp89 = _a[3] * _tmp23 + _tmp88;
  const Scalar _tmp90 = _a[1] * _tmp10 + _tmp87 + _tmp89;
  const Scalar _tmp91 = (1.0 / 2.0) * _b[0];
  const Scalar _tmp92 = _a[2] * _tmp23;
  const Scalar _tmp93 = _a[1] * _tmp4;
  const Scalar _tmp94 = _a[3] * _tmp17 + _tmp93;
  const Scalar _tmp95 = -_a[0] * _tmp10 - _tmp92 + _tmp94;
  const Scalar _tmp96 = (1.0 / 2.0) * _b[1];
  const Scalar _tmp97 = _a[0] * _tmp17;
  const Scalar _tmp98 = _a[1] * _tmp23;
  const Scalar _tmp99 = _a[2] * _tmp4;
  const Scalar _tmp100 =
      (1.0 / 2.0) * _a[3] * _tmp10 + (1.0 / 2.0) * _tmp97 - 1.0 / 2.0 * _tmp98 - 1.0 / 2.0 * _tmp99;
  const Scalar _tmp101 = -_a[0] * _tmp23;
  const Scalar _tmp102 = _a[3] * _tmp4;
  const Scalar _tmp103 = -_a[1] * _tmp17 + _tmp102;
  const Scalar _tmp104 =
      (1.0 / 2.0) * _a[2] * _tmp10 + (1.0 / 2.0) * _tmp101 + (1.0 / 2.0) * _tmp103;
  const Scalar _tmp105 = (1.0 / 2.0) * _b[2];
  const Scalar _tmp106 = (1.0 / 2.0) * _b[3];
  const Scalar _tmp107 = _a[0] * _tmp42;
  const Scalar _tmp108 = _a[2] * _tmp44 + _tmp107 + _tmp94;
  const Scalar _tmp109 = _a[1] * _tmp42;
  const Scalar _tmp110 = _a[3] * _tmp44 + _tmp109 - _tmp87 - _tmp88;
  const Scalar _tmp111 = -_a[2] * _tmp42;
  const Scalar _tmp112 = _a[0] * _tmp44 + _tmp103 + _tmp111;
  const Scalar _tmp113 = _a[3] * _tmp42 + _tmp99;
  const Scalar _tmp114 = -_a[1] * _tmp44 + _tmp113 - _tmp97;
  const Scalar _tmp115 = _a[0] * _tmp52 + _tmp113 + _tmp98;
  const Scalar _tmp116 = _a[1] * _tmp52 + _tmp101 + _tmp102 + _tmp111;
  const Scalar _tmp117 = -_a[2] * _tmp52 - _tmp109 + _tmp89;
  const Scalar _tmp118 = _a[3] * _tmp52 - _tmp107 + _tmp92 - _tmp93;
  const Scalar _tmp119 = -2 * (_a[1] * _a[1]);
  const Scalar _tmp120 = 1 - 2 * (_a[2] * _a[2]);
  const Scalar _tmp121 = 2 * _a[0] * _a[1];
  const Scalar _tmp122 = _a[3] * _tmp2;
  const Scalar _tmp123 = _a[0] * _tmp2;
  const Scalar _tmp124 = _a[1] * _tmp3;
  const Scalar _tmp125 = -2 * (_a[0] * _a[0]);
  const Scalar _tmp126 = _a[0] * _tmp3;
  const Scalar _tmp127 = _a[1] * _tmp2;

  // Output terms (2)
  if (res_D_a != nullptr) {
    Eigen::Matrix<Scalar, 6, 6>& _res_D_a = (*res_D_a);

    _res_D_a(0, 0) = _a[2] * _tmp35 + _a[3] * _tmp39 - _tmp25 * _tmp26 - _tmp30 * _tmp31;
    _res_D_a(0, 1) = -_a[2] * _tmp39 + _a[3] * _tmp35 - _tmp25 * _tmp31 + _tmp26 * _tmp30;
    _res_D_a(0, 2) = -_a[0] * _tmp35 + _a[1] * _tmp39 - _tmp25 * _tmp40 + _tmp30 * _tmp41;
    _res_D_a(0, 3) = 0;
    _res_D_a(0, 4) = 0;
    _res_D_a(0, 5) = 0;
    _res_D_a(1, 0) = -_tmp26 * _tmp45 - _tmp31 * _tmp47 + _tmp40 * _tmp49 + _tmp41 * _tmp51;
    _res_D_a(1, 1) = _tmp26 * _tmp47 - _tmp31 * _tmp45 - _tmp40 * _tmp51 + _tmp41 * _tmp49;
    _res_D_a(1, 2) = -_tmp26 * _tmp49 + _tmp31 * _tmp51 - _tmp40 * _tmp45 + _tmp41 * _tmp47;
    _res_D_a(1, 3) = 0;
    _res_D_a(1, 4) = 0;
    _res_D_a(1, 5) = 0;
    _res_D_a(2, 0) = -_tmp26 * _tmp53 - _tmp31 * _tmp54 + _tmp40 * _tmp55 + _tmp41 * _tmp56;
    _res_D_a(2, 1) = _tmp26 * _tmp54 - _tmp31 * _tmp53 - _tmp40 * _tmp56 + _tmp41 * _tmp55;
    _res_D_a(2, 2) = -_tmp26 * _tmp55 + _tmp31 * _tmp56 - _tmp40 * _tmp53 + _tmp41 * _tmp54;
    _res_D_a(2, 3) = 0;
    _res_D_a(2, 4) = 0;
    _res_D_a(2, 5) = 0;
    _res_D_a(3, 0) = -_tmp26 * _tmp60 - _tmp31 * _tmp68 + _tmp40 * _tmp71 + _tmp41 * _tmp64;
    _res_D_a(3, 1) = _tmp26 * _tmp68 - _tmp31 * _tmp60 - _tmp40 * _tmp64 + _tmp41 * _tmp71;
    _res_D_a(3, 2) = -_tmp26 * _tmp71 + _tmp31 * _tmp64 - _tmp40 * _tmp60 + _tmp41 * _tmp68;
    _res_D_a(3, 3) = 1;
    _res_D_a(3, 4) = 0;
    _res_D_a(3, 5) = 0;
    _res_D_a(4, 0) = -_tmp26 * _tmp73 - _tmp31 * _tmp79 + _tmp40 * _tmp76 + _tmp41 * _tmp81;
    _res_D_a(4, 1) = _tmp26 * _tmp79 - _tmp31 * _tmp73 - _tmp40 * _tmp81 + _tmp41 * _tmp76;
    _res_D_a(4, 2) = -_tmp26 * _tmp76 + _tmp31 * _tmp81 - _tmp40 * _tmp73 + _tmp41 * _tmp79;
    _res_D_a(4, 3) = 0;
    _res_D_a(4, 4) = 1;
    _res_D_a(4, 5) = 0;
    _res_D_a(5, 0) = -_tmp26 * _tmp82 - _tmp31 * _tmp83 + _tmp40 * _tmp85 + _tmp41 * _tmp86;
    _res_D_a(5, 1) = _tmp26 * _tmp83 - _tmp31 * _tmp82 - _tmp40 * _tmp86 + _tmp41 * _tmp85;
    _res_D_a(5, 2) = -_tmp26 * _tmp85 + _tmp31 * _tmp86 - _tmp40 * _tmp82 + _tmp41 * _tmp83;
    _res_D_a(5, 3) = 0;
    _res_D_a(5, 4) = 0;
    _res_D_a(5, 5) = 1;
  }

  if (res_D_b != nullptr) {
    Eigen::Matrix<Scalar, 6, 6>& _res_D_b = (*res_D_b);

    _res_D_b(0, 0) = _b[2] * _tmp100 + _b[3] * _tmp104 - _tmp90 * _tmp91 - _tmp95 * _tmp96;
    _res_D_b(0, 1) = -_b[2] * _tmp104 + _b[3] * _tmp100 - _tmp90 * _tmp96 + _tmp91 * _tmp95;
    _res_D_b(0, 2) = -_b[0] * _tmp100 + _b[1] * _tmp104 - _tmp105 * _tmp90 + _tmp106 * _tmp95;
    _res_D_b(0, 3) = 0;
    _res_D_b(0, 4) = 0;
    _res_D_b(0, 5) = 0;
    _res_D_b(1, 0) = _tmp105 * _tmp112 + _tmp106 * _tmp114 - _tmp108 * _tmp91 - _tmp110 * _tmp96;
    _res_D_b(1, 1) = -_tmp105 * _tmp114 + _tmp106 * _tmp112 - _tmp108 * _tmp96 + _tmp110 * _tmp91;
    _res_D_b(1, 2) = -_tmp105 * _tmp108 + _tmp106 * _tmp110 - _tmp112 * _tmp91 + _tmp114 * _tmp96;
    _res_D_b(1, 3) = 0;
    _res_D_b(1, 4) = 0;
    _res_D_b(1, 5) = 0;
    _res_D_b(2, 0) = _tmp105 * _tmp117 + _tmp106 * _tmp118 - _tmp115 * _tmp91 - _tmp116 * _tmp96;
    _res_D_b(2, 1) = -_tmp105 * _tmp118 + _tmp106 * _tmp117 - _tmp115 * _tmp96 + _tmp116 * _tmp91;
    _res_D_b(2, 2) = -_tmp105 * _tmp115 + _tmp106 * _tmp116 - _tmp117 * _tmp91 + _tmp118 * _tmp96;
    _res_D_b(2, 3) = 0;
    _res_D_b(2, 4) = 0;
    _res_D_b(2, 5) = 0;
    _res_D_b(3, 0) = 0;
    _res_D_b(3, 1) = 0;
    _res_D_b(3, 2) = 0;
    _res_D_b(3, 3) = _tmp119 + _tmp120;
    _res_D_b(3, 4) = _tmp121 - _tmp122;
    _res_D_b(3, 5) = _tmp123 + _tmp124;
    _res_D_b(4, 0) = 0;
    _res_D_b(4, 1) = 0;
    _res_D_b(4, 2) = 0;
    _res_D_b(4, 3) = _tmp121 + _tmp122;
    _res_D_b(4, 4) = _tmp120 + _tmp125;
    _res_D_b(4, 5) = -_tmp126 + _tmp127;
    _res_D_b(5, 0) = 0;
    _res_D_b(5, 1) = 0;
    _res_D_b(5, 2) = 0;
    _res_D_b(5, 3) = _tmp123 - _tmp124;
    _res_D_b(5, 4) = _tmp126 + _tmp127;
    _res_D_b(5, 5) = _tmp119 + _tmp125 + 1;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
