// -----------------------------------------------------------------------------
// This file was autogenerated by symforce. Do NOT modify by hand.
// -----------------------------------------------------------------------------
#pragma once

#include <Eigen/Dense>
#include <sym/pose3.h>

namespace sym {

/**
 * Composition of two elements in the group.
 *
 * Returns:
 *     Element: a @ b
 *     res_D_a: (6x6) jacobian of res (6) wrt arg a (6)
 *     res_D_b: (6x6) jacobian of res (6) wrt arg b (6)
 */
template <typename Scalar>
sym::Pose3<Scalar> ComposePose3WithJacobians(const sym::Pose3<Scalar>& a,
                                             const sym::Pose3<Scalar>& b,
                                             Eigen::Matrix<Scalar, 6, 6>* const res_D_a = nullptr,
                                             Eigen::Matrix<Scalar, 6, 6>* const res_D_b = nullptr) {
  // Total ops: 492

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _a = a.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _b = b.Data();

  // Intermediate terms (148)
  const Scalar _tmp0 = _a[0] * _b[3];
  const Scalar _tmp1 = _a[1] * _b[2];
  const Scalar _tmp2 = _a[3] * _b[0];
  const Scalar _tmp3 = _a[2] * _b[1];
  const Scalar _tmp4 = _a[1] * _b[3];
  const Scalar _tmp5 = _a[2] * _b[0];
  const Scalar _tmp6 = _a[3] * _b[1];
  const Scalar _tmp7 = _a[0] * _b[2];
  const Scalar _tmp8 = _a[0] * _b[1];
  const Scalar _tmp9 = _a[2] * _b[3];
  const Scalar _tmp10 = _a[3] * _b[2];
  const Scalar _tmp11 = _a[1] * _b[0];
  const Scalar _tmp12 = _a[3] * _b[3];
  const Scalar _tmp13 = _a[0] * _b[0];
  const Scalar _tmp14 = _a[1] * _b[1];
  const Scalar _tmp15 = _a[2] * _b[2];
  const Scalar _tmp16 = 2 * _a[1];
  const Scalar _tmp17 = _a[0] * _tmp16;
  const Scalar _tmp18 = 2 * _a[2];
  const Scalar _tmp19 = _a[3] * _tmp18;
  const Scalar _tmp20 = _tmp17 - _tmp19;
  const Scalar _tmp21 = _a[0] * _tmp18;
  const Scalar _tmp22 = _a[3] * _tmp16;
  const Scalar _tmp23 = _tmp21 + _tmp22;
  const Scalar _tmp24 = -2 * std::pow(_a[1], Scalar(2));
  const Scalar _tmp25 = 1 - 2 * std::pow(_a[2], Scalar(2));
  const Scalar _tmp26 = _tmp24 + _tmp25;
  const Scalar _tmp27 = _tmp17 + _tmp19;
  const Scalar _tmp28 = 2 * _a[0];
  const Scalar _tmp29 = _a[3] * _tmp28;
  const Scalar _tmp30 = _a[1] * _tmp18;
  const Scalar _tmp31 = -_tmp29 + _tmp30;
  const Scalar _tmp32 = -2 * std::pow(_a[0], Scalar(2));
  const Scalar _tmp33 = _tmp25 + _tmp32;
  const Scalar _tmp34 = _tmp21 - _tmp22;
  const Scalar _tmp35 = _tmp29 + _tmp30;
  const Scalar _tmp36 = _tmp24 + _tmp32 + 1;
  const Scalar _tmp37 = 2 * _tmp12 - 2 * _tmp13 - 2 * _tmp14 - 2 * _tmp15;
  const Scalar _tmp38 = _b[0] * _tmp37;
  const Scalar _tmp39 = 2 * _tmp8;
  const Scalar _tmp40 = 2 * _tmp11;
  const Scalar _tmp41 = 2 * _tmp9;
  const Scalar _tmp42 = 2 * _tmp10;
  const Scalar _tmp43 = _tmp39 - _tmp40 + _tmp41 + _tmp42;
  const Scalar _tmp44 = 2 * _tmp7;
  const Scalar _tmp45 = 2 * _tmp4;
  const Scalar _tmp46 = 2 * _tmp5;
  const Scalar _tmp47 = 2 * _tmp6;
  const Scalar _tmp48 = _tmp44 - _tmp45 - _tmp46 - _tmp47;
  const Scalar _tmp49 = _b[2] * _tmp48;
  const Scalar _tmp50 = 2 * _tmp0;
  const Scalar _tmp51 = 2 * _tmp1;
  const Scalar _tmp52 = 2 * _tmp3;
  const Scalar _tmp53 = 2 * _tmp2;
  const Scalar _tmp54 = -_tmp50 - _tmp51 + _tmp52 - _tmp53;
  const Scalar _tmp55 = _b[3] * _tmp54;
  const Scalar _tmp56 = _b[1] * _tmp43 + _tmp38 + _tmp49 + _tmp55;
  const Scalar _tmp57 = (Scalar(1) / Scalar(2)) * _a[0];
  const Scalar _tmp58 = _b[3] * _tmp48;
  const Scalar _tmp59 = _b[1] * _tmp37;
  const Scalar _tmp60 = -_b[2] * _tmp54;
  const Scalar _tmp61 = _b[0] * _tmp43 + _tmp58 - _tmp59 + _tmp60;
  const Scalar _tmp62 = (Scalar(1) / Scalar(2)) * _a[1];
  const Scalar _tmp63 = _b[2] * _tmp37;
  const Scalar _tmp64 = -_b[0] * _tmp48;
  const Scalar _tmp65 = _b[1] * _tmp54;
  const Scalar _tmp66 = (Scalar(1) / Scalar(2)) * _b[3] * _tmp43 +
                        (Scalar(1) / Scalar(2)) * _tmp63 + (Scalar(1) / Scalar(2)) * _tmp64 -
                        Scalar(1) / Scalar(2) * _tmp65;
  const Scalar _tmp67 = _b[1] * _tmp48;
  const Scalar _tmp68 = _b[3] * _tmp37;
  const Scalar _tmp69 = _b[0] * _tmp54;
  const Scalar _tmp70 = -Scalar(1) / Scalar(2) * _b[2] * _tmp43 + (Scalar(1) / Scalar(2)) * _tmp67 +
                        (Scalar(1) / Scalar(2)) * _tmp68 - Scalar(1) / Scalar(2) * _tmp69;
  const Scalar _tmp71 = (Scalar(1) / Scalar(2)) * _a[2];
  const Scalar _tmp72 = (Scalar(1) / Scalar(2)) * _a[3];
  const Scalar _tmp73 = -_tmp39 + _tmp40 - _tmp41 - _tmp42;
  const Scalar _tmp74 = _b[0] * _tmp73;
  const Scalar _tmp75 = _tmp50 + _tmp51 - _tmp52 + _tmp53;
  const Scalar _tmp76 = _b[2] * _tmp75 + _tmp58 + _tmp59 + _tmp74;
  const Scalar _tmp77 = -_b[1] * _tmp73;
  const Scalar _tmp78 = _b[3] * _tmp75 + _tmp38 - _tmp49 + _tmp77;
  const Scalar _tmp79 = _b[2] * _tmp73;
  const Scalar _tmp80 = -_b[0] * _tmp75 - _tmp67 + _tmp68 + _tmp79;
  const Scalar _tmp81 = _b[3] * _tmp73;
  const Scalar _tmp82 = _b[1] * _tmp75 - _tmp63 + _tmp64 + _tmp81;
  const Scalar _tmp83 = -_tmp44 + _tmp45 + _tmp46 + _tmp47;
  const Scalar _tmp84 = _b[0] * _tmp83 + _tmp63 + _tmp65 + _tmp81;
  const Scalar _tmp85 = -_b[1] * _tmp83 + _tmp68 + _tmp69 - _tmp79;
  const Scalar _tmp86 = _b[2] * _tmp83 - _tmp38 + _tmp55 + _tmp77;
  const Scalar _tmp87 = _b[3] * _tmp83 + _tmp59 + _tmp60 - _tmp74;
  const Scalar _tmp88 = _b[6] * _tmp16;
  const Scalar _tmp89 = _b[5] * _tmp18;
  const Scalar _tmp90 = _tmp88 - _tmp89;
  const Scalar _tmp91 = _b[5] * _tmp16;
  const Scalar _tmp92 = _b[6] * _tmp18;
  const Scalar _tmp93 = _tmp91 + _tmp92;
  const Scalar _tmp94 = _b[6] * _tmp28;
  const Scalar _tmp95 = 4 * _b[4];
  const Scalar _tmp96 = 2 * _a[3];
  const Scalar _tmp97 = _b[5] * _tmp96;
  const Scalar _tmp98 = -_a[2] * _tmp95 + _tmp94 - _tmp97;
  const Scalar _tmp99 = _b[5] * _tmp28;
  const Scalar _tmp100 = _b[6] * _tmp96;
  const Scalar _tmp101 = -_a[1] * _tmp95 + _tmp100 + _tmp99;
  const Scalar _tmp102 = _b[4] * _tmp18;
  const Scalar _tmp103 = _tmp102 - _tmp94;
  const Scalar _tmp104 = _b[4] * _tmp28;
  const Scalar _tmp105 = _tmp104 + _tmp92;
  const Scalar _tmp106 = 4 * _b[5];
  const Scalar _tmp107 = _b[4] * _tmp96;
  const Scalar _tmp108 = -_a[2] * _tmp106 + _tmp107 + _tmp88;
  const Scalar _tmp109 = _b[4] * _tmp16;
  const Scalar _tmp110 = -_a[0] * _tmp106 - _tmp100 + _tmp109;
  const Scalar _tmp111 = -_tmp109 + _tmp99;
  const Scalar _tmp112 = _tmp104 + _tmp91;
  const Scalar _tmp113 = 4 * _b[6];
  const Scalar _tmp114 = -_a[1] * _tmp113 - _tmp107 + _tmp89;
  const Scalar _tmp115 = -_a[0] * _tmp113 + _tmp102 + _tmp97;
  const Scalar _tmp116 = _a[2] * _tmp48;
  const Scalar _tmp117 = _a[0] * _tmp37;
  const Scalar _tmp118 = _a[3] * _tmp54 + _tmp117;
  const Scalar _tmp119 = _a[1] * _tmp43 + _tmp116 + _tmp118;
  const Scalar _tmp120 = (Scalar(1) / Scalar(2)) * _b[0];
  const Scalar _tmp121 = _a[2] * _tmp54;
  const Scalar _tmp122 = _a[1] * _tmp37;
  const Scalar _tmp123 = _a[3] * _tmp48 + _tmp122;
  const Scalar _tmp124 = -_a[0] * _tmp43 - _tmp121 + _tmp123;
  const Scalar _tmp125 = (Scalar(1) / Scalar(2)) * _b[1];
  const Scalar _tmp126 = _a[0] * _tmp48;
  const Scalar _tmp127 = _a[1] * _tmp54;
  const Scalar _tmp128 = _a[2] * _tmp37;
  const Scalar _tmp129 = (Scalar(1) / Scalar(2)) * _a[3] * _tmp43 +
                         (Scalar(1) / Scalar(2)) * _tmp126 - Scalar(1) / Scalar(2) * _tmp127 -
                         Scalar(1) / Scalar(2) * _tmp128;
  const Scalar _tmp130 = -_a[0] * _tmp54;
  const Scalar _tmp131 = _a[3] * _tmp37;
  const Scalar _tmp132 = -_a[1] * _tmp48 + _tmp131;
  const Scalar _tmp133 = (Scalar(1) / Scalar(2)) * _a[2] * _tmp43 +
                         (Scalar(1) / Scalar(2)) * _tmp130 + (Scalar(1) / Scalar(2)) * _tmp132;
  const Scalar _tmp134 = (Scalar(1) / Scalar(2)) * _b[2];
  const Scalar _tmp135 = (Scalar(1) / Scalar(2)) * _b[3];
  const Scalar _tmp136 = _a[0] * _tmp73;
  const Scalar _tmp137 = _a[2] * _tmp75 + _tmp123 + _tmp136;
  const Scalar _tmp138 = _a[1] * _tmp73;
  const Scalar _tmp139 = _a[3] * _tmp75 - _tmp116 - _tmp117 + _tmp138;
  const Scalar _tmp140 = -_a[2] * _tmp73;
  const Scalar _tmp141 = _a[0] * _tmp75 + _tmp132 + _tmp140;
  const Scalar _tmp142 = _a[3] * _tmp73 + _tmp128;
  const Scalar _tmp143 = -_a[1] * _tmp75 - _tmp126 + _tmp142;
  const Scalar _tmp144 = _a[0] * _tmp83 + _tmp127 + _tmp142;
  const Scalar _tmp145 = _a[1] * _tmp83 + _tmp130 + _tmp131 + _tmp140;
  const Scalar _tmp146 = -_a[2] * _tmp83 + _tmp118 - _tmp138;
  const Scalar _tmp147 = _a[3] * _tmp83 + _tmp121 - _tmp122 - _tmp136;

  // Output terms (3)
  Eigen::Matrix<Scalar, 7, 1> _res;

  _res[0] = _tmp0 + _tmp1 + _tmp2 - _tmp3;
  _res[1] = _tmp4 + _tmp5 + _tmp6 - _tmp7;
  _res[2] = _tmp10 - _tmp11 + _tmp8 + _tmp9;
  _res[3] = _tmp12 - _tmp13 - _tmp14 - _tmp15;
  _res[4] = _a[4] + _b[4] * _tmp26 + _b[5] * _tmp20 + _b[6] * _tmp23;
  _res[5] = _a[5] + _b[4] * _tmp27 + _b[5] * _tmp33 + _b[6] * _tmp31;
  _res[6] = _a[6] + _b[4] * _tmp34 + _b[5] * _tmp35 + _b[6] * _tmp36;

  if (res_D_a != nullptr) {
    Eigen::Matrix<Scalar, 6, 6>& _res_D_a = (*res_D_a);

    _res_D_a(0, 0) = _a[2] * _tmp66 + _a[3] * _tmp70 - _tmp56 * _tmp57 - _tmp61 * _tmp62;
    _res_D_a(0, 1) = -_a[2] * _tmp70 + _a[3] * _tmp66 - _tmp56 * _tmp62 + _tmp57 * _tmp61;
    _res_D_a(0, 2) = -_a[0] * _tmp66 + _a[1] * _tmp70 - _tmp56 * _tmp71 + _tmp61 * _tmp72;
    _res_D_a(0, 3) = 0;
    _res_D_a(0, 4) = 0;
    _res_D_a(0, 5) = 0;
    _res_D_a(1, 0) = -_tmp57 * _tmp76 - _tmp62 * _tmp78 + _tmp71 * _tmp80 + _tmp72 * _tmp82;
    _res_D_a(1, 1) = _tmp57 * _tmp78 - _tmp62 * _tmp76 - _tmp71 * _tmp82 + _tmp72 * _tmp80;
    _res_D_a(1, 2) = -_tmp57 * _tmp80 + _tmp62 * _tmp82 - _tmp71 * _tmp76 + _tmp72 * _tmp78;
    _res_D_a(1, 3) = 0;
    _res_D_a(1, 4) = 0;
    _res_D_a(1, 5) = 0;
    _res_D_a(2, 0) = -_tmp57 * _tmp84 - _tmp62 * _tmp85 + _tmp71 * _tmp86 + _tmp72 * _tmp87;
    _res_D_a(2, 1) = _tmp57 * _tmp85 - _tmp62 * _tmp84 - _tmp71 * _tmp87 + _tmp72 * _tmp86;
    _res_D_a(2, 2) = -_tmp57 * _tmp86 + _tmp62 * _tmp87 - _tmp71 * _tmp84 + _tmp72 * _tmp85;
    _res_D_a(2, 3) = 0;
    _res_D_a(2, 4) = 0;
    _res_D_a(2, 5) = 0;
    _res_D_a(3, 0) = _tmp101 * _tmp71 - _tmp57 * _tmp90 - _tmp62 * _tmp98 + _tmp72 * _tmp93;
    _res_D_a(3, 1) = _tmp101 * _tmp72 + _tmp57 * _tmp98 - _tmp62 * _tmp90 - _tmp71 * _tmp93;
    _res_D_a(3, 2) = -_tmp101 * _tmp57 + _tmp62 * _tmp93 - _tmp71 * _tmp90 + _tmp72 * _tmp98;
    _res_D_a(3, 3) = 1;
    _res_D_a(3, 4) = 0;
    _res_D_a(3, 5) = 0;
    _res_D_a(4, 0) = -_tmp103 * _tmp57 + _tmp105 * _tmp71 - _tmp108 * _tmp62 + _tmp110 * _tmp72;
    _res_D_a(4, 1) = -_tmp103 * _tmp62 + _tmp105 * _tmp72 + _tmp108 * _tmp57 - _tmp110 * _tmp71;
    _res_D_a(4, 2) = -_tmp103 * _tmp71 - _tmp105 * _tmp57 + _tmp108 * _tmp72 + _tmp110 * _tmp62;
    _res_D_a(4, 3) = 0;
    _res_D_a(4, 4) = 1;
    _res_D_a(4, 5) = 0;
    _res_D_a(5, 0) = -_tmp111 * _tmp57 - _tmp112 * _tmp62 + _tmp114 * _tmp71 + _tmp115 * _tmp72;
    _res_D_a(5, 1) = -_tmp111 * _tmp62 + _tmp112 * _tmp57 + _tmp114 * _tmp72 - _tmp115 * _tmp71;
    _res_D_a(5, 2) = -_tmp111 * _tmp71 + _tmp112 * _tmp72 - _tmp114 * _tmp57 + _tmp115 * _tmp62;
    _res_D_a(5, 3) = 0;
    _res_D_a(5, 4) = 0;
    _res_D_a(5, 5) = 1;
  }

  if (res_D_b != nullptr) {
    Eigen::Matrix<Scalar, 6, 6>& _res_D_b = (*res_D_b);

    _res_D_b(0, 0) = _b[2] * _tmp129 + _b[3] * _tmp133 - _tmp119 * _tmp120 - _tmp124 * _tmp125;
    _res_D_b(0, 1) = -_b[2] * _tmp133 + _b[3] * _tmp129 - _tmp119 * _tmp125 + _tmp120 * _tmp124;
    _res_D_b(0, 2) = -_b[0] * _tmp129 + _b[1] * _tmp133 - _tmp119 * _tmp134 + _tmp124 * _tmp135;
    _res_D_b(0, 3) = 0;
    _res_D_b(0, 4) = 0;
    _res_D_b(0, 5) = 0;
    _res_D_b(1, 0) = -_tmp120 * _tmp137 - _tmp125 * _tmp139 + _tmp134 * _tmp141 + _tmp135 * _tmp143;
    _res_D_b(1, 1) = _tmp120 * _tmp139 - _tmp125 * _tmp137 - _tmp134 * _tmp143 + _tmp135 * _tmp141;
    _res_D_b(1, 2) = -_tmp120 * _tmp141 + _tmp125 * _tmp143 - _tmp134 * _tmp137 + _tmp135 * _tmp139;
    _res_D_b(1, 3) = 0;
    _res_D_b(1, 4) = 0;
    _res_D_b(1, 5) = 0;
    _res_D_b(2, 0) = -_tmp120 * _tmp144 - _tmp125 * _tmp145 + _tmp134 * _tmp146 + _tmp135 * _tmp147;
    _res_D_b(2, 1) = _tmp120 * _tmp145 - _tmp125 * _tmp144 - _tmp134 * _tmp147 + _tmp135 * _tmp146;
    _res_D_b(2, 2) = -_tmp120 * _tmp146 + _tmp125 * _tmp147 - _tmp134 * _tmp144 + _tmp135 * _tmp145;
    _res_D_b(2, 3) = 0;
    _res_D_b(2, 4) = 0;
    _res_D_b(2, 5) = 0;
    _res_D_b(3, 0) = 0;
    _res_D_b(3, 1) = 0;
    _res_D_b(3, 2) = 0;
    _res_D_b(3, 3) = _tmp26;
    _res_D_b(3, 4) = _tmp20;
    _res_D_b(3, 5) = _tmp23;
    _res_D_b(4, 0) = 0;
    _res_D_b(4, 1) = 0;
    _res_D_b(4, 2) = 0;
    _res_D_b(4, 3) = _tmp27;
    _res_D_b(4, 4) = _tmp33;
    _res_D_b(4, 5) = _tmp31;
    _res_D_b(5, 0) = 0;
    _res_D_b(5, 1) = 0;
    _res_D_b(5, 2) = 0;
    _res_D_b(5, 3) = _tmp34;
    _res_D_b(5, 4) = _tmp35;
    _res_D_b(5, 5) = _tmp36;
  }

  return sym::Pose3<Scalar>(_res);
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
