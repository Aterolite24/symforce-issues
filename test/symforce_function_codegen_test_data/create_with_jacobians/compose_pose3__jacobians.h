// -----------------------------------------------------------------------------
// This file was autogenerated by symforce. Do NOT modify by hand.
// -----------------------------------------------------------------------------
#pragma once

#include <Eigen/Dense>

#include <geo/pose3.h>


namespace sym {


/**
* Composition of two elements in the group.
*
* Args:
*     a (Element):
*     b (Element):
*
* Returns:
*     geo.Matrix: Jacobian for arg 0 (a)
*     geo.Matrix: Jacobian for arg 1 (b)
*/
template <typename Scalar>
void ComposePose3_Jacobians(const geo::Pose3<Scalar>& a, const geo::Pose3<Scalar>& b, Eigen::Matrix<Scalar, 6, 6>* const res_D_a, Eigen::Matrix<Scalar, 6, 6>* const res_D_b) {
    // Input arrays
    const Eigen::Matrix<Scalar, 7, 1>& _a = a.Data();
    const Eigen::Matrix<Scalar, 7, 1>& _b = b.Data();
    assert( res_D_a != nullptr );
    assert( res_D_b != nullptr );

    // Intermediate terms (121)
    const Scalar _tmp0 = _a[0]*_b[3] + _a[1]*_b[2] - _a[2]*_b[1] + _a[3]*_b[0];
    const Scalar _tmp1 = (1.0/2.0)*_b[3];
    const Scalar _tmp2 = _tmp0*_tmp1;
    const Scalar _tmp3 = -_tmp2;
    const Scalar _tmp4 = -_a[0]*_b[2] + _a[1]*_b[3] + _a[2]*_b[0] + _a[3]*_b[1];
    const Scalar _tmp5 = (1.0/2.0)*_b[2];
    const Scalar _tmp6 = _tmp4*_tmp5;
    const Scalar _tmp7 = _a[0]*_b[1] - _a[1]*_b[0] + _a[2]*_b[3] + _a[3]*_b[2];
    const Scalar _tmp8 = (1.0/2.0)*_b[1];
    const Scalar _tmp9 = _tmp7*_tmp8;
    const Scalar _tmp10 = -_a[0]*_b[0] - _a[1]*_b[1] - _a[2]*_b[2] + _a[3]*_b[3];
    const Scalar _tmp11 = (1.0/2.0)*_b[0];
    const Scalar _tmp12 = _tmp10*_tmp11;
    const Scalar _tmp13 = _tmp12 + _tmp3 - _tmp6 + _tmp9;
    const Scalar _tmp14 = (1.0/2.0)*_a[0];
    const Scalar _tmp15 = _tmp1*_tmp4;
    const Scalar _tmp16 = -_tmp15;
    const Scalar _tmp17 = (1.0/2.0)*_tmp10;
    const Scalar _tmp18 = _b[1]*_tmp17;
    const Scalar _tmp19 = _tmp0*_tmp5;
    const Scalar _tmp20 = _tmp11*_tmp7;
    const Scalar _tmp21 = _tmp19 + _tmp20;
    const Scalar _tmp22 = _tmp16 - _tmp18 + _tmp21;
    const Scalar _tmp23 = (1.0/2.0)*_a[1];
    const Scalar _tmp24 = _tmp1*_tmp7;
    const Scalar _tmp25 = _tmp10*_tmp5;
    const Scalar _tmp26 = _tmp11*_tmp4;
    const Scalar _tmp27 = _tmp0*_tmp8;
    const Scalar _tmp28 = _tmp26 + _tmp27;
    const Scalar _tmp29 = _tmp24 + _tmp25 + _tmp28;
    const Scalar _tmp30 = (1.0/2.0)*_a[2];
    const Scalar _tmp31 = _tmp0*_tmp11;
    const Scalar _tmp32 = _tmp4*_tmp8;
    const Scalar _tmp33 = -_tmp32;
    const Scalar _tmp34 = _tmp5*_tmp7;
    const Scalar _tmp35 = _tmp1*_tmp10;
    const Scalar _tmp36 = -_tmp34 + _tmp35;
    const Scalar _tmp37 = _tmp31 + _tmp33 + _tmp36;
    const Scalar _tmp38 = (1.0/2.0)*_a[3];
    const Scalar _tmp39 = _tmp16 + _tmp18 + _tmp19 - _tmp20;
    const Scalar _tmp40 = _tmp6 + _tmp9;
    const Scalar _tmp41 = _tmp12 + _tmp2 + _tmp40;
    const Scalar _tmp42 = -_tmp31;
    const Scalar _tmp43 = _tmp32 + _tmp36 + _tmp42;
    const Scalar _tmp44 = -_tmp24;
    const Scalar _tmp45 = -_tmp25 + _tmp28 + _tmp44;
    const Scalar _tmp46 = _tmp33 + _tmp34 + _tmp35 + _tmp42;
    const Scalar _tmp47 = _tmp25 + _tmp26 - _tmp27 + _tmp44;
    const Scalar _tmp48 = -_tmp12 + _tmp3 + _tmp40;
    const Scalar _tmp49 = _tmp15 + _tmp18 + _tmp21;
    const Scalar _tmp50 = 2*_a[2];
    const Scalar _tmp51 = _b[5]*_tmp50;
    const Scalar _tmp52 = 2*_a[1];
    const Scalar _tmp53 = _b[6]*_tmp52;
    const Scalar _tmp54 = -_tmp51 + _tmp53;
    const Scalar _tmp55 = 2*_a[3];
    const Scalar _tmp56 = _b[5]*_tmp55;
    const Scalar _tmp57 = _a[0]*_b[6];
    const Scalar _tmp58 = 2*_tmp57;
    const Scalar _tmp59 = -4*_a[2]*_b[4] - _tmp56 + _tmp58;
    const Scalar _tmp60 = 4*_a[1];
    const Scalar _tmp61 = 2*_a[0];
    const Scalar _tmp62 = _b[5]*_tmp61;
    const Scalar _tmp63 = _b[6]*_tmp55;
    const Scalar _tmp64 = -_b[4]*_tmp60 + _tmp62 + _tmp63;
    const Scalar _tmp65 = _b[5]*_tmp52;
    const Scalar _tmp66 = _b[6]*_tmp50;
    const Scalar _tmp67 = _tmp65 + _tmp66;
    const Scalar _tmp68 = _b[4]*_tmp61;
    const Scalar _tmp69 = _tmp66 + _tmp68;
    const Scalar _tmp70 = _b[4]*_tmp50;
    const Scalar _tmp71 = -_tmp58 + _tmp70;
    const Scalar _tmp72 = _b[4]*_tmp55;
    const Scalar _tmp73 = 4*_b[5];
    const Scalar _tmp74 = -_a[2]*_tmp73 + _tmp53 + _tmp72;
    const Scalar _tmp75 = _b[4]*_tmp52;
    const Scalar _tmp76 = -_a[0]*_tmp73 - _tmp63 + _tmp75;
    const Scalar _tmp77 = _tmp62 - _tmp75;
    const Scalar _tmp78 = (1.0/2.0)*_tmp77;
    const Scalar _tmp79 = _tmp65 + _tmp68;
    const Scalar _tmp80 = -_b[6]*_tmp60 + _tmp51 - _tmp72;
    const Scalar _tmp81 = _tmp56 - 4*_tmp57 + _tmp70;
    const Scalar _tmp82 = (1.0/2.0)*_tmp79;
    const Scalar _tmp83 = _tmp0*_tmp38;
    const Scalar _tmp84 = _tmp30*_tmp4;
    const Scalar _tmp85 = _tmp23*_tmp7;
    const Scalar _tmp86 = _a[0]*_tmp17;
    const Scalar _tmp87 = -_tmp83 - _tmp84 + _tmp85 + _tmp86;
    const Scalar _tmp88 = -_tmp11*_tmp87;
    const Scalar _tmp89 = _tmp0*_tmp30;
    const Scalar _tmp90 = _tmp38*_tmp4;
    const Scalar _tmp91 = _tmp10*_tmp23;
    const Scalar _tmp92 = _tmp14*_tmp7;
    const Scalar _tmp93 = _tmp89 - _tmp90 + _tmp91 - _tmp92;
    const Scalar _tmp94 = -_tmp8*_tmp93;
    const Scalar _tmp95 = _tmp0*_tmp23;
    const Scalar _tmp96 = _tmp14*_tmp4;
    const Scalar _tmp97 = _tmp38*_tmp7;
    const Scalar _tmp98 = _a[2]*_tmp17;
    const Scalar _tmp99 = _tmp95 - _tmp96 + _tmp97 - _tmp98;
    const Scalar _tmp100 = _a[3]*_tmp17 + _tmp0*_tmp14 + _tmp23*_tmp4 + _tmp30*_tmp7;
    const Scalar _tmp101 = _tmp1*_tmp100;
    const Scalar _tmp102 = _tmp11*_tmp93;
    const Scalar _tmp103 = _tmp100*_tmp5;
    const Scalar _tmp104 = _tmp5*_tmp87;
    const Scalar _tmp105 = _tmp100*_tmp8;
    const Scalar _tmp106 = _tmp83 + _tmp84 - _tmp85 - _tmp86;
    const Scalar _tmp107 = -1.0/2.0*_tmp95 + (1.0/2.0)*_tmp96 - 1.0/2.0*_tmp97 + (1.0/2.0)*_tmp98;
    const Scalar _tmp108 = -_b[2]*_tmp107 + _tmp101;
    const Scalar _tmp109 = _tmp100*_tmp11;
    const Scalar _tmp110 = _b[1]*_tmp107;
    const Scalar _tmp111 = -_tmp89 + _tmp90 - _tmp91 + _tmp92;
    const Scalar _tmp112 = -2*(_a[1] * _a[1]);
    const Scalar _tmp113 = -2*(_a[2] * _a[2]) + 1;
    const Scalar _tmp114 = _a[1]*_tmp61;
    const Scalar _tmp115 = _a[3]*_tmp50;
    const Scalar _tmp116 = _a[0]*_tmp50;
    const Scalar _tmp117 = _a[1]*_tmp55;
    const Scalar _tmp118 = -2*(_a[0] * _a[0]);
    const Scalar _tmp119 = _a[1]*_tmp50;
    const Scalar _tmp120 = _a[0]*_tmp55;

    // Output terms (2)
    Eigen::Matrix<Scalar, 6, 6>& _res_D_a = (*res_D_a);
    Eigen::Matrix<Scalar, 6, 6>& _res_D_b = (*res_D_b);

    _res_D_a(0, 0) = -_tmp13*_tmp14 - _tmp22*_tmp23 + _tmp29*_tmp30 + _tmp37*_tmp38;
    _res_D_a(0, 1) = -_tmp13*_tmp23 + _tmp14*_tmp22 + _tmp29*_tmp38 - _tmp30*_tmp37;
    _res_D_a(0, 2) = -_tmp13*_tmp30 - _tmp14*_tmp29 + _tmp22*_tmp38 + _tmp23*_tmp37;
    _res_D_a(0, 3) = 0;
    _res_D_a(0, 4) = 0;
    _res_D_a(0, 5) = 0;
    _res_D_a(1, 0) = -_tmp14*_tmp39 - _tmp23*_tmp41 + _tmp30*_tmp43 + _tmp38*_tmp45;
    _res_D_a(1, 1) = _tmp14*_tmp41 - _tmp23*_tmp39 - _tmp30*_tmp45 + _tmp38*_tmp43;
    _res_D_a(1, 2) = -_tmp14*_tmp43 + _tmp23*_tmp45 - _tmp30*_tmp39 + _tmp38*_tmp41;
    _res_D_a(1, 3) = 0;
    _res_D_a(1, 4) = 0;
    _res_D_a(1, 5) = 0;
    _res_D_a(2, 0) = -_tmp14*_tmp47 - _tmp23*_tmp46 + _tmp30*_tmp48 + _tmp38*_tmp49;
    _res_D_a(2, 1) = _tmp14*_tmp46 - _tmp23*_tmp47 - _tmp30*_tmp49 + _tmp38*_tmp48;
    _res_D_a(2, 2) = -_tmp14*_tmp48 + _tmp23*_tmp49 - _tmp30*_tmp47 + _tmp38*_tmp46;
    _res_D_a(2, 3) = 0;
    _res_D_a(2, 4) = 0;
    _res_D_a(2, 5) = 0;
    _res_D_a(3, 0) = -_tmp14*_tmp54 - _tmp23*_tmp59 + _tmp30*_tmp64 + _tmp38*_tmp67;
    _res_D_a(3, 1) = _tmp14*_tmp59 - _tmp23*_tmp54 - _tmp30*_tmp67 + _tmp38*_tmp64;
    _res_D_a(3, 2) = -_tmp14*_tmp64 + _tmp23*_tmp67 - _tmp30*_tmp54 + _tmp38*_tmp59;
    _res_D_a(3, 3) = 1;
    _res_D_a(3, 4) = 0;
    _res_D_a(3, 5) = 0;
    _res_D_a(4, 0) = -_tmp14*_tmp71 - _tmp23*_tmp74 + _tmp30*_tmp69 + _tmp38*_tmp76;
    _res_D_a(4, 1) = _tmp14*_tmp74 - _tmp23*_tmp71 - _tmp30*_tmp76 + _tmp38*_tmp69;
    _res_D_a(4, 2) = -_tmp14*_tmp69 + _tmp23*_tmp76 - _tmp30*_tmp71 + _tmp38*_tmp74;
    _res_D_a(4, 3) = 0;
    _res_D_a(4, 4) = 1;
    _res_D_a(4, 5) = 0;
    _res_D_a(5, 0) = -_a[0]*_tmp78 - _tmp23*_tmp79 + _tmp30*_tmp80 + _tmp38*_tmp81;
    _res_D_a(5, 1) = _a[0]*_tmp82 - _tmp23*_tmp77 - _tmp30*_tmp81 + _tmp38*_tmp80;
    _res_D_a(5, 2) = -_a[2]*_tmp78 + _a[3]*_tmp82 - _tmp14*_tmp80 + _tmp23*_tmp81;
    _res_D_a(5, 3) = 0;
    _res_D_a(5, 4) = 0;
    _res_D_a(5, 5) = 1;
    _res_D_b(0, 0) = _tmp101 + _tmp5*_tmp99 + _tmp88 + _tmp94;
    _res_D_b(0, 1) = _tmp1*_tmp99 + _tmp102 - _tmp103 - _tmp8*_tmp87;
    _res_D_b(0, 2) = _tmp1*_tmp93 - _tmp104 + _tmp105 - _tmp11*_tmp99;
    _res_D_b(0, 3) = 0;
    _res_D_b(0, 4) = 0;
    _res_D_b(0, 5) = 0;
    _res_D_b(1, 0) = _b[3]*_tmp107 - _tmp102 + _tmp103 - _tmp106*_tmp8;
    _res_D_b(1, 1) = _tmp106*_tmp11 + _tmp108 + _tmp94;
    _res_D_b(1, 2) = _tmp1*_tmp106 - _tmp109 + _tmp110 - _tmp5*_tmp93;
    _res_D_b(1, 3) = 0;
    _res_D_b(1, 4) = 0;
    _res_D_b(1, 5) = 0;
    _res_D_b(2, 0) = -_b[0]*_tmp107 + _tmp1*_tmp111 + _tmp104 - _tmp105;
    _res_D_b(2, 1) = _tmp1*_tmp87 + _tmp109 - _tmp110 - _tmp111*_tmp5;
    _res_D_b(2, 2) = _tmp108 + _tmp111*_tmp8 + _tmp88;
    _res_D_b(2, 3) = 0;
    _res_D_b(2, 4) = 0;
    _res_D_b(2, 5) = 0;
    _res_D_b(3, 0) = 0;
    _res_D_b(3, 1) = 0;
    _res_D_b(3, 2) = 0;
    _res_D_b(3, 3) = _tmp112 + _tmp113;
    _res_D_b(3, 4) = _tmp114 - _tmp115;
    _res_D_b(3, 5) = _tmp116 + _tmp117;
    _res_D_b(4, 0) = 0;
    _res_D_b(4, 1) = 0;
    _res_D_b(4, 2) = 0;
    _res_D_b(4, 3) = _tmp114 + _tmp115;
    _res_D_b(4, 4) = _tmp113 + _tmp118;
    _res_D_b(4, 5) = _tmp119 - _tmp120;
    _res_D_b(5, 0) = 0;
    _res_D_b(5, 1) = 0;
    _res_D_b(5, 2) = 0;
    _res_D_b(5, 3) = _tmp116 - _tmp117;
    _res_D_b(5, 4) = _tmp119 + _tmp120;
    _res_D_b(5, 5) = _tmp112 + _tmp118 + 1;



}

}  // namespace sym
