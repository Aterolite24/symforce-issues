// -----------------------------------------------------------------------------
// This file was autogenerated by symforce. Do NOT modify by hand.
// -----------------------------------------------------------------------------
#pragma once

#include <Eigen/Dense>

#include <geo/pose3.h>


namespace sym {


/**
* Composition of two elements in the group.
*
* Args:
*     a (Element):
*     b (Element):
*
* Returns:
*     geo.Matrix: Jacobian for arg 0 (a)
*/
template <typename Scalar>
Eigen::Matrix<Scalar, 6, 6> ComposePose3_Jacobian0(const geo::Pose3<Scalar>& a, const geo::Pose3<Scalar>& b) {
    // Input arrays
    const Eigen::Matrix<Scalar, 7, 1>& _a = a.Data();
    const Eigen::Matrix<Scalar, 7, 1>& _b = b.Data();

    // Intermediate terms (86)
    const Scalar _tmp0 = _a[0]*_b[3] + _a[1]*_b[2] - _a[2]*_b[1] + _a[3]*_b[0];
    const Scalar _tmp1 = (1.0/2.0)*_tmp0;
    const Scalar _tmp2 = _b[3]*_tmp1;
    const Scalar _tmp3 = -_tmp2;
    const Scalar _tmp4 = -_a[0]*_b[2] + _a[1]*_b[3] + _a[2]*_b[0] + _a[3]*_b[1];
    const Scalar _tmp5 = (1.0/2.0)*_b[2];
    const Scalar _tmp6 = _tmp4*_tmp5;
    const Scalar _tmp7 = _a[0]*_b[1] - _a[1]*_b[0] + _a[2]*_b[3] + _a[3]*_b[2];
    const Scalar _tmp8 = (1.0/2.0)*_tmp7;
    const Scalar _tmp9 = _b[1]*_tmp8;
    const Scalar _tmp10 = -1.0/2.0*_a[0]*_b[0] - 1.0/2.0*_a[1]*_b[1] - 1.0/2.0*_a[2]*_b[2] + (1.0/2.0)*_a[3]*_b[3];
    const Scalar _tmp11 = _b[0]*_tmp10;
    const Scalar _tmp12 = _tmp11 + _tmp9;
    const Scalar _tmp13 = _tmp12 + _tmp3 - _tmp6;
    const Scalar _tmp14 = (1.0/2.0)*_a[0];
    const Scalar _tmp15 = (1.0/2.0)*_tmp4;
    const Scalar _tmp16 = _b[3]*_tmp15;
    const Scalar _tmp17 = -_tmp16;
    const Scalar _tmp18 = _b[1]*_tmp10;
    const Scalar _tmp19 = _tmp0*_tmp5;
    const Scalar _tmp20 = _b[0]*_tmp8;
    const Scalar _tmp21 = _tmp19 + _tmp20;
    const Scalar _tmp22 = _tmp17 - _tmp18 + _tmp21;
    const Scalar _tmp23 = (1.0/2.0)*_a[1];
    const Scalar _tmp24 = _b[3]*_tmp8;
    const Scalar _tmp25 = _b[2]*_tmp10;
    const Scalar _tmp26 = _b[0]*_tmp15;
    const Scalar _tmp27 = _b[1]*_tmp1;
    const Scalar _tmp28 = _tmp26 + _tmp27;
    const Scalar _tmp29 = _tmp24 + _tmp25 + _tmp28;
    const Scalar _tmp30 = (1.0/2.0)*_a[2];
    const Scalar _tmp31 = _b[0]*_tmp1;
    const Scalar _tmp32 = _b[1]*_tmp15;
    const Scalar _tmp33 = -_tmp32;
    const Scalar _tmp34 = _tmp5*_tmp7;
    const Scalar _tmp35 = -_tmp34;
    const Scalar _tmp36 = _b[3]*_tmp10;
    const Scalar _tmp37 = _tmp31 + _tmp33 + _tmp35 + _tmp36;
    const Scalar _tmp38 = (1.0/2.0)*_a[3];
    const Scalar _tmp39 = _tmp17 + _tmp18 + _tmp19 - _tmp20;
    const Scalar _tmp40 = _tmp12 + _tmp2 + _tmp6;
    const Scalar _tmp41 = -_tmp31 + _tmp36;
    const Scalar _tmp42 = _tmp32 + _tmp35 + _tmp41;
    const Scalar _tmp43 = -_tmp24;
    const Scalar _tmp44 = -_tmp25 + _tmp28 + _tmp43;
    const Scalar _tmp45 = _tmp33 + _tmp34 + _tmp41;
    const Scalar _tmp46 = _tmp25 + _tmp26 - _tmp27 + _tmp43;
    const Scalar _tmp47 = -_tmp11 + _tmp3 + _tmp6 + _tmp9;
    const Scalar _tmp48 = (1.0/2.0)*_tmp47;
    const Scalar _tmp49 = _tmp16 + _tmp18 + _tmp21;
    const Scalar _tmp50 = 2*_b[5];
    const Scalar _tmp51 = _a[2]*_tmp50;
    const Scalar _tmp52 = 2*_a[1];
    const Scalar _tmp53 = _b[6]*_tmp52;
    const Scalar _tmp54 = -_tmp51 + _tmp53;
    const Scalar _tmp55 = (1.0/2.0)*_tmp54;
    const Scalar _tmp56 = 4*_a[2];
    const Scalar _tmp57 = 2*_a[3];
    const Scalar _tmp58 = _b[5]*_tmp57;
    const Scalar _tmp59 = 2*_a[0];
    const Scalar _tmp60 = _b[6]*_tmp59;
    const Scalar _tmp61 = -_b[4]*_tmp56 - _tmp58 + _tmp60;
    const Scalar _tmp62 = 4*_a[1];
    const Scalar _tmp63 = _a[0]*_tmp50;
    const Scalar _tmp64 = _b[6]*_tmp57;
    const Scalar _tmp65 = -_b[4]*_tmp62 + _tmp63 + _tmp64;
    const Scalar _tmp66 = _a[1]*_tmp50;
    const Scalar _tmp67 = 2*_a[2];
    const Scalar _tmp68 = _b[6]*_tmp67;
    const Scalar _tmp69 = _tmp66 + _tmp68;
    const Scalar _tmp70 = (1.0/2.0)*_tmp69;
    const Scalar _tmp71 = _b[4]*_tmp59;
    const Scalar _tmp72 = _tmp68 + _tmp71;
    const Scalar _tmp73 = _b[4]*_tmp67;
    const Scalar _tmp74 = -_tmp60 + _tmp73;
    const Scalar _tmp75 = _b[4]*_tmp57;
    const Scalar _tmp76 = -_b[5]*_tmp56 + _tmp53 + _tmp75;
    const Scalar _tmp77 = _b[4]*_tmp52;
    const Scalar _tmp78 = 4*_a[0];
    const Scalar _tmp79 = -_b[5]*_tmp78 - _tmp64 + _tmp77;
    const Scalar _tmp80 = _tmp63 - _tmp77;
    const Scalar _tmp81 = (1.0/2.0)*_tmp80;
    const Scalar _tmp82 = _tmp66 + _tmp71;
    const Scalar _tmp83 = -_b[6]*_tmp62 + _tmp51 - _tmp75;
    const Scalar _tmp84 = -_b[6]*_tmp78 + _tmp58 + _tmp73;
    const Scalar _tmp85 = (1.0/2.0)*_tmp82;

    // Output terms (1)
    Eigen::Matrix<Scalar, 6, 6> _res_D_a;

    _res_D_a(0, 0) = -_tmp13*_tmp14 - _tmp22*_tmp23 + _tmp29*_tmp30 + _tmp37*_tmp38;
    _res_D_a(0, 1) = -_tmp13*_tmp23 + _tmp14*_tmp22 + _tmp29*_tmp38 - _tmp30*_tmp37;
    _res_D_a(0, 2) = -_tmp13*_tmp30 - _tmp14*_tmp29 + _tmp22*_tmp38 + _tmp23*_tmp37;
    _res_D_a(0, 3) = 0;
    _res_D_a(0, 4) = 0;
    _res_D_a(0, 5) = 0;
    _res_D_a(1, 0) = -_tmp14*_tmp39 - _tmp23*_tmp40 + _tmp30*_tmp42 + _tmp38*_tmp44;
    _res_D_a(1, 1) = _tmp14*_tmp40 - _tmp23*_tmp39 - _tmp30*_tmp44 + _tmp38*_tmp42;
    _res_D_a(1, 2) = -_tmp14*_tmp42 + _tmp23*_tmp44 - _tmp30*_tmp39 + _tmp38*_tmp40;
    _res_D_a(1, 3) = 0;
    _res_D_a(1, 4) = 0;
    _res_D_a(1, 5) = 0;
    _res_D_a(2, 0) = _a[2]*_tmp48 - _tmp14*_tmp46 - _tmp23*_tmp45 + _tmp38*_tmp49;
    _res_D_a(2, 1) = _tmp14*_tmp45 - _tmp23*_tmp46 - _tmp30*_tmp49 + _tmp38*_tmp47;
    _res_D_a(2, 2) = -_a[0]*_tmp48 + _tmp23*_tmp49 - _tmp30*_tmp46 + _tmp38*_tmp45;
    _res_D_a(2, 3) = 0;
    _res_D_a(2, 4) = 0;
    _res_D_a(2, 5) = 0;
    _res_D_a(3, 0) = -_a[0]*_tmp55 + _a[3]*_tmp70 - _tmp23*_tmp61 + _tmp30*_tmp65;
    _res_D_a(3, 1) = -_a[2]*_tmp70 + _tmp14*_tmp61 - _tmp23*_tmp54 + _tmp38*_tmp65;
    _res_D_a(3, 2) = -_a[2]*_tmp55 - _tmp14*_tmp65 + _tmp23*_tmp69 + _tmp38*_tmp61;
    _res_D_a(3, 3) = 1;
    _res_D_a(3, 4) = 0;
    _res_D_a(3, 5) = 0;
    _res_D_a(4, 0) = -_tmp14*_tmp74 - _tmp23*_tmp76 + _tmp30*_tmp72 + _tmp38*_tmp79;
    _res_D_a(4, 1) = _tmp14*_tmp76 - _tmp23*_tmp74 - _tmp30*_tmp79 + _tmp38*_tmp72;
    _res_D_a(4, 2) = -_tmp14*_tmp72 + _tmp23*_tmp79 - _tmp30*_tmp74 + _tmp38*_tmp76;
    _res_D_a(4, 3) = 0;
    _res_D_a(4, 4) = 1;
    _res_D_a(4, 5) = 0;
    _res_D_a(5, 0) = -_a[0]*_tmp81 - _tmp23*_tmp82 + _tmp30*_tmp83 + _tmp38*_tmp84;
    _res_D_a(5, 1) = _a[0]*_tmp85 - _tmp23*_tmp80 - _tmp30*_tmp84 + _tmp38*_tmp83;
    _res_D_a(5, 2) = -_a[2]*_tmp81 + _a[3]*_tmp85 - _tmp14*_tmp83 + _tmp23*_tmp84;
    _res_D_a(5, 3) = 0;
    _res_D_a(5, 4) = 0;
    _res_D_a(5, 5) = 1;


    return _res_D_a;
}

}  // namespace sym
