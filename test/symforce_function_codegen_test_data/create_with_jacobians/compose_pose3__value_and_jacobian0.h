// -----------------------------------------------------------------------------
// This file was autogenerated by symforce. Do NOT modify by hand.
// -----------------------------------------------------------------------------
#pragma once

#include <Eigen/Dense>

#include <geo/pose3.h>


namespace sym {


/**
* Composition of two elements in the group.
*
* Args:
*     a (Element):
*     b (Element):
*
* Returns:
*     Element: a @ b
*     geo.Matrix: Jacobian for arg 0 (a)
*/
template <typename Scalar>
geo::Pose3<Scalar> ComposePose3_ValueAndJacobian0(const geo::Pose3<Scalar>& a, const geo::Pose3<Scalar>& b, Eigen::Matrix<Scalar, 6, 6>* const res_D_a) {
    // Input arrays
    const Eigen::Matrix<Scalar, 7, 1>& _a = a.Data();
    const Eigen::Matrix<Scalar, 7, 1>& _b = b.Data();
    assert( res_D_a != nullptr );

    // Intermediate terms (90)
    const Scalar _tmp0 = _a[0]*_b[3] + _a[1]*_b[2] - _a[2]*_b[1] + _a[3]*_b[0];
    const Scalar _tmp1 = -_a[0]*_b[2] + _a[1]*_b[3] + _a[2]*_b[0] + _a[3]*_b[1];
    const Scalar _tmp2 = _a[0]*_b[1] - _a[1]*_b[0] + _a[2]*_b[3] + _a[3]*_b[2];
    const Scalar _tmp3 = -_a[0]*_b[0] - _a[1]*_b[1] - _a[2]*_b[2] + _a[3]*_b[3];
    const Scalar _tmp4 = 2*_a[3];
    const Scalar _tmp5 = _a[1]*_tmp4;
    const Scalar _tmp6 = 2*_a[2];
    const Scalar _tmp7 = _a[0]*_tmp6;
    const Scalar _tmp8 = _a[2]*_tmp4;
    const Scalar _tmp9 = 2*_a[1];
    const Scalar _tmp10 = _a[0]*_tmp9;
    const Scalar _tmp11 = -2*(_a[1] * _a[1]);
    const Scalar _tmp12 = -2*(_a[2] * _a[2]) + 1;
    const Scalar _tmp13 = _a[0]*_tmp4;
    const Scalar _tmp14 = _a[2]*_tmp9;
    const Scalar _tmp15 = -2*(_a[0] * _a[0]);
    const Scalar _tmp16 = (1.0/2.0)*_tmp0;
    const Scalar _tmp17 = _b[3]*_tmp16;
    const Scalar _tmp18 = -_tmp17;
    const Scalar _tmp19 = (1.0/2.0)*_b[2];
    const Scalar _tmp20 = _tmp1*_tmp19;
    const Scalar _tmp21 = (1.0/2.0)*_tmp2;
    const Scalar _tmp22 = _b[1]*_tmp21;
    const Scalar _tmp23 = (1.0/2.0)*_tmp3;
    const Scalar _tmp24 = _b[0]*_tmp23;
    const Scalar _tmp25 = _tmp18 - _tmp20 + _tmp22 + _tmp24;
    const Scalar _tmp26 = (1.0/2.0)*_a[0];
    const Scalar _tmp27 = (1.0/2.0)*_tmp1;
    const Scalar _tmp28 = _b[3]*_tmp27;
    const Scalar _tmp29 = -_tmp28;
    const Scalar _tmp30 = _b[1]*_tmp23;
    const Scalar _tmp31 = _tmp0*_tmp19;
    const Scalar _tmp32 = _b[0]*_tmp21;
    const Scalar _tmp33 = _tmp31 + _tmp32;
    const Scalar _tmp34 = _tmp29 - _tmp30 + _tmp33;
    const Scalar _tmp35 = (1.0/2.0)*_a[1];
    const Scalar _tmp36 = _b[3]*_tmp21;
    const Scalar _tmp37 = _b[2]*_tmp23;
    const Scalar _tmp38 = _b[0]*_tmp27;
    const Scalar _tmp39 = _b[1]*_tmp16;
    const Scalar _tmp40 = _tmp38 + _tmp39;
    const Scalar _tmp41 = _tmp36 + _tmp37 + _tmp40;
    const Scalar _tmp42 = (1.0/2.0)*_a[2];
    const Scalar _tmp43 = _b[0]*_tmp16;
    const Scalar _tmp44 = _b[1]*_tmp27;
    const Scalar _tmp45 = -_tmp44;
    const Scalar _tmp46 = _tmp19*_tmp2;
    const Scalar _tmp47 = _b[3]*_tmp23;
    const Scalar _tmp48 = -_tmp46 + _tmp47;
    const Scalar _tmp49 = _tmp43 + _tmp45 + _tmp48;
    const Scalar _tmp50 = (1.0/2.0)*_a[3];
    const Scalar _tmp51 = _tmp29 + _tmp30 + _tmp31 - _tmp32;
    const Scalar _tmp52 = _tmp20 + _tmp22;
    const Scalar _tmp53 = _tmp17 + _tmp24 + _tmp52;
    const Scalar _tmp54 = -_tmp43;
    const Scalar _tmp55 = _tmp44 + _tmp48 + _tmp54;
    const Scalar _tmp56 = -_tmp36;
    const Scalar _tmp57 = -_tmp37 + _tmp40 + _tmp56;
    const Scalar _tmp58 = _tmp45 + _tmp46 + _tmp47 + _tmp54;
    const Scalar _tmp59 = _tmp37 + _tmp38 - _tmp39 + _tmp56;
    const Scalar _tmp60 = _tmp18 - _tmp24 + _tmp52;
    const Scalar _tmp61 = _tmp28 + _tmp30 + _tmp33;
    const Scalar _tmp62 = _b[5]*_tmp6;
    const Scalar _tmp63 = _b[6]*_tmp9;
    const Scalar _tmp64 = -_tmp62 + _tmp63;
    const Scalar _tmp65 = 4*_a[2];
    const Scalar _tmp66 = _b[5]*_tmp4;
    const Scalar _tmp67 = 2*_a[0];
    const Scalar _tmp68 = _b[6]*_tmp67;
    const Scalar _tmp69 = -_b[4]*_tmp65 - _tmp66 + _tmp68;
    const Scalar _tmp70 = 4*_a[1];
    const Scalar _tmp71 = _b[5]*_tmp67;
    const Scalar _tmp72 = _b[6]*_tmp4;
    const Scalar _tmp73 = -_b[4]*_tmp70 + _tmp71 + _tmp72;
    const Scalar _tmp74 = _b[5]*_tmp9;
    const Scalar _tmp75 = _b[6]*_tmp6;
    const Scalar _tmp76 = _tmp74 + _tmp75;
    const Scalar _tmp77 = _b[4]*_tmp67;
    const Scalar _tmp78 = _tmp75 + _tmp77;
    const Scalar _tmp79 = _b[4]*_tmp6;
    const Scalar _tmp80 = -_tmp68 + _tmp79;
    const Scalar _tmp81 = _b[4]*_tmp4;
    const Scalar _tmp82 = -_b[5]*_tmp65 + _tmp63 + _tmp81;
    const Scalar _tmp83 = _b[4]*_tmp9;
    const Scalar _tmp84 = 4*_a[0];
    const Scalar _tmp85 = -_b[5]*_tmp84 - _tmp72 + _tmp83;
    const Scalar _tmp86 = _tmp71 - _tmp83;
    const Scalar _tmp87 = _tmp74 + _tmp77;
    const Scalar _tmp88 = -_b[6]*_tmp70 + _tmp62 - _tmp81;
    const Scalar _tmp89 = -_b[6]*_tmp84 + _tmp66 + _tmp79;

    // Output terms (2)
    Eigen::Matrix<Scalar, 7, 1> _res;
    Eigen::Matrix<Scalar, 6, 6>& _res_D_a = (*res_D_a);

    _res[0] = _tmp0;
    _res[1] = _tmp1;
    _res[2] = _tmp2;
    _res[3] = _tmp3;
    _res[4] = _a[4] + _b[4]*(_tmp11 + _tmp12) + _b[5]*(_tmp10 - _tmp8) + _b[6]*(_tmp5 + _tmp7);
    _res[5] = _a[5] + _b[4]*(_tmp10 + _tmp8) + _b[5]*(_tmp12 + _tmp15) + _b[6]*(-_tmp13 + _tmp14);
    _res[6] = _a[6] + _b[4]*(-_tmp5 + _tmp7) + _b[5]*(_tmp13 + _tmp14) + _b[6]*(_tmp11 + _tmp15 + 1);
    _res_D_a(0, 0) = -_tmp25*_tmp26 - _tmp34*_tmp35 + _tmp41*_tmp42 + _tmp49*_tmp50;
    _res_D_a(0, 1) = -_tmp25*_tmp35 + _tmp26*_tmp34 + _tmp41*_tmp50 - _tmp42*_tmp49;
    _res_D_a(0, 2) = -_tmp25*_tmp42 - _tmp26*_tmp41 + _tmp34*_tmp50 + _tmp35*_tmp49;
    _res_D_a(0, 3) = 0;
    _res_D_a(0, 4) = 0;
    _res_D_a(0, 5) = 0;
    _res_D_a(1, 0) = -_tmp26*_tmp51 - _tmp35*_tmp53 + _tmp42*_tmp55 + _tmp50*_tmp57;
    _res_D_a(1, 1) = _tmp26*_tmp53 - _tmp35*_tmp51 - _tmp42*_tmp57 + _tmp50*_tmp55;
    _res_D_a(1, 2) = -_tmp26*_tmp55 + _tmp35*_tmp57 - _tmp42*_tmp51 + _tmp50*_tmp53;
    _res_D_a(1, 3) = 0;
    _res_D_a(1, 4) = 0;
    _res_D_a(1, 5) = 0;
    _res_D_a(2, 0) = -_tmp26*_tmp59 - _tmp35*_tmp58 + _tmp42*_tmp60 + _tmp50*_tmp61;
    _res_D_a(2, 1) = _tmp26*_tmp58 - _tmp35*_tmp59 - _tmp42*_tmp61 + _tmp50*_tmp60;
    _res_D_a(2, 2) = -_tmp26*_tmp60 + _tmp35*_tmp61 - _tmp42*_tmp59 + _tmp50*_tmp58;
    _res_D_a(2, 3) = 0;
    _res_D_a(2, 4) = 0;
    _res_D_a(2, 5) = 0;
    _res_D_a(3, 0) = -_tmp26*_tmp64 - _tmp35*_tmp69 + _tmp42*_tmp73 + _tmp50*_tmp76;
    _res_D_a(3, 1) = _tmp26*_tmp69 - _tmp35*_tmp64 - _tmp42*_tmp76 + _tmp50*_tmp73;
    _res_D_a(3, 2) = -_tmp26*_tmp73 + _tmp35*_tmp76 - _tmp42*_tmp64 + _tmp50*_tmp69;
    _res_D_a(3, 3) = 1;
    _res_D_a(3, 4) = 0;
    _res_D_a(3, 5) = 0;
    _res_D_a(4, 0) = -_tmp26*_tmp80 - _tmp35*_tmp82 + _tmp42*_tmp78 + _tmp50*_tmp85;
    _res_D_a(4, 1) = _tmp26*_tmp82 - _tmp35*_tmp80 - _tmp42*_tmp85 + _tmp50*_tmp78;
    _res_D_a(4, 2) = -_tmp26*_tmp78 + _tmp35*_tmp85 - _tmp42*_tmp80 + _tmp50*_tmp82;
    _res_D_a(4, 3) = 0;
    _res_D_a(4, 4) = 1;
    _res_D_a(4, 5) = 0;
    _res_D_a(5, 0) = -_tmp26*_tmp86 - _tmp35*_tmp87 + _tmp42*_tmp88 + _tmp50*_tmp89;
    _res_D_a(5, 1) = _tmp26*_tmp87 - _tmp35*_tmp86 - _tmp42*_tmp89 + _tmp50*_tmp88;
    _res_D_a(5, 2) = -_tmp26*_tmp88 + _tmp35*_tmp89 - _tmp42*_tmp86 + _tmp50*_tmp87;
    _res_D_a(5, 3) = 0;
    _res_D_a(5, 4) = 0;
    _res_D_a(5, 5) = 1;


    return geo::Pose3<Scalar>(_res);
}

}  // namespace sym
