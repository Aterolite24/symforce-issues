// -----------------------------------------------------------------------------
// This file was autogenerated by symforce. Do NOT modify by hand.
// -----------------------------------------------------------------------------
#pragma once

#include <Eigen/Dense>

#include <geo/pose3.h>


namespace sym {


/**
* Composition of two elements in the group.
*
* Args:
*     a (Element):
*     b (Element):
*
* Returns:
*     Element: a @ b
*     geo.Matrix: Jacobian for arg 0 (a)
*     geo.Matrix: Jacobian for arg 1 (b)
*/
template <typename Scalar>
geo::Pose3<Scalar> ComposePose3_ValueAndJacobians(const geo::Pose3<Scalar>& a, const geo::Pose3<Scalar>& b, Eigen::Matrix<Scalar, 6, 6>* const res_D_a, Eigen::Matrix<Scalar, 6, 6>* const res_D_b) {
    // Input arrays
    const Eigen::Matrix<Scalar, 7, 1>& _a = a.Data();
    const Eigen::Matrix<Scalar, 7, 1>& _b = b.Data();
    assert( res_D_a != nullptr );
    assert( res_D_b != nullptr );

    // Intermediate terms (130)
    const Scalar _tmp0 = _a[0]*_b[3] + _a[1]*_b[2] - _a[2]*_b[1] + _a[3]*_b[0];
    const Scalar _tmp1 = -_a[0]*_b[2] + _a[1]*_b[3] + _a[2]*_b[0] + _a[3]*_b[1];
    const Scalar _tmp2 = _a[0]*_b[1] - _a[1]*_b[0] + _a[2]*_b[3] + _a[3]*_b[2];
    const Scalar _tmp3 = -_a[0]*_b[0] - _a[1]*_b[1] - _a[2]*_b[2] + _a[3]*_b[3];
    const Scalar _tmp4 = 2*_a[3];
    const Scalar _tmp5 = _a[1]*_tmp4;
    const Scalar _tmp6 = 2*_a[2];
    const Scalar _tmp7 = _a[0]*_tmp6;
    const Scalar _tmp8 = _tmp5 + _tmp7;
    const Scalar _tmp9 = _a[3]*_tmp6;
    const Scalar _tmp10 = 2*_a[0];
    const Scalar _tmp11 = _a[1]*_tmp10;
    const Scalar _tmp12 = _tmp11 - _tmp9;
    const Scalar _tmp13 = -2*(_a[1] * _a[1]);
    const Scalar _tmp14 = -2*(_a[2] * _a[2]) + 1;
    const Scalar _tmp15 = _tmp13 + _tmp14;
    const Scalar _tmp16 = _a[0]*_tmp4;
    const Scalar _tmp17 = _a[1]*_tmp6;
    const Scalar _tmp18 = -_tmp16 + _tmp17;
    const Scalar _tmp19 = -2*(_a[0] * _a[0]);
    const Scalar _tmp20 = _tmp14 + _tmp19;
    const Scalar _tmp21 = _tmp11 + _tmp9;
    const Scalar _tmp22 = _tmp13 + _tmp19 + 1;
    const Scalar _tmp23 = _tmp16 + _tmp17;
    const Scalar _tmp24 = -_tmp5 + _tmp7;
    const Scalar _tmp25 = (1.0/2.0)*_b[3];
    const Scalar _tmp26 = _tmp0*_tmp25;
    const Scalar _tmp27 = -_tmp26;
    const Scalar _tmp28 = (1.0/2.0)*_b[2];
    const Scalar _tmp29 = _tmp1*_tmp28;
    const Scalar _tmp30 = (1.0/2.0)*_b[1];
    const Scalar _tmp31 = _tmp2*_tmp30;
    const Scalar _tmp32 = (1.0/2.0)*_b[0];
    const Scalar _tmp33 = _tmp3*_tmp32;
    const Scalar _tmp34 = _tmp27 - _tmp29 + _tmp31 + _tmp33;
    const Scalar _tmp35 = (1.0/2.0)*_a[0];
    const Scalar _tmp36 = _tmp1*_tmp25;
    const Scalar _tmp37 = -_tmp36;
    const Scalar _tmp38 = _tmp3*_tmp30;
    const Scalar _tmp39 = _tmp0*_tmp28;
    const Scalar _tmp40 = _tmp2*_tmp32;
    const Scalar _tmp41 = _tmp39 + _tmp40;
    const Scalar _tmp42 = _tmp37 - _tmp38 + _tmp41;
    const Scalar _tmp43 = (1.0/2.0)*_a[1];
    const Scalar _tmp44 = _tmp2*_tmp25;
    const Scalar _tmp45 = _tmp28*_tmp3;
    const Scalar _tmp46 = _tmp1*_tmp32;
    const Scalar _tmp47 = _tmp0*_tmp30;
    const Scalar _tmp48 = _tmp46 + _tmp47;
    const Scalar _tmp49 = _tmp44 + _tmp45 + _tmp48;
    const Scalar _tmp50 = (1.0/2.0)*_a[2];
    const Scalar _tmp51 = _tmp0*_tmp32;
    const Scalar _tmp52 = _tmp1*_tmp30;
    const Scalar _tmp53 = -_tmp52;
    const Scalar _tmp54 = _tmp2*_tmp28;
    const Scalar _tmp55 = _tmp25*_tmp3;
    const Scalar _tmp56 = -_tmp54 + _tmp55;
    const Scalar _tmp57 = _tmp51 + _tmp53 + _tmp56;
    const Scalar _tmp58 = (1.0/2.0)*_a[3];
    const Scalar _tmp59 = _tmp37 + _tmp38 + _tmp39 - _tmp40;
    const Scalar _tmp60 = _tmp29 + _tmp31;
    const Scalar _tmp61 = _tmp26 + _tmp33 + _tmp60;
    const Scalar _tmp62 = -_tmp51;
    const Scalar _tmp63 = _tmp52 + _tmp56 + _tmp62;
    const Scalar _tmp64 = -_tmp44;
    const Scalar _tmp65 = -_tmp45 + _tmp48 + _tmp64;
    const Scalar _tmp66 = _tmp53 + _tmp54 + _tmp55 + _tmp62;
    const Scalar _tmp67 = _tmp45 + _tmp46 - _tmp47 + _tmp64;
    const Scalar _tmp68 = _tmp27 - _tmp33 + _tmp60;
    const Scalar _tmp69 = _tmp36 + _tmp38 + _tmp41;
    const Scalar _tmp70 = _b[5]*_tmp6;
    const Scalar _tmp71 = 2*_a[1];
    const Scalar _tmp72 = _b[6]*_tmp71;
    const Scalar _tmp73 = -_tmp70 + _tmp72;
    const Scalar _tmp74 = _b[5]*_tmp4;
    const Scalar _tmp75 = _a[0]*_b[6];
    const Scalar _tmp76 = 2*_tmp75;
    const Scalar _tmp77 = -4*_a[2]*_b[4] - _tmp74 + _tmp76;
    const Scalar _tmp78 = 4*_a[1];
    const Scalar _tmp79 = _b[5]*_tmp10;
    const Scalar _tmp80 = _b[6]*_tmp4;
    const Scalar _tmp81 = -_b[4]*_tmp78 + _tmp79 + _tmp80;
    const Scalar _tmp82 = _b[5]*_tmp71;
    const Scalar _tmp83 = _b[6]*_tmp6;
    const Scalar _tmp84 = _tmp82 + _tmp83;
    const Scalar _tmp85 = _b[4]*_tmp10;
    const Scalar _tmp86 = _tmp83 + _tmp85;
    const Scalar _tmp87 = _b[4]*_tmp6;
    const Scalar _tmp88 = -_tmp76 + _tmp87;
    const Scalar _tmp89 = _b[4]*_tmp4;
    const Scalar _tmp90 = 4*_b[5];
    const Scalar _tmp91 = -_a[2]*_tmp90 + _tmp72 + _tmp89;
    const Scalar _tmp92 = _b[4]*_tmp71;
    const Scalar _tmp93 = -_a[0]*_tmp90 - _tmp80 + _tmp92;
    const Scalar _tmp94 = _tmp79 - _tmp92;
    const Scalar _tmp95 = (1.0/2.0)*_tmp94;
    const Scalar _tmp96 = _tmp82 + _tmp85;
    const Scalar _tmp97 = -_b[6]*_tmp78 + _tmp70 - _tmp89;
    const Scalar _tmp98 = _tmp74 - 4*_tmp75 + _tmp87;
    const Scalar _tmp99 = (1.0/2.0)*_tmp96;
    const Scalar _tmp100 = _tmp0*_tmp58;
    const Scalar _tmp101 = _tmp1*_tmp50;
    const Scalar _tmp102 = _tmp2*_tmp43;
    const Scalar _tmp103 = (1.0/2.0)*_tmp3;
    const Scalar _tmp104 = _a[0]*_tmp103;
    const Scalar _tmp105 = -_tmp100 - _tmp101 + _tmp102 + _tmp104;
    const Scalar _tmp106 = -_tmp105*_tmp32;
    const Scalar _tmp107 = _tmp0*_tmp50;
    const Scalar _tmp108 = _tmp2*_tmp35;
    const Scalar _tmp109 = _tmp1*_tmp58;
    const Scalar _tmp110 = _tmp3*_tmp43;
    const Scalar _tmp111 = _tmp107 - _tmp108 - _tmp109 + _tmp110;
    const Scalar _tmp112 = -_tmp111*_tmp30;
    const Scalar _tmp113 = _tmp0*_tmp43;
    const Scalar _tmp114 = _tmp1*_tmp35;
    const Scalar _tmp115 = _tmp2*_tmp58;
    const Scalar _tmp116 = _a[2]*_tmp103;
    const Scalar _tmp117 = _tmp113 - _tmp114 + _tmp115 - _tmp116;
    const Scalar _tmp118 = _a[3]*_tmp103 + _tmp0*_tmp35 + _tmp1*_tmp43 + _tmp2*_tmp50;
    const Scalar _tmp119 = _tmp118*_tmp25;
    const Scalar _tmp120 = _tmp111*_tmp32;
    const Scalar _tmp121 = _tmp118*_tmp28;
    const Scalar _tmp122 = _tmp105*_tmp28;
    const Scalar _tmp123 = _tmp118*_tmp30;
    const Scalar _tmp124 = _tmp100 + _tmp101 - _tmp102 - _tmp104;
    const Scalar _tmp125 = -_tmp113 + _tmp114 - _tmp115 + _tmp116;
    const Scalar _tmp126 = _tmp119 - _tmp125*_tmp28;
    const Scalar _tmp127 = _tmp118*_tmp32;
    const Scalar _tmp128 = _tmp125*_tmp30;
    const Scalar _tmp129 = -_tmp107 + _tmp108 + _tmp109 - _tmp110;

    // Output terms (3)
    Eigen::Matrix<Scalar, 7, 1> _res;
    Eigen::Matrix<Scalar, 6, 6>& _res_D_a = (*res_D_a);
    Eigen::Matrix<Scalar, 6, 6>& _res_D_b = (*res_D_b);

    _res[0] = _tmp0;
    _res[1] = _tmp1;
    _res[2] = _tmp2;
    _res[3] = _tmp3;
    _res[4] = _a[4] + _b[4]*_tmp15 + _b[5]*_tmp12 + _b[6]*_tmp8;
    _res[5] = _a[5] + _b[4]*_tmp21 + _b[5]*_tmp20 + _b[6]*_tmp18;
    _res[6] = _a[6] + _b[4]*_tmp24 + _b[5]*_tmp23 + _b[6]*_tmp22;
    _res_D_a(0, 0) = -_tmp34*_tmp35 - _tmp42*_tmp43 + _tmp49*_tmp50 + _tmp57*_tmp58;
    _res_D_a(0, 1) = -_tmp34*_tmp43 + _tmp35*_tmp42 + _tmp49*_tmp58 - _tmp50*_tmp57;
    _res_D_a(0, 2) = -_tmp34*_tmp50 - _tmp35*_tmp49 + _tmp42*_tmp58 + _tmp43*_tmp57;
    _res_D_a(0, 3) = 0;
    _res_D_a(0, 4) = 0;
    _res_D_a(0, 5) = 0;
    _res_D_a(1, 0) = -_tmp35*_tmp59 - _tmp43*_tmp61 + _tmp50*_tmp63 + _tmp58*_tmp65;
    _res_D_a(1, 1) = _tmp35*_tmp61 - _tmp43*_tmp59 - _tmp50*_tmp65 + _tmp58*_tmp63;
    _res_D_a(1, 2) = -_tmp35*_tmp63 + _tmp43*_tmp65 - _tmp50*_tmp59 + _tmp58*_tmp61;
    _res_D_a(1, 3) = 0;
    _res_D_a(1, 4) = 0;
    _res_D_a(1, 5) = 0;
    _res_D_a(2, 0) = -_tmp35*_tmp67 - _tmp43*_tmp66 + _tmp50*_tmp68 + _tmp58*_tmp69;
    _res_D_a(2, 1) = _tmp35*_tmp66 - _tmp43*_tmp67 - _tmp50*_tmp69 + _tmp58*_tmp68;
    _res_D_a(2, 2) = -_tmp35*_tmp68 + _tmp43*_tmp69 - _tmp50*_tmp67 + _tmp58*_tmp66;
    _res_D_a(2, 3) = 0;
    _res_D_a(2, 4) = 0;
    _res_D_a(2, 5) = 0;
    _res_D_a(3, 0) = -_tmp35*_tmp73 - _tmp43*_tmp77 + _tmp50*_tmp81 + _tmp58*_tmp84;
    _res_D_a(3, 1) = _tmp35*_tmp77 - _tmp43*_tmp73 - _tmp50*_tmp84 + _tmp58*_tmp81;
    _res_D_a(3, 2) = -_tmp35*_tmp81 + _tmp43*_tmp84 - _tmp50*_tmp73 + _tmp58*_tmp77;
    _res_D_a(3, 3) = 1;
    _res_D_a(3, 4) = 0;
    _res_D_a(3, 5) = 0;
    _res_D_a(4, 0) = -_tmp35*_tmp88 - _tmp43*_tmp91 + _tmp50*_tmp86 + _tmp58*_tmp93;
    _res_D_a(4, 1) = _tmp35*_tmp91 - _tmp43*_tmp88 - _tmp50*_tmp93 + _tmp58*_tmp86;
    _res_D_a(4, 2) = -_tmp35*_tmp86 + _tmp43*_tmp93 - _tmp50*_tmp88 + _tmp58*_tmp91;
    _res_D_a(4, 3) = 0;
    _res_D_a(4, 4) = 1;
    _res_D_a(4, 5) = 0;
    _res_D_a(5, 0) = -_a[0]*_tmp95 - _tmp43*_tmp96 + _tmp50*_tmp97 + _tmp58*_tmp98;
    _res_D_a(5, 1) = _a[0]*_tmp99 - _tmp43*_tmp94 - _tmp50*_tmp98 + _tmp58*_tmp97;
    _res_D_a(5, 2) = -_a[2]*_tmp95 + _a[3]*_tmp99 - _tmp35*_tmp97 + _tmp43*_tmp98;
    _res_D_a(5, 3) = 0;
    _res_D_a(5, 4) = 0;
    _res_D_a(5, 5) = 1;
    _res_D_b(0, 0) = _tmp106 + _tmp112 + _tmp117*_tmp28 + _tmp119;
    _res_D_b(0, 1) = -_tmp105*_tmp30 + _tmp117*_tmp25 + _tmp120 - _tmp121;
    _res_D_b(0, 2) = _tmp111*_tmp25 - _tmp117*_tmp32 - _tmp122 + _tmp123;
    _res_D_b(0, 3) = 0;
    _res_D_b(0, 4) = 0;
    _res_D_b(0, 5) = 0;
    _res_D_b(1, 0) = -_tmp120 + _tmp121 - _tmp124*_tmp30 + _tmp125*_tmp25;
    _res_D_b(1, 1) = _tmp112 + _tmp124*_tmp32 + _tmp126;
    _res_D_b(1, 2) = -_tmp111*_tmp28 + _tmp124*_tmp25 - _tmp127 + _tmp128;
    _res_D_b(1, 3) = 0;
    _res_D_b(1, 4) = 0;
    _res_D_b(1, 5) = 0;
    _res_D_b(2, 0) = _tmp122 - _tmp123 - _tmp125*_tmp32 + _tmp129*_tmp25;
    _res_D_b(2, 1) = _tmp105*_tmp25 + _tmp127 - _tmp128 - _tmp129*_tmp28;
    _res_D_b(2, 2) = _tmp106 + _tmp126 + _tmp129*_tmp30;
    _res_D_b(2, 3) = 0;
    _res_D_b(2, 4) = 0;
    _res_D_b(2, 5) = 0;
    _res_D_b(3, 0) = 0;
    _res_D_b(3, 1) = 0;
    _res_D_b(3, 2) = 0;
    _res_D_b(3, 3) = _tmp15;
    _res_D_b(3, 4) = _tmp12;
    _res_D_b(3, 5) = _tmp8;
    _res_D_b(4, 0) = 0;
    _res_D_b(4, 1) = 0;
    _res_D_b(4, 2) = 0;
    _res_D_b(4, 3) = _tmp21;
    _res_D_b(4, 4) = _tmp20;
    _res_D_b(4, 5) = _tmp18;
    _res_D_b(5, 0) = 0;
    _res_D_b(5, 1) = 0;
    _res_D_b(5, 2) = 0;
    _res_D_b(5, 3) = _tmp24;
    _res_D_b(5, 4) = _tmp23;
    _res_D_b(5, 5) = _tmp22;


    return geo::Pose3<Scalar>(_res);
}

}  // namespace sym
