// -----------------------------------------------------------------------------
// This file was autogenerated by symforce. Do NOT modify by hand.
// -----------------------------------------------------------------------------
#pragma once

#include <Eigen/Dense>

#include <geo/pose3.h>


namespace sym {


/**
* Composition of two elements in the group.
*
* Args:
*     a (Element):
*     b (Element):
*
* Returns:
*     geo.Matrix: Jacobian for arg 1 (b)
*/
template <typename Scalar>
Eigen::Matrix<Scalar, 6, 6> ComposePose3_Jacobian1(const geo::Pose3<Scalar>& a, const geo::Pose3<Scalar>& b) {
    // Input arrays
    const Eigen::Matrix<Scalar, 7, 1>& _a = a.Data();
    const Eigen::Matrix<Scalar, 7, 1>& _b = b.Data();

    // Intermediate terms (55)
    const Scalar _tmp0 = _a[0]*_b[3] + _a[1]*_b[2] - _a[2]*_b[1] + _a[3]*_b[0];
    const Scalar _tmp1 = (1.0/2.0)*_a[2];
    const Scalar _tmp2 = _tmp0*_tmp1;
    const Scalar _tmp3 = _a[0]*_b[1] - _a[1]*_b[0] + _a[2]*_b[3] + _a[3]*_b[2];
    const Scalar _tmp4 = (1.0/2.0)*_tmp3;
    const Scalar _tmp5 = _a[0]*_tmp4;
    const Scalar _tmp6 = -_a[0]*_b[2] + _a[1]*_b[3] + _a[2]*_b[0] + _a[3]*_b[1];
    const Scalar _tmp7 = (1.0/2.0)*_tmp6;
    const Scalar _tmp8 = _a[3]*_tmp7;
    const Scalar _tmp9 = -_a[0]*_b[0] - _a[1]*_b[1] - _a[2]*_b[2] + _a[3]*_b[3];
    const Scalar _tmp10 = (1.0/2.0)*_tmp9;
    const Scalar _tmp11 = _a[1]*_tmp10;
    const Scalar _tmp12 = _tmp11 + _tmp2 - _tmp5 - _tmp8;
    const Scalar _tmp13 = (1.0/2.0)*_b[1];
    const Scalar _tmp14 = -_tmp12*_tmp13;
    const Scalar _tmp15 = (1.0/2.0)*_tmp0;
    const Scalar _tmp16 = _a[1]*_tmp15;
    const Scalar _tmp17 = _a[0]*_tmp7;
    const Scalar _tmp18 = _a[3]*_tmp4;
    const Scalar _tmp19 = _tmp1*_tmp9;
    const Scalar _tmp20 = _tmp16 - _tmp17 + _tmp18 - _tmp19;
    const Scalar _tmp21 = (1.0/2.0)*_b[2];
    const Scalar _tmp22 = _a[3]*_tmp15;
    const Scalar _tmp23 = _tmp1*_tmp6;
    const Scalar _tmp24 = _a[1]*_tmp4;
    const Scalar _tmp25 = _a[0]*_tmp10;
    const Scalar _tmp26 = -_tmp22 - _tmp23 + _tmp24 + _tmp25;
    const Scalar _tmp27 = (1.0/2.0)*_b[0];
    const Scalar _tmp28 = (1.0/2.0)*_a[0]*_tmp15 + (1.0/2.0)*_a[1]*_tmp7 + (1.0/2.0)*_a[3]*_tmp10 + (1.0/2.0)*_tmp1*_tmp3;
    const Scalar _tmp29 = _b[3]*_tmp28;
    const Scalar _tmp30 = -_tmp26*_tmp27 + _tmp29;
    const Scalar _tmp31 = (1.0/2.0)*_tmp12;
    const Scalar _tmp32 = _b[0]*_tmp31;
    const Scalar _tmp33 = (1.0/2.0)*_b[3];
    const Scalar _tmp34 = _b[2]*_tmp28;
    const Scalar _tmp35 = _tmp21*_tmp26;
    const Scalar _tmp36 = _b[1]*_tmp28;
    const Scalar _tmp37 = _tmp22 + _tmp23 - _tmp24 - _tmp25;
    const Scalar _tmp38 = -_tmp16 + _tmp17 - _tmp18 + _tmp19;
    const Scalar _tmp39 = -_tmp21*_tmp38;
    const Scalar _tmp40 = _b[0]*_tmp28;
    const Scalar _tmp41 = _tmp13*_tmp38;
    const Scalar _tmp42 = -_tmp11 - _tmp2 + _tmp5 + _tmp8;
    const Scalar _tmp43 = (1.0/2.0)*_tmp42;
    const Scalar _tmp44 = -2*(_a[1] * _a[1]);
    const Scalar _tmp45 = -2*(_a[2] * _a[2]) + 1;
    const Scalar _tmp46 = 2*_a[0];
    const Scalar _tmp47 = _a[1]*_tmp46;
    const Scalar _tmp48 = 2*_a[2];
    const Scalar _tmp49 = _a[3]*_tmp48;
    const Scalar _tmp50 = _a[2]*_tmp46;
    const Scalar _tmp51 = 2*_a[1]*_a[3];
    const Scalar _tmp52 = -2*(_a[0] * _a[0]);
    const Scalar _tmp53 = _a[1]*_tmp48;
    const Scalar _tmp54 = _a[3]*_tmp46;

    // Output terms (1)
    Eigen::Matrix<Scalar, 6, 6> _res_D_b;

    _res_D_b(0, 0) = _tmp14 + _tmp20*_tmp21 + _tmp30;
    _res_D_b(0, 1) = -_tmp13*_tmp26 + _tmp20*_tmp33 + _tmp32 - _tmp34;
    _res_D_b(0, 2) = _b[3]*_tmp31 - _tmp20*_tmp27 - _tmp35 + _tmp36;
    _res_D_b(0, 3) = 0;
    _res_D_b(0, 4) = 0;
    _res_D_b(0, 5) = 0;
    _res_D_b(1, 0) = -_tmp13*_tmp37 - _tmp32 + _tmp33*_tmp38 + _tmp34;
    _res_D_b(1, 1) = _tmp14 + _tmp27*_tmp37 + _tmp29 + _tmp39;
    _res_D_b(1, 2) = -_b[2]*_tmp31 + _tmp33*_tmp37 - _tmp40 + _tmp41;
    _res_D_b(1, 3) = 0;
    _res_D_b(1, 4) = 0;
    _res_D_b(1, 5) = 0;
    _res_D_b(2, 0) = _b[3]*_tmp43 - _tmp27*_tmp38 + _tmp35 - _tmp36;
    _res_D_b(2, 1) = -_b[2]*_tmp43 + _tmp26*_tmp33 + _tmp40 - _tmp41;
    _res_D_b(2, 2) = _tmp13*_tmp42 + _tmp30 + _tmp39;
    _res_D_b(2, 3) = 0;
    _res_D_b(2, 4) = 0;
    _res_D_b(2, 5) = 0;
    _res_D_b(3, 0) = 0;
    _res_D_b(3, 1) = 0;
    _res_D_b(3, 2) = 0;
    _res_D_b(3, 3) = _tmp44 + _tmp45;
    _res_D_b(3, 4) = _tmp47 - _tmp49;
    _res_D_b(3, 5) = _tmp50 + _tmp51;
    _res_D_b(4, 0) = 0;
    _res_D_b(4, 1) = 0;
    _res_D_b(4, 2) = 0;
    _res_D_b(4, 3) = _tmp47 + _tmp49;
    _res_D_b(4, 4) = _tmp45 + _tmp52;
    _res_D_b(4, 5) = _tmp53 - _tmp54;
    _res_D_b(5, 0) = 0;
    _res_D_b(5, 1) = 0;
    _res_D_b(5, 2) = 0;
    _res_D_b(5, 3) = _tmp50 - _tmp51;
    _res_D_b(5, 4) = _tmp53 + _tmp54;
    _res_D_b(5, 5) = _tmp44 + _tmp52 + 1;


    return _res_D_b;
}

}  // namespace sym
