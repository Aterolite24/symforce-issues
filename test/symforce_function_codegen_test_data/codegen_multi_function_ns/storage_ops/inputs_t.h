// ----------------------------------------------------------------------------
// This file was autogenerated by symforce. Do NOT modify by hand.
// ----------------------------------------------------------------------------
#pragma once

#include <cassert>
#include <vector>

namespace codegen_multi_function_ns {
namespace StorageOps {

template<>
inline size_t StorageDim<inputs_t>() {
  return 9;
};

template<>
inline void ToStorage<inputs_t>(const inputs_t& value, std::vector<double>* vec) {
  assert(vec != nullptr);
  std::vector<double>& v = (*vec);
  v.resize(9);

  v[0] = value.x;
  v[1] = value.y;
  v[2] = value.rot[0];
  v[3] = value.rot[1];
  v[4] = value.rot[2];
  v[5] = value.rot[3];
  v[6] = value.constants.epsilon;
  v[7] = value.states.p[0];
  v[8] = value.states.p[1];
}

template<typename Container>
void FromStorage(const Container& elements, inputs_t* out) {
  assert(out != nullptr);
  out->x = elements[0];
  out->y = elements[1];
  out->rot[0] = elements[2];
  out->rot[1] = elements[3];
  out->rot[2] = elements[4];
  out->rot[3] = elements[5];
  out->constants.epsilon = elements[6];
  out->states.p[0] = elements[7];
  out->states.p[1] = elements[8];
}

}  // namespace StorageOps
}  // namespace codegen_multi_function_ns
