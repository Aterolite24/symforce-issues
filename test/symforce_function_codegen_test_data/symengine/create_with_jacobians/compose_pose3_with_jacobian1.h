// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     cpp_templates/function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>
#include <sym/pose3.h>

namespace sym {

/**
 * Composition of two elements in the group.
 *
 * Returns:
 *     Element: a @ b
 *     res_D_b: (6x6) jacobian of res (6) wrt arg b (6)
 */
template <typename Scalar>
sym::Pose3<Scalar> ComposePose3WithJacobian1(const sym::Pose3<Scalar>& a,
                                             const sym::Pose3<Scalar>& b,
                                             Eigen::Matrix<Scalar, 6, 6>* const res_D_b = nullptr) {
  // Total ops: 204

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _a = a.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _b = b.Data();

  // Intermediate terms (63)
  const Scalar _tmp0 = _a[0] * _b[3] + _a[1] * _b[2] - _a[2] * _b[1] + _a[3] * _b[0];
  const Scalar _tmp1 = -_a[0] * _b[2] + _a[1] * _b[3] + _a[2] * _b[0] + _a[3] * _b[1];
  const Scalar _tmp2 = _a[0] * _b[1] - _a[1] * _b[0] + _a[2] * _b[3] + _a[3] * _b[2];
  const Scalar _tmp3 = -_a[0] * _b[0] - _a[1] * _b[1] - _a[2] * _b[2] + _a[3] * _b[3];
  const Scalar _tmp4 = -2 * std::pow(_a[1], Scalar(2));
  const Scalar _tmp5 = 1 - 2 * std::pow(_a[2], Scalar(2));
  const Scalar _tmp6 = _tmp4 + _tmp5;
  const Scalar _tmp7 = 2 * _a[0];
  const Scalar _tmp8 = _a[1] * _tmp7;
  const Scalar _tmp9 = 2 * _a[2];
  const Scalar _tmp10 = _a[3] * _tmp9;
  const Scalar _tmp11 = -_tmp10 + _tmp8;
  const Scalar _tmp12 = 2 * _a[1];
  const Scalar _tmp13 = _a[3] * _tmp12;
  const Scalar _tmp14 = _a[2] * _tmp7;
  const Scalar _tmp15 = _tmp13 + _tmp14;
  const Scalar _tmp16 = -2 * std::pow(_a[0], Scalar(2));
  const Scalar _tmp17 = _tmp16 + _tmp5;
  const Scalar _tmp18 = _tmp10 + _tmp8;
  const Scalar _tmp19 = _a[3] * _tmp7;
  const Scalar _tmp20 = _a[2] * _tmp12;
  const Scalar _tmp21 = -_tmp19 + _tmp20;
  const Scalar _tmp22 = _tmp16 + _tmp4 + 1;
  const Scalar _tmp23 = _tmp19 + _tmp20;
  const Scalar _tmp24 = -_tmp13 + _tmp14;
  const Scalar _tmp25 = 2 * _tmp2;
  const Scalar _tmp26 = _a[2] * _tmp25 + 2 * _a[3] * _tmp3 + _tmp0 * _tmp7 + _tmp1 * _tmp12;
  const Scalar _tmp27 = (Scalar(1) / Scalar(2)) * _b[3];
  const Scalar _tmp28 = _tmp26 * _tmp27;
  const Scalar _tmp29 = _tmp2 * _tmp7;
  const Scalar _tmp30 = 2 * _tmp1;
  const Scalar _tmp31 = _a[3] * _tmp30;
  const Scalar _tmp32 = 2 * _tmp0;
  const Scalar _tmp33 = _a[2] * _tmp32;
  const Scalar _tmp34 = _tmp12 * _tmp3;
  const Scalar _tmp35 = -_tmp29 - _tmp31 + _tmp33 + _tmp34;
  const Scalar _tmp36 = (Scalar(1) / Scalar(2)) * _b[1];
  const Scalar _tmp37 = -_tmp35 * _tmp36;
  const Scalar _tmp38 = _tmp12 * _tmp2;
  const Scalar _tmp39 = _a[2] * _tmp30;
  const Scalar _tmp40 = _a[3] * _tmp32;
  const Scalar _tmp41 = _tmp3 * _tmp7;
  const Scalar _tmp42 = _tmp38 - _tmp39 - _tmp40 + _tmp41;
  const Scalar _tmp43 = (Scalar(1) / Scalar(2)) * _b[0];
  const Scalar _tmp44 = -_tmp42 * _tmp43;
  const Scalar _tmp45 = _a[3] * _tmp25;
  const Scalar _tmp46 = _tmp1 * _tmp7;
  const Scalar _tmp47 = _tmp0 * _tmp12;
  const Scalar _tmp48 = _tmp3 * _tmp9;
  const Scalar _tmp49 = _tmp45 - _tmp46 + _tmp47 - _tmp48;
  const Scalar _tmp50 = (Scalar(1) / Scalar(2)) * _b[2];
  const Scalar _tmp51 = _tmp26 * _tmp50;
  const Scalar _tmp52 = _tmp35 * _tmp43;
  const Scalar _tmp53 = (Scalar(1) / Scalar(2)) * _tmp42;
  const Scalar _tmp54 = _tmp26 * _tmp36;
  const Scalar _tmp55 = _tmp42 * _tmp50;
  const Scalar _tmp56 = -_tmp38 + _tmp39 + _tmp40 - _tmp41;
  const Scalar _tmp57 = (Scalar(1) / Scalar(2)) * _tmp56;
  const Scalar _tmp58 = -_tmp45 + _tmp46 - _tmp47 + _tmp48;
  const Scalar _tmp59 = _tmp28 - _tmp50 * _tmp58;
  const Scalar _tmp60 = _tmp26 * _tmp43;
  const Scalar _tmp61 = _tmp36 * _tmp58;
  const Scalar _tmp62 = _tmp29 + _tmp31 - _tmp33 - _tmp34;

  // Output terms (2)
  Eigen::Matrix<Scalar, 7, 1> _res;

  _res[0] = _tmp0;
  _res[1] = _tmp1;
  _res[2] = _tmp2;
  _res[3] = _tmp3;
  _res[4] = _a[4] + _b[4] * _tmp6 + _b[5] * _tmp11 + _b[6] * _tmp15;
  _res[5] = _a[5] + _b[4] * _tmp18 + _b[5] * _tmp17 + _b[6] * _tmp21;
  _res[6] = _a[6] + _b[4] * _tmp24 + _b[5] * _tmp23 + _b[6] * _tmp22;

  if (res_D_b != nullptr) {
    Eigen::Matrix<Scalar, 6, 6>& _res_D_b = (*res_D_b);

    _res_D_b(0, 0) = _tmp28 + _tmp37 + _tmp44 + _tmp49 * _tmp50;
    _res_D_b(0, 1) = -_b[1] * _tmp53 + _tmp27 * _tmp49 - _tmp51 + _tmp52;
    _res_D_b(0, 2) = _tmp27 * _tmp35 - _tmp43 * _tmp49 + _tmp54 - _tmp55;
    _res_D_b(0, 3) = 0;
    _res_D_b(0, 4) = 0;
    _res_D_b(0, 5) = 0;
    _res_D_b(1, 0) = -_b[1] * _tmp57 + _tmp27 * _tmp58 + _tmp51 - _tmp52;
    _res_D_b(1, 1) = _tmp37 + _tmp43 * _tmp56 + _tmp59;
    _res_D_b(1, 2) = _b[3] * _tmp57 - _tmp35 * _tmp50 - _tmp60 + _tmp61;
    _res_D_b(1, 3) = 0;
    _res_D_b(1, 4) = 0;
    _res_D_b(1, 5) = 0;
    _res_D_b(2, 0) = _tmp27 * _tmp62 - _tmp43 * _tmp58 - _tmp54 + _tmp55;
    _res_D_b(2, 1) = _b[3] * _tmp53 - _tmp50 * _tmp62 + _tmp60 - _tmp61;
    _res_D_b(2, 2) = _tmp36 * _tmp62 + _tmp44 + _tmp59;
    _res_D_b(2, 3) = 0;
    _res_D_b(2, 4) = 0;
    _res_D_b(2, 5) = 0;
    _res_D_b(3, 0) = 0;
    _res_D_b(3, 1) = 0;
    _res_D_b(3, 2) = 0;
    _res_D_b(3, 3) = _tmp6;
    _res_D_b(3, 4) = _tmp11;
    _res_D_b(3, 5) = _tmp15;
    _res_D_b(4, 0) = 0;
    _res_D_b(4, 1) = 0;
    _res_D_b(4, 2) = 0;
    _res_D_b(4, 3) = _tmp18;
    _res_D_b(4, 4) = _tmp17;
    _res_D_b(4, 5) = _tmp21;
    _res_D_b(5, 0) = 0;
    _res_D_b(5, 1) = 0;
    _res_D_b(5, 2) = 0;
    _res_D_b(5, 3) = _tmp24;
    _res_D_b(5, 4) = _tmp23;
    _res_D_b(5, 5) = _tmp22;
  }

  return sym::Pose3<Scalar>(_res);
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
