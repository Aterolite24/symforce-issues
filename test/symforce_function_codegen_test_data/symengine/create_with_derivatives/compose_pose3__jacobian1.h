// -----------------------------------------------------------------------------
// This file was autogenerated by symforce. Do NOT modify by hand.
// -----------------------------------------------------------------------------
#pragma once

#include <Eigen/Dense>
#include <sym/pose3.h>

namespace sym {

/**
 * Composition of two elements in the group.
 *
 * Returns:
 *     res_D_b: (6x6) jacobian of res (6) wrt arg b (6)
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 6, 6> ComposePose3_Jacobian1(const sym::Pose3<Scalar>& a,
                                                   const sym::Pose3<Scalar>& b) {
  // Total ops: 186

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _a = a.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _b = b.Data();

  // Intermediate terms (52)
  const Scalar _tmp0 = _a[0] * _b[1] - _a[1] * _b[0] + _a[2] * _b[3] + _a[3] * _b[2];
  const Scalar _tmp1 = 2 * _tmp0;
  const Scalar _tmp2 = -_a[0] * _b[2] + _a[1] * _b[3] + _a[2] * _b[0] + _a[3] * _b[1];
  const Scalar _tmp3 = 2 * _tmp2;
  const Scalar _tmp4 = _a[0] * _b[3] + _a[1] * _b[2] - _a[2] * _b[1] + _a[3] * _b[0];
  const Scalar _tmp5 = 2 * _tmp4;
  const Scalar _tmp6 = -_a[0] * _b[0] - _a[1] * _b[1] - _a[2] * _b[2] + _a[3] * _b[3];
  const Scalar _tmp7 = 2 * _a[3];
  const Scalar _tmp8 = _a[0] * _tmp5 + _a[1] * _tmp3 + _a[2] * _tmp1 + _tmp6 * _tmp7;
  const Scalar _tmp9 = (1.0 / 2.0) * _b[3];
  const Scalar _tmp10 = _tmp8 * _tmp9;
  const Scalar _tmp11 = _a[0] * _tmp1;
  const Scalar _tmp12 = _tmp2 * _tmp7;
  const Scalar _tmp13 = _a[2] * _tmp5;
  const Scalar _tmp14 = 2 * _a[1];
  const Scalar _tmp15 = _tmp14 * _tmp6;
  const Scalar _tmp16 = -_tmp11 - _tmp12 + _tmp13 + _tmp15;
  const Scalar _tmp17 = (1.0 / 2.0) * _b[1];
  const Scalar _tmp18 = -_tmp16 * _tmp17;
  const Scalar _tmp19 = _a[1] * _tmp1;
  const Scalar _tmp20 = _a[2] * _tmp3;
  const Scalar _tmp21 = _tmp4 * _tmp7;
  const Scalar _tmp22 = 2 * _a[0];
  const Scalar _tmp23 = _tmp22 * _tmp6;
  const Scalar _tmp24 = _tmp19 - _tmp20 - _tmp21 + _tmp23;
  const Scalar _tmp25 = (1.0 / 2.0) * _b[0];
  const Scalar _tmp26 = -_tmp24 * _tmp25;
  const Scalar _tmp27 = _tmp0 * _tmp7;
  const Scalar _tmp28 = _a[0] * _tmp3;
  const Scalar _tmp29 = _a[1] * _tmp5;
  const Scalar _tmp30 = 2 * _a[2] * _tmp6;
  const Scalar _tmp31 =
      (1.0 / 2.0) * _tmp27 - 1.0 / 2.0 * _tmp28 + (1.0 / 2.0) * _tmp29 - 1.0 / 2.0 * _tmp30;
  const Scalar _tmp32 = (1.0 / 2.0) * _b[2];
  const Scalar _tmp33 = _tmp32 * _tmp8;
  const Scalar _tmp34 = _tmp16 * _tmp25;
  const Scalar _tmp35 = _tmp17 * _tmp8;
  const Scalar _tmp36 = _tmp24 * _tmp32;
  const Scalar _tmp37 = -_tmp19 + _tmp20 + _tmp21 - _tmp23;
  const Scalar _tmp38 =
      -1.0 / 2.0 * _tmp27 + (1.0 / 2.0) * _tmp28 - 1.0 / 2.0 * _tmp29 + (1.0 / 2.0) * _tmp30;
  const Scalar _tmp39 = -_b[2] * _tmp38 + _tmp10;
  const Scalar _tmp40 = _tmp25 * _tmp8;
  const Scalar _tmp41 = _b[1] * _tmp38;
  const Scalar _tmp42 = _tmp11 + _tmp12 - _tmp13 - _tmp15;
  const Scalar _tmp43 = -2 * std::pow<Scalar>(_a[1], 2);
  const Scalar _tmp44 = 1 - 2 * std::pow<Scalar>(_a[2], 2);
  const Scalar _tmp45 = _a[1] * _tmp22;
  const Scalar _tmp46 = _a[2] * _tmp7;
  const Scalar _tmp47 = _a[1] * _tmp7;
  const Scalar _tmp48 = _a[2] * _tmp22;
  const Scalar _tmp49 = -2 * std::pow<Scalar>(_a[0], 2);
  const Scalar _tmp50 = _a[0] * _tmp7;
  const Scalar _tmp51 = _a[2] * _tmp14;

  // Output terms (1)
  Eigen::Matrix<Scalar, 6, 6> _res_D_b;

  _res_D_b(0, 0) = _b[2] * _tmp31 + _tmp10 + _tmp18 + _tmp26;
  _res_D_b(0, 1) = _b[3] * _tmp31 - _tmp17 * _tmp24 - _tmp33 + _tmp34;
  _res_D_b(0, 2) = -_b[0] * _tmp31 + _tmp16 * _tmp9 + _tmp35 - _tmp36;
  _res_D_b(0, 3) = 0;
  _res_D_b(0, 4) = 0;
  _res_D_b(0, 5) = 0;
  _res_D_b(1, 0) = _b[3] * _tmp38 - _tmp17 * _tmp37 + _tmp33 - _tmp34;
  _res_D_b(1, 1) = _tmp18 + _tmp25 * _tmp37 + _tmp39;
  _res_D_b(1, 2) = -_tmp16 * _tmp32 + _tmp37 * _tmp9 - _tmp40 + _tmp41;
  _res_D_b(1, 3) = 0;
  _res_D_b(1, 4) = 0;
  _res_D_b(1, 5) = 0;
  _res_D_b(2, 0) = -_b[0] * _tmp38 - _tmp35 + _tmp36 + _tmp42 * _tmp9;
  _res_D_b(2, 1) = _tmp24 * _tmp9 - _tmp32 * _tmp42 + _tmp40 - _tmp41;
  _res_D_b(2, 2) = _tmp17 * _tmp42 + _tmp26 + _tmp39;
  _res_D_b(2, 3) = 0;
  _res_D_b(2, 4) = 0;
  _res_D_b(2, 5) = 0;
  _res_D_b(3, 0) = 0;
  _res_D_b(3, 1) = 0;
  _res_D_b(3, 2) = 0;
  _res_D_b(3, 3) = _tmp43 + _tmp44;
  _res_D_b(3, 4) = _tmp45 - _tmp46;
  _res_D_b(3, 5) = _tmp47 + _tmp48;
  _res_D_b(4, 0) = 0;
  _res_D_b(4, 1) = 0;
  _res_D_b(4, 2) = 0;
  _res_D_b(4, 3) = _tmp45 + _tmp46;
  _res_D_b(4, 4) = _tmp44 + _tmp49;
  _res_D_b(4, 5) = -_tmp50 + _tmp51;
  _res_D_b(5, 0) = 0;
  _res_D_b(5, 1) = 0;
  _res_D_b(5, 2) = 0;
  _res_D_b(5, 3) = -_tmp47 + _tmp48;
  _res_D_b(5, 4) = _tmp50 + _tmp51;
  _res_D_b(5, 5) = _tmp43 + _tmp49 + 1;

  return _res_D_b;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
