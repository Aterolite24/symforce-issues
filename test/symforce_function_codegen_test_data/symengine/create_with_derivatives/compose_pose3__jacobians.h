// -----------------------------------------------------------------------------
// This file was autogenerated by symforce. Do NOT modify by hand.
// -----------------------------------------------------------------------------
#pragma once

#include <Eigen/Dense>
#include <sym/pose3.h>

namespace sym {

/**
 * Composition of two elements in the group.
 *
 * Returns:
 *     geo.Matrix: Jacobian for arg 0 (a)
 *     geo.Matrix: Jacobian for arg 1 (b)
 */
template <typename Scalar>
void ComposePose3_Jacobians(const sym::Pose3<Scalar>& a, const sym::Pose3<Scalar>& b,
                            Eigen::Matrix<Scalar, 6, 6>* const res_D_a = nullptr,
                            Eigen::Matrix<Scalar, 6, 6>* const res_D_b = nullptr) {
  // Total ops: 466

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _a = a.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _b = b.Data();

  // Intermediate terms (122)
  const Scalar _tmp0 =
      2 * _a[0] * _b[3] + 2 * _a[1] * _b[2] - 2 * _a[2] * _b[1] + 2 * _a[3] * _b[0];
  const Scalar _tmp1 = _b[3] * _tmp0;
  const Scalar _tmp2 = -_tmp1;
  const Scalar _tmp3 = -_a[0] * _b[2] + _a[1] * _b[3] + _a[2] * _b[0] + _a[3] * _b[1];
  const Scalar _tmp4 = 2 * _tmp3;
  const Scalar _tmp5 = _b[2] * _tmp4;
  const Scalar _tmp6 = _a[0] * _b[1] - _a[1] * _b[0] + _a[2] * _b[3] + _a[3] * _b[2];
  const Scalar _tmp7 = 2 * _tmp6;
  const Scalar _tmp8 = _b[1] * _tmp7;
  const Scalar _tmp9 =
      -2 * _a[0] * _b[0] - 2 * _a[1] * _b[1] - 2 * _a[2] * _b[2] + 2 * _a[3] * _b[3];
  const Scalar _tmp10 = _b[0] * _tmp9;
  const Scalar _tmp11 = _tmp10 + _tmp8;
  const Scalar _tmp12 = _tmp11 + _tmp2 - _tmp5;
  const Scalar _tmp13 = (1.0 / 2.0) * _a[0];
  const Scalar _tmp14 = _b[3] * _tmp7;
  const Scalar _tmp15 = _b[2] * _tmp9;
  const Scalar _tmp16 = _b[0] * _tmp4;
  const Scalar _tmp17 = _b[1] * _tmp0;
  const Scalar _tmp18 = _tmp16 + _tmp17;
  const Scalar _tmp19 = _tmp14 + _tmp15 + _tmp18;
  const Scalar _tmp20 = (1.0 / 2.0) * _a[2];
  const Scalar _tmp21 = _b[0] * _tmp7;
  const Scalar _tmp22 = _b[1] * _tmp9;
  const Scalar _tmp23 = _b[2] * _tmp0;
  const Scalar _tmp24 = _b[3] * _tmp4;
  const Scalar _tmp25 = _tmp23 - _tmp24;
  const Scalar _tmp26 = _tmp21 - _tmp22 + _tmp25;
  const Scalar _tmp27 = (1.0 / 2.0) * _a[1];
  const Scalar _tmp28 = _b[0] * _tmp0;
  const Scalar _tmp29 = _b[1] * _tmp4;
  const Scalar _tmp30 = -_tmp29;
  const Scalar _tmp31 = _b[3] * _tmp9;
  const Scalar _tmp32 = _b[2] * _tmp7;
  const Scalar _tmp33 = _tmp31 - _tmp32;
  const Scalar _tmp34 = _tmp28 + _tmp30 + _tmp33;
  const Scalar _tmp35 = (1.0 / 2.0) * _a[3];
  const Scalar _tmp36 = -_tmp21 + _tmp22 + _tmp25;
  const Scalar _tmp37 = _tmp1 + _tmp11 + _tmp5;
  const Scalar _tmp38 = -_tmp28;
  const Scalar _tmp39 = _tmp29 + _tmp33 + _tmp38;
  const Scalar _tmp40 = -_tmp14;
  const Scalar _tmp41 = -_tmp15 + _tmp18 + _tmp40;
  const Scalar _tmp42 = _tmp15 + _tmp16 - _tmp17 + _tmp40;
  const Scalar _tmp43 = _tmp30 + _tmp31 + _tmp32 + _tmp38;
  const Scalar _tmp44 = -_tmp10 + _tmp2 + _tmp5 + _tmp8;
  const Scalar _tmp45 = _tmp21 + _tmp22 + _tmp23 + _tmp24;
  const Scalar _tmp46 = 2 * _a[2];
  const Scalar _tmp47 = _b[5] * _tmp46;
  const Scalar _tmp48 = 2 * _a[1];
  const Scalar _tmp49 = _b[6] * _tmp48;
  const Scalar _tmp50 = -_tmp47 + _tmp49;
  const Scalar _tmp51 = 2 * _a[3];
  const Scalar _tmp52 = _b[5] * _tmp51;
  const Scalar _tmp53 = _a[0] * _b[6];
  const Scalar _tmp54 = 2 * _tmp53;
  const Scalar _tmp55 = -4 * _a[2] * _b[4] - _tmp52 + _tmp54;
  const Scalar _tmp56 = 4 * _a[1];
  const Scalar _tmp57 = 2 * _a[0];
  const Scalar _tmp58 = _b[5] * _tmp57;
  const Scalar _tmp59 = _b[6] * _tmp51;
  const Scalar _tmp60 = -_b[4] * _tmp56 + _tmp58 + _tmp59;
  const Scalar _tmp61 = _b[5] * _tmp48;
  const Scalar _tmp62 = _b[6] * _tmp46;
  const Scalar _tmp63 = _tmp61 + _tmp62;
  const Scalar _tmp64 = _b[4] * _tmp57;
  const Scalar _tmp65 = _tmp62 + _tmp64;
  const Scalar _tmp66 = _b[4] * _tmp46;
  const Scalar _tmp67 = -_tmp54 + _tmp66;
  const Scalar _tmp68 = _b[4] * _tmp51;
  const Scalar _tmp69 = 4 * _b[5];
  const Scalar _tmp70 = -_a[2] * _tmp69 + _tmp49 + _tmp68;
  const Scalar _tmp71 = _b[4] * _tmp48;
  const Scalar _tmp72 = -_a[0] * _tmp69 - _tmp59 + _tmp71;
  const Scalar _tmp73 = _tmp58 - _tmp71;
  const Scalar _tmp74 = (1.0 / 2.0) * _tmp73;
  const Scalar _tmp75 = _tmp61 + _tmp64;
  const Scalar _tmp76 = -_b[6] * _tmp56 + _tmp47 - _tmp68;
  const Scalar _tmp77 = _tmp52 - 4 * _tmp53 + _tmp66;
  const Scalar _tmp78 = _a[2] * _tmp0;
  const Scalar _tmp79 = _tmp3 * _tmp51;
  const Scalar _tmp80 = _a[1] * _tmp9;
  const Scalar _tmp81 = _a[0] * _tmp7;
  const Scalar _tmp82 = _tmp78 - _tmp79 + _tmp80 - _tmp81;
  const Scalar _tmp83 = (1.0 / 2.0) * _b[1];
  const Scalar _tmp84 = -_tmp82 * _tmp83;
  const Scalar _tmp85 = _a[1] * _tmp0;
  const Scalar _tmp86 = _a[0] * _tmp4;
  const Scalar _tmp87 = _tmp51 * _tmp6;
  const Scalar _tmp88 = _a[2] * _tmp9;
  const Scalar _tmp89 = _tmp85 - _tmp86 + _tmp87 - _tmp88;
  const Scalar _tmp90 = (1.0 / 2.0) * _b[2];
  const Scalar _tmp91 = _a[3] * _tmp0;
  const Scalar _tmp92 = _a[2] * _tmp4;
  const Scalar _tmp93 = _a[1] * _tmp7;
  const Scalar _tmp94 = _a[0] * _tmp9;
  const Scalar _tmp95 =
      -1.0 / 2.0 * _tmp91 - 1.0 / 2.0 * _tmp92 + (1.0 / 2.0) * _tmp93 + (1.0 / 2.0) * _tmp94;
  const Scalar _tmp96 = _a[0] * _tmp0 + _a[1] * _tmp4 + _a[2] * _tmp7 + _a[3] * _tmp9;
  const Scalar _tmp97 = (1.0 / 2.0) * _b[3];
  const Scalar _tmp98 = _tmp96 * _tmp97;
  const Scalar _tmp99 = -_b[0] * _tmp95 + _tmp98;
  const Scalar _tmp100 = (1.0 / 2.0) * _b[0];
  const Scalar _tmp101 = _tmp100 * _tmp82;
  const Scalar _tmp102 = (1.0 / 2.0) * _tmp89;
  const Scalar _tmp103 = _tmp90 * _tmp96;
  const Scalar _tmp104 = _b[2] * _tmp95;
  const Scalar _tmp105 = _tmp83 * _tmp96;
  const Scalar _tmp106 =
      (1.0 / 2.0) * _tmp91 + (1.0 / 2.0) * _tmp92 - 1.0 / 2.0 * _tmp93 - 1.0 / 2.0 * _tmp94;
  const Scalar _tmp107 = -_tmp85 + _tmp86 - _tmp87 + _tmp88;
  const Scalar _tmp108 = (1.0 / 2.0) * _tmp107;
  const Scalar _tmp109 = -_tmp107 * _tmp90;
  const Scalar _tmp110 = _tmp100 * _tmp96;
  const Scalar _tmp111 = _b[1] * _tmp108;
  const Scalar _tmp112 = -_tmp78 + _tmp79 - _tmp80 + _tmp81;
  const Scalar _tmp113 = -2 * (_a[1] * _a[1]);
  const Scalar _tmp114 = 1 - 2 * (_a[2] * _a[2]);
  const Scalar _tmp115 = _a[1] * _tmp57;
  const Scalar _tmp116 = _a[2] * _tmp51;
  const Scalar _tmp117 = _a[0] * _tmp46;
  const Scalar _tmp118 = _a[1] * _tmp51;
  const Scalar _tmp119 = -2 * (_a[0] * _a[0]);
  const Scalar _tmp120 = _a[1] * _tmp46;
  const Scalar _tmp121 = _a[0] * _tmp51;

  // Output terms (2)
  if (res_D_a != nullptr) {
    Eigen::Matrix<Scalar, 6, 6>& _res_D_a = (*res_D_a);

    _res_D_a(0, 0) = -_tmp12 * _tmp13 + _tmp19 * _tmp20 - _tmp26 * _tmp27 + _tmp34 * _tmp35;
    _res_D_a(0, 1) = -_tmp12 * _tmp27 + _tmp13 * _tmp26 + _tmp19 * _tmp35 - _tmp20 * _tmp34;
    _res_D_a(0, 2) = -_tmp12 * _tmp20 - _tmp13 * _tmp19 + _tmp26 * _tmp35 + _tmp27 * _tmp34;
    _res_D_a(0, 3) = 0;
    _res_D_a(0, 4) = 0;
    _res_D_a(0, 5) = 0;
    _res_D_a(1, 0) = -_tmp13 * _tmp36 + _tmp20 * _tmp39 - _tmp27 * _tmp37 + _tmp35 * _tmp41;
    _res_D_a(1, 1) = _tmp13 * _tmp37 - _tmp20 * _tmp41 - _tmp27 * _tmp36 + _tmp35 * _tmp39;
    _res_D_a(1, 2) = -_tmp13 * _tmp39 - _tmp20 * _tmp36 + _tmp27 * _tmp41 + _tmp35 * _tmp37;
    _res_D_a(1, 3) = 0;
    _res_D_a(1, 4) = 0;
    _res_D_a(1, 5) = 0;
    _res_D_a(2, 0) = -_tmp13 * _tmp42 + _tmp20 * _tmp44 - _tmp27 * _tmp43 + _tmp35 * _tmp45;
    _res_D_a(2, 1) = _tmp13 * _tmp43 - _tmp20 * _tmp45 - _tmp27 * _tmp42 + _tmp35 * _tmp44;
    _res_D_a(2, 2) = -_tmp13 * _tmp44 - _tmp20 * _tmp42 + _tmp27 * _tmp45 + _tmp35 * _tmp43;
    _res_D_a(2, 3) = 0;
    _res_D_a(2, 4) = 0;
    _res_D_a(2, 5) = 0;
    _res_D_a(3, 0) = -_tmp13 * _tmp50 + _tmp20 * _tmp60 - _tmp27 * _tmp55 + _tmp35 * _tmp63;
    _res_D_a(3, 1) = _tmp13 * _tmp55 - _tmp20 * _tmp63 - _tmp27 * _tmp50 + _tmp35 * _tmp60;
    _res_D_a(3, 2) = -_tmp13 * _tmp60 - _tmp20 * _tmp50 + _tmp27 * _tmp63 + _tmp35 * _tmp55;
    _res_D_a(3, 3) = 1;
    _res_D_a(3, 4) = 0;
    _res_D_a(3, 5) = 0;
    _res_D_a(4, 0) = -_tmp13 * _tmp67 + _tmp20 * _tmp65 - _tmp27 * _tmp70 + _tmp35 * _tmp72;
    _res_D_a(4, 1) = _tmp13 * _tmp70 - _tmp20 * _tmp72 - _tmp27 * _tmp67 + _tmp35 * _tmp65;
    _res_D_a(4, 2) = -_tmp13 * _tmp65 - _tmp20 * _tmp67 + _tmp27 * _tmp72 + _tmp35 * _tmp70;
    _res_D_a(4, 3) = 0;
    _res_D_a(4, 4) = 1;
    _res_D_a(4, 5) = 0;
    _res_D_a(5, 0) = -_a[0] * _tmp74 + _tmp20 * _tmp76 - _tmp27 * _tmp75 + _tmp35 * _tmp77;
    _res_D_a(5, 1) = _tmp13 * _tmp75 - _tmp20 * _tmp77 - _tmp27 * _tmp73 + _tmp35 * _tmp76;
    _res_D_a(5, 2) = -_a[2] * _tmp74 - _tmp13 * _tmp76 + _tmp27 * _tmp77 + _tmp35 * _tmp75;
    _res_D_a(5, 3) = 0;
    _res_D_a(5, 4) = 0;
    _res_D_a(5, 5) = 1;
  }

  if (res_D_b != nullptr) {
    Eigen::Matrix<Scalar, 6, 6>& _res_D_b = (*res_D_b);

    _res_D_b(0, 0) = _tmp84 + _tmp89 * _tmp90 + _tmp99;
    _res_D_b(0, 1) = -_b[1] * _tmp95 + _b[3] * _tmp102 + _tmp101 - _tmp103;
    _res_D_b(0, 2) = -_b[0] * _tmp102 - _tmp104 + _tmp105 + _tmp82 * _tmp97;
    _res_D_b(0, 3) = 0;
    _res_D_b(0, 4) = 0;
    _res_D_b(0, 5) = 0;
    _res_D_b(1, 0) = -_b[1] * _tmp106 + _b[3] * _tmp108 - _tmp101 + _tmp103;
    _res_D_b(1, 1) = _b[0] * _tmp106 + _tmp109 + _tmp84 + _tmp98;
    _res_D_b(1, 2) = _b[3] * _tmp106 - _tmp110 + _tmp111 - _tmp82 * _tmp90;
    _res_D_b(1, 3) = 0;
    _res_D_b(1, 4) = 0;
    _res_D_b(1, 5) = 0;
    _res_D_b(2, 0) = -_b[0] * _tmp108 + _tmp104 - _tmp105 + _tmp112 * _tmp97;
    _res_D_b(2, 1) = _b[3] * _tmp95 + _tmp110 - _tmp111 - _tmp112 * _tmp90;
    _res_D_b(2, 2) = _tmp109 + _tmp112 * _tmp83 + _tmp99;
    _res_D_b(2, 3) = 0;
    _res_D_b(2, 4) = 0;
    _res_D_b(2, 5) = 0;
    _res_D_b(3, 0) = 0;
    _res_D_b(3, 1) = 0;
    _res_D_b(3, 2) = 0;
    _res_D_b(3, 3) = _tmp113 + _tmp114;
    _res_D_b(3, 4) = _tmp115 - _tmp116;
    _res_D_b(3, 5) = _tmp117 + _tmp118;
    _res_D_b(4, 0) = 0;
    _res_D_b(4, 1) = 0;
    _res_D_b(4, 2) = 0;
    _res_D_b(4, 3) = _tmp115 + _tmp116;
    _res_D_b(4, 4) = _tmp114 + _tmp119;
    _res_D_b(4, 5) = _tmp120 - _tmp121;
    _res_D_b(5, 0) = 0;
    _res_D_b(5, 1) = 0;
    _res_D_b(5, 2) = 0;
    _res_D_b(5, 3) = _tmp117 - _tmp118;
    _res_D_b(5, 4) = _tmp120 + _tmp121;
    _res_D_b(5, 5) = _tmp113 + _tmp119 + 1;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
