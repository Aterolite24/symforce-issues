// -----------------------------------------------------------------------------
// This file was autogenerated by symforce. Do NOT modify by hand.
// -----------------------------------------------------------------------------
#pragma once

#include <Eigen/Dense>
#include <geo/pose3.h>

namespace sym {

/**
 * Composition of two elements in the group.
 *
 * Args:
 *     a (Element):
 *     b (Element):
 *
 * Returns:
 *     Element: a @ b
 *     geo.Matrix: Jacobian for arg 0 (a)
 */
template <typename Scalar>
sym::Pose3<Scalar> ComposePose3_ValueAndJacobian0(
    const sym::Pose3<Scalar>& a, const sym::Pose3<Scalar>& b,
    Eigen::Matrix<Scalar, 6, 6>* const res_D_a = nullptr) {
  // Total ops: 495

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _a = a.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _b = b.Data();

  // Intermediate terms (130)
  const Scalar _tmp0 = _a[0] * _b[3] + _a[1] * _b[2] - _a[2] * _b[1] + _a[3] * _b[0];
  const Scalar _tmp1 = -_a[0] * _b[2] + _a[1] * _b[3] + _a[2] * _b[0] + _a[3] * _b[1];
  const Scalar _tmp2 = _a[0] * _b[1] - _a[1] * _b[0] + _a[2] * _b[3] + _a[3] * _b[2];
  const Scalar _tmp3 = -_a[0] * _b[0] - _a[1] * _b[1] - _a[2] * _b[2] + _a[3] * _b[3];
  const Scalar _tmp4 = 2 * _a[1];
  const Scalar _tmp5 = _a[3] * _tmp4;
  const Scalar _tmp6 = 2 * _a[0];
  const Scalar _tmp7 = _a[2] * _tmp6;
  const Scalar _tmp8 = _tmp5 + _tmp7;
  const Scalar _tmp9 = 2 * _a[2];
  const Scalar _tmp10 = _a[3] * _tmp9;
  const Scalar _tmp11 = _a[1] * _tmp6;
  const Scalar _tmp12 = -_tmp10 + _tmp11;
  const Scalar _tmp13 = -2 * (_a[1] * _a[1]);
  const Scalar _tmp14 = 1 - 2 * (_a[2] * _a[2]);
  const Scalar _tmp15 = _tmp13 + _tmp14;
  const Scalar _tmp16 = _a[3] * _tmp6;
  const Scalar _tmp17 = _a[2] * _tmp4;
  const Scalar _tmp18 = -_tmp16 + _tmp17;
  const Scalar _tmp19 = -2 * (_a[0] * _a[0]);
  const Scalar _tmp20 = _tmp14 + _tmp19;
  const Scalar _tmp21 = _tmp10 + _tmp11;
  const Scalar _tmp22 = _tmp13 + _tmp19 + 1;
  const Scalar _tmp23 = _tmp16 + _tmp17;
  const Scalar _tmp24 = -_tmp5 + _tmp7;
  const Scalar _tmp25 = 2 * _tmp0;
  const Scalar _tmp26 = _b[3] * _tmp25;
  const Scalar _tmp27 = -_tmp26;
  const Scalar _tmp28 = 2 * _b[2];
  const Scalar _tmp29 = _tmp1 * _tmp28;
  const Scalar _tmp30 = 2 * _tmp2;
  const Scalar _tmp31 = _b[1] * _tmp30;
  const Scalar _tmp32 = 2 * _tmp3;
  const Scalar _tmp33 = _b[0] * _tmp32;
  const Scalar _tmp34 = _tmp27 - _tmp29 + _tmp31 + _tmp33;
  const Scalar _tmp35 = (1.0 / 2.0) * _a[0];
  const Scalar _tmp36 = _b[3] * _tmp30;
  const Scalar _tmp37 = _tmp28 * _tmp3;
  const Scalar _tmp38 = 2 * _tmp1;
  const Scalar _tmp39 = _b[0] * _tmp38;
  const Scalar _tmp40 = _b[1] * _tmp25;
  const Scalar _tmp41 = _tmp39 + _tmp40;
  const Scalar _tmp42 = _tmp36 + _tmp37 + _tmp41;
  const Scalar _tmp43 = (1.0 / 2.0) * _a[2];
  const Scalar _tmp44 = _b[0] * _tmp30;
  const Scalar _tmp45 = _b[1] * _tmp32;
  const Scalar _tmp46 = _tmp0 * _tmp28;
  const Scalar _tmp47 = _b[3] * _tmp38;
  const Scalar _tmp48 = _tmp46 - _tmp47;
  const Scalar _tmp49 = _tmp44 - _tmp45 + _tmp48;
  const Scalar _tmp50 = (1.0 / 2.0) * _a[1];
  const Scalar _tmp51 = _b[0] * _tmp25;
  const Scalar _tmp52 = _b[1] * _tmp38;
  const Scalar _tmp53 = -_tmp52;
  const Scalar _tmp54 = _b[3] * _tmp32;
  const Scalar _tmp55 = _tmp2 * _tmp28;
  const Scalar _tmp56 = _tmp54 - _tmp55;
  const Scalar _tmp57 = _tmp51 + _tmp53 + _tmp56;
  const Scalar _tmp58 = (1.0 / 2.0) * _a[3];
  const Scalar _tmp59 = -_tmp44 + _tmp45 + _tmp48;
  const Scalar _tmp60 = _tmp29 + _tmp31;
  const Scalar _tmp61 = _tmp26 + _tmp33 + _tmp60;
  const Scalar _tmp62 = -_tmp51;
  const Scalar _tmp63 = _tmp52 + _tmp56 + _tmp62;
  const Scalar _tmp64 = -_tmp36;
  const Scalar _tmp65 = -_tmp37 + _tmp41 + _tmp64;
  const Scalar _tmp66 = _tmp37 + _tmp39 - _tmp40 + _tmp64;
  const Scalar _tmp67 = _tmp53 + _tmp54 + _tmp55 + _tmp62;
  const Scalar _tmp68 = _tmp27 - _tmp33 + _tmp60;
  const Scalar _tmp69 = _tmp44 + _tmp45 + _tmp46 + _tmp47;
  const Scalar _tmp70 = _b[4] * _tmp6;
  const Scalar _tmp71 = _b[5] * _tmp4;
  const Scalar _tmp72 = _tmp70 + _tmp71;
  const Scalar _tmp73 = _tmp3 * _tmp38;
  const Scalar _tmp74 = _tmp0 * _tmp30;
  const Scalar _tmp75 = -_tmp73 + _tmp74;
  const Scalar _tmp76 = 2 * _a[3];
  const Scalar _tmp77 = _b[4] * _tmp76;
  const Scalar _tmp78 = _a[2] * _b[5];
  const Scalar _tmp79 = _a[1] * _b[6];
  const Scalar _tmp80 = 2 * _tmp79;
  const Scalar _tmp81 = _tmp77 - 4 * _tmp78 + _tmp80;
  const Scalar _tmp82 = _tmp3 * _tmp30;
  const Scalar _tmp83 = _tmp0 * _tmp38;
  const Scalar _tmp84 = _tmp82 + _tmp83;
  const Scalar _tmp85 = -2 * (_tmp2 * _tmp2);
  const Scalar _tmp86 = -2 * (_tmp1 * _tmp1);
  const Scalar _tmp87 = _tmp85 + _tmp86 + 1;
  const Scalar _tmp88 = 4 * _b[4];
  const Scalar _tmp89 = _b[5] * _tmp76;
  const Scalar _tmp90 = _b[6] * _tmp6;
  const Scalar _tmp91 = -_a[2] * _tmp88 - _tmp89 + _tmp90;
  const Scalar _tmp92 = _tmp72 * _tmp75 + _tmp81 * _tmp84 + _tmp87 * _tmp91;
  const Scalar _tmp93 = 2 * _tmp78;
  const Scalar _tmp94 = -_tmp77 - 4 * _tmp79 + _tmp93;
  const Scalar _tmp95 = _b[6] * _tmp9;
  const Scalar _tmp96 = _tmp70 + _tmp95;
  const Scalar _tmp97 = _b[5] * _tmp6;
  const Scalar _tmp98 = _b[6] * _tmp76;
  const Scalar _tmp99 = -_a[1] * _tmp88 + _tmp97 + _tmp98;
  const Scalar _tmp100 = _tmp75 * _tmp94 + _tmp84 * _tmp96 + _tmp87 * _tmp99;
  const Scalar _tmp101 = _b[4] * _tmp9;
  const Scalar _tmp102 = _tmp101 - _tmp90;
  const Scalar _tmp103 = _b[4] * _tmp4;
  const Scalar _tmp104 = -_tmp103 + _tmp97;
  const Scalar _tmp105 = _tmp80 - _tmp93;
  const Scalar _tmp106 = _tmp102 * _tmp84 + _tmp104 * _tmp75 + _tmp105 * _tmp87;
  const Scalar _tmp107 = (1.0 / 2.0) * _tmp106;
  const Scalar _tmp108 = 4 * _a[0];
  const Scalar _tmp109 = -_b[6] * _tmp108 + _tmp101 + _tmp89;
  const Scalar _tmp110 = -_b[5] * _tmp108 + _tmp103 - _tmp98;
  const Scalar _tmp111 = _tmp71 + _tmp95;
  const Scalar _tmp112 = (1.0 / 2.0) * _tmp109 * _tmp75 + (1.0 / 2.0) * _tmp110 * _tmp84 +
                         (1.0 / 2.0) * _tmp111 * _tmp87;
  const Scalar _tmp113 = _tmp25 * _tmp3;
  const Scalar _tmp114 = _tmp1 * _tmp30;
  const Scalar _tmp115 = _tmp113 + _tmp114;
  const Scalar _tmp116 = 1 - 2 * (_tmp0 * _tmp0);
  const Scalar _tmp117 = _tmp116 + _tmp85;
  const Scalar _tmp118 = -_tmp82 + _tmp83;
  const Scalar _tmp119 = _tmp102 * _tmp117 + _tmp104 * _tmp115 + _tmp105 * _tmp118;
  const Scalar _tmp120 = _tmp115 * _tmp72 + _tmp117 * _tmp81 + _tmp118 * _tmp91;
  const Scalar _tmp121 = (1.0 / 2.0) * _tmp115 * _tmp94 + (1.0 / 2.0) * _tmp117 * _tmp96 +
                         (1.0 / 2.0) * _tmp118 * _tmp99;
  const Scalar _tmp122 = _tmp109 * _tmp115 + _tmp110 * _tmp117 + _tmp111 * _tmp118;
  const Scalar _tmp123 = _tmp116 + _tmp86;
  const Scalar _tmp124 = -_tmp113 + _tmp114;
  const Scalar _tmp125 = _tmp73 + _tmp74;
  const Scalar _tmp126 = _tmp123 * _tmp72 + _tmp124 * _tmp81 + _tmp125 * _tmp91;
  const Scalar _tmp127 = _tmp102 * _tmp124 + _tmp104 * _tmp123 + _tmp105 * _tmp125;
  const Scalar _tmp128 = _tmp123 * _tmp94 + _tmp124 * _tmp96 + _tmp125 * _tmp99;
  const Scalar _tmp129 = _tmp109 * _tmp123 + _tmp110 * _tmp124 + _tmp111 * _tmp125;

  // Output terms (2)
  Eigen::Matrix<Scalar, 7, 1> _res;

  _res[0] = _tmp0;
  _res[1] = _tmp1;
  _res[2] = _tmp2;
  _res[3] = _tmp3;
  _res[4] = _a[4] + _b[4] * _tmp15 + _b[5] * _tmp12 + _b[6] * _tmp8;
  _res[5] = _a[5] + _b[4] * _tmp21 + _b[5] * _tmp20 + _b[6] * _tmp18;
  _res[6] = _a[6] + _b[4] * _tmp24 + _b[5] * _tmp23 + _b[6] * _tmp22;

  if (res_D_a != nullptr) {
    Eigen::Matrix<Scalar, 6, 6>& _res_D_a = (*res_D_a);

    _res_D_a(0, 0) = -_tmp34 * _tmp35 + _tmp42 * _tmp43 - _tmp49 * _tmp50 + _tmp57 * _tmp58;
    _res_D_a(0, 1) = -_tmp34 * _tmp50 + _tmp35 * _tmp49 + _tmp42 * _tmp58 - _tmp43 * _tmp57;
    _res_D_a(0, 2) = -_tmp34 * _tmp43 - _tmp35 * _tmp42 + _tmp49 * _tmp58 + _tmp50 * _tmp57;
    _res_D_a(0, 3) = 0;
    _res_D_a(0, 4) = 0;
    _res_D_a(0, 5) = 0;
    _res_D_a(1, 0) = -_tmp35 * _tmp59 + _tmp43 * _tmp63 - _tmp50 * _tmp61 + _tmp58 * _tmp65;
    _res_D_a(1, 1) = _tmp35 * _tmp61 - _tmp43 * _tmp65 - _tmp50 * _tmp59 + _tmp58 * _tmp63;
    _res_D_a(1, 2) = -_tmp35 * _tmp63 - _tmp43 * _tmp59 + _tmp50 * _tmp65 + _tmp58 * _tmp61;
    _res_D_a(1, 3) = 0;
    _res_D_a(1, 4) = 0;
    _res_D_a(1, 5) = 0;
    _res_D_a(2, 0) = -_tmp35 * _tmp66 + _tmp43 * _tmp68 - _tmp50 * _tmp67 + _tmp58 * _tmp69;
    _res_D_a(2, 1) = _tmp35 * _tmp67 - _tmp43 * _tmp69 - _tmp50 * _tmp66 + _tmp58 * _tmp68;
    _res_D_a(2, 2) = -_tmp35 * _tmp68 - _tmp43 * _tmp66 + _tmp50 * _tmp69 + _tmp58 * _tmp67;
    _res_D_a(2, 3) = 0;
    _res_D_a(2, 4) = 0;
    _res_D_a(2, 5) = 0;
    _res_D_a(3, 0) = -_a[0] * _tmp107 + _a[3] * _tmp112 + _tmp100 * _tmp43 - _tmp50 * _tmp92;
    _res_D_a(3, 1) = -_a[1] * _tmp107 - _a[2] * _tmp112 + _tmp100 * _tmp58 + _tmp35 * _tmp92;
    _res_D_a(3, 2) = _a[1] * _tmp112 - _tmp100 * _tmp35 - _tmp106 * _tmp43 + _tmp58 * _tmp92;
    _res_D_a(3, 3) = _tmp15 * _tmp87 + _tmp21 * _tmp84 + _tmp24 * _tmp75;
    _res_D_a(3, 4) = _tmp12 * _tmp87 + _tmp20 * _tmp84 + _tmp23 * _tmp75;
    _res_D_a(3, 5) = _tmp18 * _tmp84 + _tmp22 * _tmp75 + _tmp8 * _tmp87;
    _res_D_a(4, 0) = _a[2] * _tmp121 - _tmp119 * _tmp35 - _tmp120 * _tmp50 + _tmp122 * _tmp58;
    _res_D_a(4, 1) = _a[3] * _tmp121 - _tmp119 * _tmp50 + _tmp120 * _tmp35 - _tmp122 * _tmp43;
    _res_D_a(4, 2) = -_a[0] * _tmp121 - _tmp119 * _tmp43 + _tmp120 * _tmp58 + _tmp122 * _tmp50;
    _res_D_a(4, 3) = _tmp115 * _tmp24 + _tmp117 * _tmp21 + _tmp118 * _tmp15;
    _res_D_a(4, 4) = _tmp115 * _tmp23 + _tmp117 * _tmp20 + _tmp118 * _tmp12;
    _res_D_a(4, 5) = _tmp115 * _tmp22 + _tmp117 * _tmp18 + _tmp118 * _tmp8;
    _res_D_a(5, 0) = -_tmp126 * _tmp50 - _tmp127 * _tmp35 + _tmp128 * _tmp43 + _tmp129 * _tmp58;
    _res_D_a(5, 1) = _tmp126 * _tmp35 - _tmp127 * _tmp50 + _tmp128 * _tmp58 - _tmp129 * _tmp43;
    _res_D_a(5, 2) = _tmp126 * _tmp58 - _tmp127 * _tmp43 - _tmp128 * _tmp35 + _tmp129 * _tmp50;
    _res_D_a(5, 3) = _tmp123 * _tmp24 + _tmp124 * _tmp21 + _tmp125 * _tmp15;
    _res_D_a(5, 4) = _tmp12 * _tmp125 + _tmp123 * _tmp23 + _tmp124 * _tmp20;
    _res_D_a(5, 5) = _tmp123 * _tmp22 + _tmp124 * _tmp18 + _tmp125 * _tmp8;
  }

  return sym::Pose3<Scalar>(_res);
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
