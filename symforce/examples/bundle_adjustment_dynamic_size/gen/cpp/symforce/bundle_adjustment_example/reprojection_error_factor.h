// -----------------------------------------------------------------------------
// This file was autogenerated by symforce. Do NOT modify by hand.
// -----------------------------------------------------------------------------
#pragma once

#include <Eigen/Dense>
#include <sym/pose3.h>

namespace bundle_adjustment_example {

/**
 * Return the 2dof residual of reprojecting the landmark into the target
 * camera.
 *     jacobian: Jacobian for args 0 (source_pose), 2 (target_pose), 4 (source_inv_range)
 *     hessian: Hessian for args 0 (source_pose), 2 (target_pose), 4 (source_inv_range)
 *     rhs: rhs for args 0 (source_pose), 2 (target_pose), 4 (source_inv_range)
 */
template <typename Scalar>
void ReprojectionErrorFactor(const sym::Pose3<Scalar>& source_pose,
                             const Eigen::Matrix<Scalar, 4, 1>& source_calibration_storage,
                             const sym::Pose3<Scalar>& target_pose,
                             const Eigen::Matrix<Scalar, 4, 1>& target_calibration_storage,
                             const Scalar source_inv_range,
                             const Eigen::Matrix<Scalar, 2, 1>& source_coords,
                             const Eigen::Matrix<Scalar, 2, 1>& target_coords, const Scalar weight,
                             const Scalar epsilon, const Scalar gnc_mu, const Scalar gnc_scale,
                             Eigen::Matrix<Scalar, 2, 1>* const res = nullptr,
                             Eigen::Matrix<Scalar, 2, 13>* const jacobian = nullptr,
                             Eigen::Matrix<Scalar, 13, 13>* const hessian = nullptr,
                             Eigen::Matrix<Scalar, 13, 1>* const rhs = nullptr) {
  // Total ops: 1234

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _source_pose = source_pose.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _target_pose = target_pose.Data();

  // Intermediate terms (270)
  const Scalar _tmp0 = -2 * std::pow<Scalar>(_target_pose[1], 2);
  const Scalar _tmp1 = 1 - 2 * std::pow<Scalar>(_target_pose[2], 2);
  const Scalar _tmp2 = _tmp0 + _tmp1;
  const Scalar _tmp3 = -source_calibration_storage(3, 0) + source_coords(1, 0);
  const Scalar _tmp4 = -source_calibration_storage(2, 0) + source_coords(0, 0);
  const Scalar _tmp5 = std::pow<Scalar>(
      std::pow<Scalar>(_tmp3, 2) / std::pow<Scalar>(source_calibration_storage(1, 0), 2) +
          std::pow<Scalar>(_tmp4, 2) / std::pow<Scalar>(source_calibration_storage(0, 0), 2) + 1,
      -1.0 / 2.0);
  const Scalar _tmp6 = 2 * _source_pose[1] * _source_pose[3];
  const Scalar _tmp7 = 2 * _source_pose[2];
  const Scalar _tmp8 = _source_pose[0] * _tmp7;
  const Scalar _tmp9 = -2 * std::pow<Scalar>(_source_pose[1], 2);
  const Scalar _tmp10 = 1 - 2 * std::pow<Scalar>(_source_pose[2], 2);
  const Scalar _tmp11 = _tmp4 / source_calibration_storage(0, 0);
  const Scalar _tmp12 = _tmp11 * _tmp5;
  const Scalar _tmp13 = 2 * _source_pose[0];
  const Scalar _tmp14 = _source_pose[1] * _tmp13;
  const Scalar _tmp15 = _source_pose[3] * _tmp7;
  const Scalar _tmp16 = _tmp3 / source_calibration_storage(1, 0);
  const Scalar _tmp17 = _tmp16 * _tmp5;
  const Scalar _tmp18 =
      _tmp12 * (_tmp10 + _tmp9) + _tmp17 * (_tmp14 - _tmp15) + _tmp5 * (_tmp6 + _tmp8);
  const Scalar _tmp19 = 2 * _target_pose[0];
  const Scalar _tmp20 = _target_pose[2] * _tmp19;
  const Scalar _tmp21 = 2 * _target_pose[1];
  const Scalar _tmp22 = _target_pose[3] * _tmp21;
  const Scalar _tmp23 = _tmp20 - _tmp22;
  const Scalar _tmp24 = -2 * std::pow<Scalar>(_source_pose[0], 2);
  const Scalar _tmp25 = _source_pose[1] * _tmp7;
  const Scalar _tmp26 = _source_pose[3] * _tmp13;
  const Scalar _tmp27 =
      _tmp12 * (-_tmp6 + _tmp8) + _tmp17 * (_tmp25 + _tmp26) + _tmp5 * (_tmp24 + _tmp9 + 1);
  const Scalar _tmp28 = 2 * _target_pose[2];
  const Scalar _tmp29 = _target_pose[3] * _tmp28;
  const Scalar _tmp30 = _target_pose[1] * _tmp19;
  const Scalar _tmp31 = _tmp29 + _tmp30;
  const Scalar _tmp32 =
      _tmp12 * (_tmp14 + _tmp15) + _tmp17 * (_tmp10 + _tmp24) + _tmp5 * (_tmp25 - _tmp26);
  const Scalar _tmp33 = _source_pose[6] - _target_pose[6];
  const Scalar _tmp34 = _source_pose[5] - _target_pose[5];
  const Scalar _tmp35 = _source_pose[4] - _target_pose[4];
  const Scalar _tmp36 = _tmp2 * _tmp35 + _tmp23 * _tmp33 + _tmp31 * _tmp34;
  const Scalar _tmp37 =
      _tmp18 * _tmp2 + _tmp23 * _tmp27 + _tmp31 * _tmp32 + _tmp36 * source_inv_range;
  const Scalar _tmp38 = _tmp20 + _tmp22;
  const Scalar _tmp39 = -2 * std::pow<Scalar>(_target_pose[0], 2);
  const Scalar _tmp40 = _tmp0 + _tmp39 + 1;
  const Scalar _tmp41 = _target_pose[1] * _tmp28;
  const Scalar _tmp42 = _target_pose[3] * _tmp19;
  const Scalar _tmp43 = _tmp41 - _tmp42;
  const Scalar _tmp44 = _tmp33 * _tmp40 + _tmp34 * _tmp43 + _tmp35 * _tmp38;
  const Scalar _tmp45 =
      _tmp18 * _tmp38 + _tmp27 * _tmp40 + _tmp32 * _tmp43 + _tmp44 * source_inv_range;
  const Scalar _tmp46 = std::fabs(_tmp45);
  const Scalar _tmp47 = std::max<Scalar>(_tmp46, epsilon);
  const Scalar _tmp48 = 1.0 / (_tmp47);
  const Scalar _tmp49 = _tmp48 * target_calibration_storage(0, 0);
  const Scalar _tmp50 = _tmp37 * _tmp49 + target_calibration_storage(2, 0) - target_coords(0, 0);
  const Scalar _tmp51 = -_tmp29 + _tmp30;
  const Scalar _tmp52 = _tmp41 + _tmp42;
  const Scalar _tmp53 = _tmp1 + _tmp39;
  const Scalar _tmp54 = _tmp33 * _tmp52 + _tmp34 * _tmp53 + _tmp35 * _tmp51;
  const Scalar _tmp55 =
      _tmp18 * _tmp51 + _tmp27 * _tmp52 + _tmp32 * _tmp53 + _tmp54 * source_inv_range;
  const Scalar _tmp56 = _tmp48 * target_calibration_storage(1, 0);
  const Scalar _tmp57 = _tmp55 * _tmp56 + target_calibration_storage(3, 0) - target_coords(1, 0);
  const Scalar _tmp58 = std::pow<Scalar>(_tmp50, 2) + std::pow<Scalar>(_tmp57, 2) + epsilon;
  const Scalar _tmp59 = std::pow<Scalar>(_tmp58, -1.0 / 2.0);
  const Scalar _tmp60 = (((_tmp45) > 0) - ((_tmp45) < 0));
  const Scalar _tmp61 = std::sqrt(weight) * std::sqrt(std::max<Scalar>(0, _tmp60));
  const Scalar _tmp62 = 1.0 / (epsilon - gnc_mu + 1);
  const Scalar _tmp63 = epsilon + std::fabs(_tmp62);
  const Scalar _tmp64 = std::pow<Scalar>(gnc_scale, -2);
  const Scalar _tmp65 = _tmp58 * _tmp64 / _tmp63 + 1;
  const Scalar _tmp66 = 2 - _tmp62;
  const Scalar _tmp67 =
      _tmp66 + epsilon * (2 * std::min<Scalar>(0, (((_tmp66) > 0) - ((_tmp66) < 0))) + 1);
  const Scalar _tmp68 = (1.0 / 2.0) * _tmp67;
  const Scalar _tmp69 =
      std::sqrt(2) * std::sqrt(_tmp63 * (std::pow<Scalar>(_tmp65, _tmp68) - 1) / _tmp67);
  const Scalar _tmp70 = _tmp61 * _tmp69;
  const Scalar _tmp71 = _tmp59 * _tmp70;
  const Scalar _tmp72 = _tmp50 * _tmp71;
  const Scalar _tmp73 = _tmp57 * _tmp71;
  const Scalar _tmp74 = 4 * _tmp5;
  const Scalar _tmp75 = _source_pose[1] * _tmp74;
  const Scalar _tmp76 = _source_pose[0] * _tmp5;
  const Scalar _tmp77 = 2 * _tmp76;
  const Scalar _tmp78 = _tmp16 * _tmp77;
  const Scalar _tmp79 = 2 * _tmp5;
  const Scalar _tmp80 = _source_pose[3] * _tmp79;
  const Scalar _tmp81 = -_tmp11 * _tmp75 + _tmp78 + _tmp80;
  const Scalar _tmp82 = _tmp11 * _tmp80;
  const Scalar _tmp83 = _source_pose[2] * _tmp79;
  const Scalar _tmp84 = _tmp16 * _tmp83;
  const Scalar _tmp85 = -_tmp75 - _tmp82 + _tmp84;
  const Scalar _tmp86 = _tmp11 * _tmp77;
  const Scalar _tmp87 = _tmp83 + _tmp86;
  const Scalar _tmp88 = _tmp38 * _tmp81 + _tmp40 * _tmp85 + _tmp43 * _tmp87;
  const Scalar _tmp89 = (1.0 / 2.0) * _tmp60 *
                        ((((_tmp46 - epsilon) > 0) - ((_tmp46 - epsilon) < 0)) + 1) /
                        std::pow<Scalar>(_tmp47, 2);
  const Scalar _tmp90 = _tmp37 * target_calibration_storage(0, 0);
  const Scalar _tmp91 = _tmp89 * _tmp90;
  const Scalar _tmp92 =
      _tmp49 * (_tmp2 * _tmp81 + _tmp23 * _tmp85 + _tmp31 * _tmp87) - _tmp88 * _tmp91;
  const Scalar _tmp93 = 2 * _tmp50;
  const Scalar _tmp94 = _tmp55 * target_calibration_storage(1, 0);
  const Scalar _tmp95 = _tmp89 * _tmp94;
  const Scalar _tmp96 =
      _tmp56 * (_tmp51 * _tmp81 + _tmp52 * _tmp85 + _tmp53 * _tmp87) - _tmp88 * _tmp95;
  const Scalar _tmp97 = 2 * _tmp57;
  const Scalar _tmp98 = _tmp92 * _tmp93 + _tmp96 * _tmp97;
  const Scalar _tmp99 = _tmp70 / (_tmp58 * std::sqrt(_tmp58));
  const Scalar _tmp100 = (1.0 / 2.0) * _tmp50;
  const Scalar _tmp101 = _tmp100 * _tmp99;
  const Scalar _tmp102 = _tmp59 * _tmp61 * _tmp64 * std::pow<Scalar>(_tmp65, _tmp68 - 1) / _tmp69;
  const Scalar _tmp103 = _tmp100 * _tmp102;
  const Scalar _tmp104 = -1.0 / 2.0 * _tmp101 * _tmp98 + (1.0 / 2.0) * _tmp103 * _tmp98 +
                         (1.0 / 2.0) * _tmp71 * _tmp92;
  const Scalar _tmp105 = _source_pose[1] * _tmp79;
  const Scalar _tmp106 = _tmp105 * _tmp16;
  const Scalar _tmp107 = _tmp106 + _tmp86;
  const Scalar _tmp108 = _source_pose[2] * _tmp74;
  const Scalar _tmp109 = _tmp105 - _tmp108 * _tmp16 + _tmp82;
  const Scalar _tmp110 = _tmp16 * _tmp80;
  const Scalar _tmp111 = -_tmp108 * _tmp11 - _tmp110 + _tmp77;
  const Scalar _tmp112 = _tmp107 * _tmp40 + _tmp109 * _tmp43 + _tmp111 * _tmp38;
  const Scalar _tmp113 =
      -_tmp112 * _tmp91 + _tmp49 * (_tmp107 * _tmp23 + _tmp109 * _tmp31 + _tmp111 * _tmp2);
  const Scalar _tmp114 =
      -_tmp112 * _tmp95 + _tmp56 * (_tmp107 * _tmp52 + _tmp109 * _tmp53 + _tmp111 * _tmp51);
  const Scalar _tmp115 = _tmp113 * _tmp93 + _tmp114 * _tmp97;
  const Scalar _tmp116 = -_tmp101 * _tmp115 + _tmp103 * _tmp115 + _tmp113 * _tmp71;
  const Scalar _tmp117 = (1.0 / 2.0) * _source_pose[1];
  const Scalar _tmp118 = _tmp105 * _tmp11;
  const Scalar _tmp119 = 4 * _tmp76;
  const Scalar _tmp120 = _tmp118 - _tmp119 * _tmp16 - _tmp80;
  const Scalar _tmp121 = _tmp11 * _tmp83;
  const Scalar _tmp122 = _tmp110 - _tmp119 + _tmp121;
  const Scalar _tmp123 = _tmp106 + _tmp83;
  const Scalar _tmp124 = _tmp89 * (_tmp120 * _tmp43 + _tmp122 * _tmp40 + _tmp123 * _tmp38);
  const Scalar _tmp125 =
      -_tmp124 * _tmp90 + _tmp49 * (_tmp120 * _tmp31 + _tmp122 * _tmp23 + _tmp123 * _tmp2);
  const Scalar _tmp126 =
      -_tmp124 * _tmp94 + _tmp56 * (_tmp120 * _tmp53 + _tmp122 * _tmp52 + _tmp123 * _tmp51);
  const Scalar _tmp127 = _tmp125 * _tmp93 + _tmp126 * _tmp97;
  const Scalar _tmp128 = -1.0 / 2.0 * _tmp101 * _tmp127 + (1.0 / 2.0) * _tmp103 * _tmp127 +
                         (1.0 / 2.0) * _tmp125 * _tmp71;
  const Scalar _tmp129 = -_tmp118 + _tmp78;
  const Scalar _tmp130 = _tmp121 - _tmp77;
  const Scalar _tmp131 = _tmp105 - _tmp84;
  const Scalar _tmp132 = _tmp89 * (_tmp129 * _tmp40 + _tmp130 * _tmp43 + _tmp131 * _tmp38);
  const Scalar _tmp133 =
      -_tmp132 * _tmp94 + _tmp56 * (_tmp129 * _tmp52 + _tmp130 * _tmp53 + _tmp131 * _tmp51);
  const Scalar _tmp134 =
      -_tmp132 * _tmp90 + _tmp49 * (_tmp129 * _tmp23 + _tmp130 * _tmp31 + _tmp131 * _tmp2);
  const Scalar _tmp135 = _tmp133 * _tmp97 + _tmp134 * _tmp93;
  const Scalar _tmp136 = -_tmp101 * _tmp135 + _tmp103 * _tmp135 + _tmp134 * _tmp71;
  const Scalar _tmp137 = (1.0 / 2.0) * _tmp136;
  const Scalar _tmp138 = -_source_pose[0] * _tmp137 + _source_pose[2] * _tmp104 +
                         _source_pose[3] * _tmp128 - _tmp116 * _tmp117;
  const Scalar _tmp139 = (1.0 / 2.0) * _tmp116;
  const Scalar _tmp140 = _source_pose[0] * _tmp139 - _source_pose[2] * _tmp128 +
                         _source_pose[3] * _tmp104 - _tmp117 * _tmp136;
  const Scalar _tmp141 = -_source_pose[0] * _tmp104 + _source_pose[1] * _tmp128 -
                         _source_pose[2] * _tmp137 + _source_pose[3] * _tmp139;
  const Scalar _tmp142 = _tmp49 * source_inv_range;
  const Scalar _tmp143 = _tmp142 * _tmp2;
  const Scalar _tmp144 = _tmp91 * source_inv_range;
  const Scalar _tmp145 = _tmp144 * _tmp38;
  const Scalar _tmp146 = _tmp143 - _tmp145;
  const Scalar _tmp147 = _tmp95 * source_inv_range;
  const Scalar _tmp148 = _tmp147 * _tmp38;
  const Scalar _tmp149 = _tmp56 * source_inv_range;
  const Scalar _tmp150 = _tmp149 * _tmp51;
  const Scalar _tmp151 = -_tmp148 + _tmp150;
  const Scalar _tmp152 = _tmp146 * _tmp93 + _tmp151 * _tmp97;
  const Scalar _tmp153 = -_tmp101 * _tmp152 + _tmp103 * _tmp152 + _tmp146 * _tmp71;
  const Scalar _tmp154 = _tmp149 * _tmp53;
  const Scalar _tmp155 = _tmp147 * _tmp43;
  const Scalar _tmp156 = _tmp154 - _tmp155;
  const Scalar _tmp157 = _tmp144 * _tmp43;
  const Scalar _tmp158 = _tmp142 * _tmp31;
  const Scalar _tmp159 = -_tmp157 + _tmp158;
  const Scalar _tmp160 = _tmp156 * _tmp97 + _tmp159 * _tmp93;
  const Scalar _tmp161 = -_tmp101 * _tmp160 + _tmp103 * _tmp160 + _tmp159 * _tmp71;
  const Scalar _tmp162 = _tmp142 * _tmp23;
  const Scalar _tmp163 = _tmp144 * _tmp40;
  const Scalar _tmp164 = _tmp162 - _tmp163;
  const Scalar _tmp165 = _tmp149 * _tmp52;
  const Scalar _tmp166 = _tmp147 * _tmp40;
  const Scalar _tmp167 = _tmp165 - _tmp166;
  const Scalar _tmp168 = _tmp164 * _tmp93 + _tmp167 * _tmp97;
  const Scalar _tmp169 = -_tmp101 * _tmp168 + _tmp103 * _tmp168 + _tmp164 * _tmp71;
  const Scalar _tmp170 = 2 * _target_pose[3];
  const Scalar _tmp171 = _tmp170 * _tmp32;
  const Scalar _tmp172 = 4 * _tmp27;
  const Scalar _tmp173 = _tmp170 * _tmp34;
  const Scalar _tmp174 = _tmp28 * _tmp35;
  const Scalar _tmp175 = 4 * _target_pose[0];
  const Scalar _tmp176 = 2 * _tmp18;
  const Scalar _tmp177 = _target_pose[2] * _tmp176;
  const Scalar _tmp178 = -_target_pose[0] * _tmp172 - _tmp171 + _tmp177 +
                         source_inv_range * (-_tmp173 + _tmp174 - _tmp175 * _tmp33);
  const Scalar _tmp179 = _tmp21 * _tmp32;
  const Scalar _tmp180 = _tmp27 * _tmp28;
  const Scalar _tmp181 = _tmp28 * _tmp33;
  const Scalar _tmp182 = _tmp21 * _tmp34;
  const Scalar _tmp183 =
      -_tmp178 * _tmp91 + _tmp49 * (_tmp179 + _tmp180 + source_inv_range * (_tmp181 + _tmp182));
  const Scalar _tmp184 = 4 * _tmp32;
  const Scalar _tmp185 = _tmp170 * _tmp27;
  const Scalar _tmp186 = _tmp170 * _tmp33;
  const Scalar _tmp187 = _tmp21 * _tmp35;
  const Scalar _tmp188 = _target_pose[1] * _tmp176;
  const Scalar _tmp189 =
      -_tmp178 * _tmp95 + _tmp56 * (-_target_pose[0] * _tmp184 + _tmp185 + _tmp188 +
                                    source_inv_range * (-_tmp175 * _tmp34 + _tmp186 + _tmp187));
  const Scalar _tmp190 = _tmp183 * _tmp93 + _tmp189 * _tmp97;
  const Scalar _tmp191 = -_tmp101 * _tmp190 + _tmp103 * _tmp190 + _tmp183 * _tmp71;
  const Scalar _tmp192 = (1.0 / 2.0) * _tmp191;
  const Scalar _tmp193 = _tmp19 * _tmp32;
  const Scalar _tmp194 = _tmp19 * _tmp34;
  const Scalar _tmp195 = 4 * _target_pose[1];
  const Scalar _tmp196 = 4 * _tmp18;
  const Scalar _tmp197 = _tmp28 * _tmp32;
  const Scalar _tmp198 = _tmp170 * _tmp35;
  const Scalar _tmp199 = _tmp28 * _tmp34;
  const Scalar _tmp200 = _target_pose[3] * _tmp176;
  const Scalar _tmp201 = -_target_pose[1] * _tmp172 + _tmp197 + _tmp200 +
                         source_inv_range * (-_tmp195 * _tmp33 + _tmp198 + _tmp199);
  const Scalar _tmp202 =
      -_tmp201 * _tmp91 + _tmp49 * (-_target_pose[1] * _tmp196 - _tmp185 + _tmp193 +
                                    source_inv_range * (-_tmp186 + _tmp194 - _tmp195 * _tmp35));
  const Scalar _tmp203 = _tmp19 * _tmp35;
  const Scalar _tmp204 = _tmp18 * _tmp19;
  const Scalar _tmp205 =
      -_tmp201 * _tmp95 + _tmp56 * (_tmp180 + _tmp204 + source_inv_range * (_tmp181 + _tmp203));
  const Scalar _tmp206 = _tmp202 * _tmp93 + _tmp205 * _tmp97;
  const Scalar _tmp207 = -1.0 / 2.0 * _tmp101 * _tmp206 + (1.0 / 2.0) * _tmp103 * _tmp206 +
                         (1.0 / 2.0) * _tmp202 * _tmp71;
  const Scalar _tmp208 = _tmp179 + _tmp204 + source_inv_range * (_tmp182 + _tmp203);
  const Scalar _tmp209 = _tmp19 * _tmp27;
  const Scalar _tmp210 = 4 * _target_pose[2];
  const Scalar _tmp211 = _tmp19 * _tmp33;
  const Scalar _tmp212 =
      -_tmp208 * _tmp91 + _tmp49 * (-_target_pose[2] * _tmp196 + _tmp171 + _tmp209 +
                                    source_inv_range * (_tmp173 - _tmp210 * _tmp35 + _tmp211));
  const Scalar _tmp213 = _tmp21 * _tmp27;
  const Scalar _tmp214 = _tmp21 * _tmp33;
  const Scalar _tmp215 =
      -_tmp208 * _tmp95 + _tmp56 * (-_target_pose[2] * _tmp184 - _tmp200 + _tmp213 +
                                    source_inv_range * (-_tmp198 - _tmp210 * _tmp34 + _tmp214));
  const Scalar _tmp216 = _tmp212 * _tmp93 + _tmp215 * _tmp97;
  const Scalar _tmp217 = -1.0 / 2.0 * _tmp101 * _tmp216 + (1.0 / 2.0) * _tmp103 * _tmp216 +
                         (1.0 / 2.0) * _tmp212 * _tmp71;
  const Scalar _tmp218 = _tmp188 - _tmp193 + source_inv_range * (_tmp187 - _tmp194);
  const Scalar _tmp219 =
      -_tmp218 * _tmp95 + _tmp56 * (-_tmp177 + _tmp209 + source_inv_range * (-_tmp174 + _tmp211));
  const Scalar _tmp220 =
      -_tmp218 * _tmp91 + _tmp49 * (_tmp197 - _tmp213 + source_inv_range * (_tmp199 - _tmp214));
  const Scalar _tmp221 = _tmp219 * _tmp97 + _tmp220 * _tmp93;
  const Scalar _tmp222 = -_tmp101 * _tmp221 + _tmp103 * _tmp221 + _tmp220 * _tmp71;
  const Scalar _tmp223 = (1.0 / 2.0) * _tmp222;
  const Scalar _tmp224 = -_target_pose[0] * _tmp223 - _target_pose[1] * _tmp217 +
                         _target_pose[2] * _tmp207 + _target_pose[3] * _tmp192;
  const Scalar _tmp225 = (1.0 / 2.0) * _target_pose[2];
  const Scalar _tmp226 = _target_pose[0] * _tmp217 - _target_pose[1] * _tmp223 +
                         _target_pose[3] * _tmp207 - _tmp191 * _tmp225;
  const Scalar _tmp227 = -_target_pose[0] * _tmp207 + _target_pose[1] * _tmp192 +
                         _target_pose[3] * _tmp217 - _tmp222 * _tmp225;
  const Scalar _tmp228 = -_tmp143 + _tmp145;
  const Scalar _tmp229 = _tmp148 - _tmp150;
  const Scalar _tmp230 = _tmp228 * _tmp93 + _tmp229 * _tmp97;
  const Scalar _tmp231 = -_tmp101 * _tmp230 + _tmp103 * _tmp230 + _tmp228 * _tmp71;
  const Scalar _tmp232 = _tmp157 - _tmp158;
  const Scalar _tmp233 = -_tmp154 + _tmp155;
  const Scalar _tmp234 = _tmp232 * _tmp93 + _tmp233 * _tmp97;
  const Scalar _tmp235 = -_tmp101 * _tmp234 + _tmp103 * _tmp234 + _tmp232 * _tmp71;
  const Scalar _tmp236 = -_tmp162 + _tmp163;
  const Scalar _tmp237 = -_tmp165 + _tmp166;
  const Scalar _tmp238 = _tmp236 * _tmp93 + _tmp237 * _tmp97;
  const Scalar _tmp239 = -_tmp101 * _tmp238 + _tmp103 * _tmp238 + _tmp236 * _tmp71;
  const Scalar _tmp240 = -_tmp44 * _tmp95 + _tmp54 * _tmp56;
  const Scalar _tmp241 = _tmp36 * _tmp49 - _tmp44 * _tmp91;
  const Scalar _tmp242 = _tmp240 * _tmp97 + _tmp241 * _tmp93;
  const Scalar _tmp243 = -_tmp101 * _tmp242 + _tmp103 * _tmp242 + _tmp241 * _tmp71;
  const Scalar _tmp244 = (1.0 / 2.0) * _tmp57;
  const Scalar _tmp245 = _tmp102 * _tmp244;
  const Scalar _tmp246 = _tmp244 * _tmp99;
  const Scalar _tmp247 = (1.0 / 2.0) * _tmp114 * _tmp71 + (1.0 / 2.0) * _tmp115 * _tmp245 -
                         1.0 / 2.0 * _tmp115 * _tmp246;
  const Scalar _tmp248 = (1.0 / 2.0) * _tmp133 * _tmp71 + (1.0 / 2.0) * _tmp135 * _tmp245 -
                         1.0 / 2.0 * _tmp135 * _tmp246;
  const Scalar _tmp249 =
      (1.0 / 2.0) * _tmp245 * _tmp98 - 1.0 / 2.0 * _tmp246 * _tmp98 + (1.0 / 2.0) * _tmp71 * _tmp96;
  const Scalar _tmp250 = _tmp126 * _tmp71 + _tmp127 * _tmp245 - _tmp127 * _tmp246;
  const Scalar _tmp251 = (1.0 / 2.0) * _tmp250;
  const Scalar _tmp252 = -_source_pose[0] * _tmp248 - _source_pose[1] * _tmp247 +
                         _source_pose[2] * _tmp249 + _source_pose[3] * _tmp251;
  const Scalar _tmp253 = _source_pose[0] * _tmp247 - _source_pose[1] * _tmp248 -
                         _source_pose[2] * _tmp251 + _source_pose[3] * _tmp249;
  const Scalar _tmp254 = -_source_pose[0] * _tmp249 - _source_pose[2] * _tmp248 +
                         _source_pose[3] * _tmp247 + _tmp117 * _tmp250;
  const Scalar _tmp255 = _tmp151 * _tmp71 + _tmp152 * _tmp245 - _tmp152 * _tmp246;
  const Scalar _tmp256 = _tmp160 * _tmp244;
  const Scalar _tmp257 = _tmp102 * _tmp256 + _tmp156 * _tmp71 - _tmp256 * _tmp99;
  const Scalar _tmp258 = _tmp167 * _tmp71 + _tmp168 * _tmp245 - _tmp168 * _tmp246;
  const Scalar _tmp259 = (1.0 / 2.0) * _tmp215 * _tmp71 + (1.0 / 2.0) * _tmp216 * _tmp245 -
                         1.0 / 2.0 * _tmp216 * _tmp246;
  const Scalar _tmp260 = (1.0 / 2.0) * _tmp219 * _tmp71 + (1.0 / 2.0) * _tmp221 * _tmp245 -
                         1.0 / 2.0 * _tmp221 * _tmp246;
  const Scalar _tmp261 = (1.0 / 2.0) * _tmp189 * _tmp71 + (1.0 / 2.0) * _tmp190 * _tmp245 -
                         1.0 / 2.0 * _tmp190 * _tmp246;
  const Scalar _tmp262 = (1.0 / 2.0) * _tmp205 * _tmp71 + (1.0 / 2.0) * _tmp206 * _tmp245 -
                         1.0 / 2.0 * _tmp206 * _tmp246;
  const Scalar _tmp263 = -_target_pose[0] * _tmp260 - _target_pose[1] * _tmp259 +
                         _target_pose[2] * _tmp262 + _target_pose[3] * _tmp261;
  const Scalar _tmp264 = _target_pose[0] * _tmp259 - _target_pose[1] * _tmp260 -
                         _target_pose[2] * _tmp261 + _target_pose[3] * _tmp262;
  const Scalar _tmp265 = -_target_pose[0] * _tmp262 + _target_pose[1] * _tmp261 -
                         _target_pose[2] * _tmp260 + _target_pose[3] * _tmp259;
  const Scalar _tmp266 = _tmp229 * _tmp71 + _tmp230 * _tmp245 - _tmp230 * _tmp246;
  const Scalar _tmp267 = _tmp233 * _tmp71 + _tmp234 * _tmp245 - _tmp234 * _tmp246;
  const Scalar _tmp268 = _tmp237 * _tmp71 + _tmp238 * _tmp245 - _tmp238 * _tmp246;
  const Scalar _tmp269 = _tmp240 * _tmp71 + _tmp242 * _tmp245 - _tmp242 * _tmp246;

  // Output terms (4)
  if (res != nullptr) {
    Eigen::Matrix<Scalar, 2, 1>& _res = (*res);

    _res(0, 0) = _tmp72;
    _res(1, 0) = _tmp73;
  }

  if (jacobian != nullptr) {
    Eigen::Matrix<Scalar, 2, 13>& _jacobian = (*jacobian);

    _jacobian(0, 0) = _tmp138;
    _jacobian(0, 1) = _tmp140;
    _jacobian(0, 2) = _tmp141;
    _jacobian(0, 3) = _tmp153;
    _jacobian(0, 4) = _tmp161;
    _jacobian(0, 5) = _tmp169;
    _jacobian(0, 6) = _tmp224;
    _jacobian(0, 7) = _tmp226;
    _jacobian(0, 8) = _tmp227;
    _jacobian(0, 9) = _tmp231;
    _jacobian(0, 10) = _tmp235;
    _jacobian(0, 11) = _tmp239;
    _jacobian(0, 12) = _tmp243;
    _jacobian(1, 0) = _tmp252;
    _jacobian(1, 1) = _tmp253;
    _jacobian(1, 2) = _tmp254;
    _jacobian(1, 3) = _tmp255;
    _jacobian(1, 4) = _tmp257;
    _jacobian(1, 5) = _tmp258;
    _jacobian(1, 6) = _tmp263;
    _jacobian(1, 7) = _tmp264;
    _jacobian(1, 8) = _tmp265;
    _jacobian(1, 9) = _tmp266;
    _jacobian(1, 10) = _tmp267;
    _jacobian(1, 11) = _tmp268;
    _jacobian(1, 12) = _tmp269;
  }

  if (hessian != nullptr) {
    Eigen::Matrix<Scalar, 13, 13>& _hessian = (*hessian);

    _hessian(0, 0) = std::pow<Scalar>(_tmp138, 2) + std::pow<Scalar>(_tmp252, 2);
    _hessian(0, 1) = 0;
    _hessian(0, 2) = 0;
    _hessian(0, 3) = 0;
    _hessian(0, 4) = 0;
    _hessian(0, 5) = 0;
    _hessian(0, 6) = 0;
    _hessian(0, 7) = 0;
    _hessian(0, 8) = 0;
    _hessian(0, 9) = 0;
    _hessian(0, 10) = 0;
    _hessian(0, 11) = 0;
    _hessian(0, 12) = 0;
    _hessian(1, 0) = _tmp138 * _tmp140 + _tmp252 * _tmp253;
    _hessian(1, 1) = std::pow<Scalar>(_tmp140, 2) + std::pow<Scalar>(_tmp253, 2);
    _hessian(1, 2) = 0;
    _hessian(1, 3) = 0;
    _hessian(1, 4) = 0;
    _hessian(1, 5) = 0;
    _hessian(1, 6) = 0;
    _hessian(1, 7) = 0;
    _hessian(1, 8) = 0;
    _hessian(1, 9) = 0;
    _hessian(1, 10) = 0;
    _hessian(1, 11) = 0;
    _hessian(1, 12) = 0;
    _hessian(2, 0) = _tmp138 * _tmp141 + _tmp252 * _tmp254;
    _hessian(2, 1) = _tmp140 * _tmp141 + _tmp253 * _tmp254;
    _hessian(2, 2) = std::pow<Scalar>(_tmp141, 2) + std::pow<Scalar>(_tmp254, 2);
    _hessian(2, 3) = 0;
    _hessian(2, 4) = 0;
    _hessian(2, 5) = 0;
    _hessian(2, 6) = 0;
    _hessian(2, 7) = 0;
    _hessian(2, 8) = 0;
    _hessian(2, 9) = 0;
    _hessian(2, 10) = 0;
    _hessian(2, 11) = 0;
    _hessian(2, 12) = 0;
    _hessian(3, 0) = _tmp138 * _tmp153 + _tmp252 * _tmp255;
    _hessian(3, 1) = _tmp140 * _tmp153 + _tmp253 * _tmp255;
    _hessian(3, 2) = _tmp141 * _tmp153 + _tmp254 * _tmp255;
    _hessian(3, 3) = std::pow<Scalar>(_tmp153, 2) + std::pow<Scalar>(_tmp255, 2);
    _hessian(3, 4) = 0;
    _hessian(3, 5) = 0;
    _hessian(3, 6) = 0;
    _hessian(3, 7) = 0;
    _hessian(3, 8) = 0;
    _hessian(3, 9) = 0;
    _hessian(3, 10) = 0;
    _hessian(3, 11) = 0;
    _hessian(3, 12) = 0;
    _hessian(4, 0) = _tmp138 * _tmp161 + _tmp252 * _tmp257;
    _hessian(4, 1) = _tmp140 * _tmp161 + _tmp253 * _tmp257;
    _hessian(4, 2) = _tmp141 * _tmp161 + _tmp254 * _tmp257;
    _hessian(4, 3) = _tmp153 * _tmp161 + _tmp255 * _tmp257;
    _hessian(4, 4) = std::pow<Scalar>(_tmp161, 2) + std::pow<Scalar>(_tmp257, 2);
    _hessian(4, 5) = 0;
    _hessian(4, 6) = 0;
    _hessian(4, 7) = 0;
    _hessian(4, 8) = 0;
    _hessian(4, 9) = 0;
    _hessian(4, 10) = 0;
    _hessian(4, 11) = 0;
    _hessian(4, 12) = 0;
    _hessian(5, 0) = _tmp138 * _tmp169 + _tmp252 * _tmp258;
    _hessian(5, 1) = _tmp140 * _tmp169 + _tmp253 * _tmp258;
    _hessian(5, 2) = _tmp141 * _tmp169 + _tmp254 * _tmp258;
    _hessian(5, 3) = _tmp153 * _tmp169 + _tmp255 * _tmp258;
    _hessian(5, 4) = _tmp161 * _tmp169 + _tmp257 * _tmp258;
    _hessian(5, 5) = std::pow<Scalar>(_tmp169, 2) + std::pow<Scalar>(_tmp258, 2);
    _hessian(5, 6) = 0;
    _hessian(5, 7) = 0;
    _hessian(5, 8) = 0;
    _hessian(5, 9) = 0;
    _hessian(5, 10) = 0;
    _hessian(5, 11) = 0;
    _hessian(5, 12) = 0;
    _hessian(6, 0) = _tmp138 * _tmp224 + _tmp252 * _tmp263;
    _hessian(6, 1) = _tmp140 * _tmp224 + _tmp253 * _tmp263;
    _hessian(6, 2) = _tmp141 * _tmp224 + _tmp254 * _tmp263;
    _hessian(6, 3) = _tmp153 * _tmp224 + _tmp255 * _tmp263;
    _hessian(6, 4) = _tmp161 * _tmp224 + _tmp257 * _tmp263;
    _hessian(6, 5) = _tmp169 * _tmp224 + _tmp258 * _tmp263;
    _hessian(6, 6) = std::pow<Scalar>(_tmp224, 2) + std::pow<Scalar>(_tmp263, 2);
    _hessian(6, 7) = 0;
    _hessian(6, 8) = 0;
    _hessian(6, 9) = 0;
    _hessian(6, 10) = 0;
    _hessian(6, 11) = 0;
    _hessian(6, 12) = 0;
    _hessian(7, 0) = _tmp138 * _tmp226 + _tmp252 * _tmp264;
    _hessian(7, 1) = _tmp140 * _tmp226 + _tmp253 * _tmp264;
    _hessian(7, 2) = _tmp141 * _tmp226 + _tmp254 * _tmp264;
    _hessian(7, 3) = _tmp153 * _tmp226 + _tmp255 * _tmp264;
    _hessian(7, 4) = _tmp161 * _tmp226 + _tmp257 * _tmp264;
    _hessian(7, 5) = _tmp169 * _tmp226 + _tmp258 * _tmp264;
    _hessian(7, 6) = _tmp224 * _tmp226 + _tmp263 * _tmp264;
    _hessian(7, 7) = std::pow<Scalar>(_tmp226, 2) + std::pow<Scalar>(_tmp264, 2);
    _hessian(7, 8) = 0;
    _hessian(7, 9) = 0;
    _hessian(7, 10) = 0;
    _hessian(7, 11) = 0;
    _hessian(7, 12) = 0;
    _hessian(8, 0) = _tmp138 * _tmp227 + _tmp252 * _tmp265;
    _hessian(8, 1) = _tmp140 * _tmp227 + _tmp253 * _tmp265;
    _hessian(8, 2) = _tmp141 * _tmp227 + _tmp254 * _tmp265;
    _hessian(8, 3) = _tmp153 * _tmp227 + _tmp255 * _tmp265;
    _hessian(8, 4) = _tmp161 * _tmp227 + _tmp257 * _tmp265;
    _hessian(8, 5) = _tmp169 * _tmp227 + _tmp258 * _tmp265;
    _hessian(8, 6) = _tmp224 * _tmp227 + _tmp263 * _tmp265;
    _hessian(8, 7) = _tmp226 * _tmp227 + _tmp264 * _tmp265;
    _hessian(8, 8) = std::pow<Scalar>(_tmp227, 2) + std::pow<Scalar>(_tmp265, 2);
    _hessian(8, 9) = 0;
    _hessian(8, 10) = 0;
    _hessian(8, 11) = 0;
    _hessian(8, 12) = 0;
    _hessian(9, 0) = _tmp138 * _tmp231 + _tmp252 * _tmp266;
    _hessian(9, 1) = _tmp140 * _tmp231 + _tmp253 * _tmp266;
    _hessian(9, 2) = _tmp141 * _tmp231 + _tmp254 * _tmp266;
    _hessian(9, 3) = _tmp153 * _tmp231 + _tmp255 * _tmp266;
    _hessian(9, 4) = _tmp161 * _tmp231 + _tmp257 * _tmp266;
    _hessian(9, 5) = _tmp169 * _tmp231 + _tmp258 * _tmp266;
    _hessian(9, 6) = _tmp224 * _tmp231 + _tmp263 * _tmp266;
    _hessian(9, 7) = _tmp226 * _tmp231 + _tmp264 * _tmp266;
    _hessian(9, 8) = _tmp227 * _tmp231 + _tmp265 * _tmp266;
    _hessian(9, 9) = std::pow<Scalar>(_tmp231, 2) + std::pow<Scalar>(_tmp266, 2);
    _hessian(9, 10) = 0;
    _hessian(9, 11) = 0;
    _hessian(9, 12) = 0;
    _hessian(10, 0) = _tmp138 * _tmp235 + _tmp252 * _tmp267;
    _hessian(10, 1) = _tmp140 * _tmp235 + _tmp253 * _tmp267;
    _hessian(10, 2) = _tmp141 * _tmp235 + _tmp254 * _tmp267;
    _hessian(10, 3) = _tmp153 * _tmp235 + _tmp255 * _tmp267;
    _hessian(10, 4) = _tmp161 * _tmp235 + _tmp257 * _tmp267;
    _hessian(10, 5) = _tmp169 * _tmp235 + _tmp258 * _tmp267;
    _hessian(10, 6) = _tmp224 * _tmp235 + _tmp263 * _tmp267;
    _hessian(10, 7) = _tmp226 * _tmp235 + _tmp264 * _tmp267;
    _hessian(10, 8) = _tmp227 * _tmp235 + _tmp265 * _tmp267;
    _hessian(10, 9) = _tmp231 * _tmp235 + _tmp266 * _tmp267;
    _hessian(10, 10) = std::pow<Scalar>(_tmp235, 2) + std::pow<Scalar>(_tmp267, 2);
    _hessian(10, 11) = 0;
    _hessian(10, 12) = 0;
    _hessian(11, 0) = _tmp138 * _tmp239 + _tmp252 * _tmp268;
    _hessian(11, 1) = _tmp140 * _tmp239 + _tmp253 * _tmp268;
    _hessian(11, 2) = _tmp141 * _tmp239 + _tmp254 * _tmp268;
    _hessian(11, 3) = _tmp153 * _tmp239 + _tmp255 * _tmp268;
    _hessian(11, 4) = _tmp161 * _tmp239 + _tmp257 * _tmp268;
    _hessian(11, 5) = _tmp169 * _tmp239 + _tmp258 * _tmp268;
    _hessian(11, 6) = _tmp224 * _tmp239 + _tmp263 * _tmp268;
    _hessian(11, 7) = _tmp226 * _tmp239 + _tmp264 * _tmp268;
    _hessian(11, 8) = _tmp227 * _tmp239 + _tmp265 * _tmp268;
    _hessian(11, 9) = _tmp231 * _tmp239 + _tmp266 * _tmp268;
    _hessian(11, 10) = _tmp235 * _tmp239 + _tmp267 * _tmp268;
    _hessian(11, 11) = std::pow<Scalar>(_tmp239, 2) + std::pow<Scalar>(_tmp268, 2);
    _hessian(11, 12) = 0;
    _hessian(12, 0) = _tmp138 * _tmp243 + _tmp252 * _tmp269;
    _hessian(12, 1) = _tmp140 * _tmp243 + _tmp253 * _tmp269;
    _hessian(12, 2) = _tmp141 * _tmp243 + _tmp254 * _tmp269;
    _hessian(12, 3) = _tmp153 * _tmp243 + _tmp255 * _tmp269;
    _hessian(12, 4) = _tmp161 * _tmp243 + _tmp257 * _tmp269;
    _hessian(12, 5) = _tmp169 * _tmp243 + _tmp258 * _tmp269;
    _hessian(12, 6) = _tmp224 * _tmp243 + _tmp263 * _tmp269;
    _hessian(12, 7) = _tmp226 * _tmp243 + _tmp264 * _tmp269;
    _hessian(12, 8) = _tmp227 * _tmp243 + _tmp265 * _tmp269;
    _hessian(12, 9) = _tmp231 * _tmp243 + _tmp266 * _tmp269;
    _hessian(12, 10) = _tmp235 * _tmp243 + _tmp267 * _tmp269;
    _hessian(12, 11) = _tmp239 * _tmp243 + _tmp268 * _tmp269;
    _hessian(12, 12) = std::pow<Scalar>(_tmp243, 2) + std::pow<Scalar>(_tmp269, 2);
  }

  if (rhs != nullptr) {
    Eigen::Matrix<Scalar, 13, 1>& _rhs = (*rhs);

    _rhs(0, 0) = _tmp138 * _tmp72 + _tmp252 * _tmp73;
    _rhs(1, 0) = _tmp140 * _tmp72 + _tmp253 * _tmp73;
    _rhs(2, 0) = _tmp141 * _tmp72 + _tmp254 * _tmp73;
    _rhs(3, 0) = _tmp153 * _tmp72 + _tmp255 * _tmp73;
    _rhs(4, 0) = _tmp161 * _tmp72 + _tmp257 * _tmp73;
    _rhs(5, 0) = _tmp169 * _tmp72 + _tmp258 * _tmp73;
    _rhs(6, 0) = _tmp224 * _tmp72 + _tmp263 * _tmp73;
    _rhs(7, 0) = _tmp226 * _tmp72 + _tmp264 * _tmp73;
    _rhs(8, 0) = _tmp227 * _tmp72 + _tmp265 * _tmp73;
    _rhs(9, 0) = _tmp231 * _tmp72 + _tmp266 * _tmp73;
    _rhs(10, 0) = _tmp235 * _tmp72 + _tmp267 * _tmp73;
    _rhs(11, 0) = _tmp239 * _tmp72 + _tmp268 * _tmp73;
    _rhs(12, 0) = _tmp243 * _tmp72 + _tmp269 * _tmp73;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace bundle_adjustment_example
