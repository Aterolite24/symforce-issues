// -----------------------------------------------------------------------------
// This file was autogenerated by symforce. Do NOT modify by hand.
// -----------------------------------------------------------------------------
#pragma once

#include <Eigen/Dense>
#include <sym/pose3.h>

namespace custom_factor_generation {

/**
 * Return the 6dof residual on the relative pose between the given two views. Compares
 * the relative pose between the optimized poses to the relative pose between the priors.
 *
 * This is similar to geo_factors_codegen.between_factor, but it uses a weight and diagonal
 * covariance instead of a sqrt information matrix
 *
 * Args:
 *     nav_T_src: Current pose of the src frame
 *     nav_T_target: Current pose of the target frame
 *     target_T_src_prior: Prior on the pose of src in the target frame
 *     prior_weight: The weight of the Gaussian prior
 *     prior_sigmas: The diagonal of the sqrt covariance matrix
 *     epsilon: Small positive value
 *
 * Outputs:
 *     res: The residual of the between factor
 *     jacobian: (6x12) jacobian of res wrt args nav_T_src (6), nav_T_target (6)
 *     hessian: (12x12) Gauss-Newton hessian for args nav_T_src (6), nav_T_target (6)
 *     rhs: (12x1) Gauss-Newton rhs for args nav_T_src (6), nav_T_target (6)
 */
template <typename Scalar>
void CustomBetweenFactor(const sym::Pose3<Scalar>& nav_T_src,
                         const sym::Pose3<Scalar>& nav_T_target,
                         const sym::Pose3<Scalar>& target_T_src_prior, const Scalar prior_weight,
                         const Eigen::Matrix<Scalar, 6, 1>& prior_sigmas, const Scalar epsilon,
                         Eigen::Matrix<Scalar, 6, 1>* const res = nullptr,
                         Eigen::Matrix<Scalar, 6, 12>* const jacobian = nullptr,
                         Eigen::Matrix<Scalar, 12, 12>* const hessian = nullptr,
                         Eigen::Matrix<Scalar, 12, 1>* const rhs = nullptr) {
  // Total ops: 1367

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _nav_T_src = nav_T_src.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _nav_T_target = nav_T_target.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _target_T_src_prior = target_T_src_prior.Data();

  // Intermediate terms (304)
  const Scalar _tmp0 = _nav_T_src[0] * _nav_T_target[0] + _nav_T_src[1] * _nav_T_target[1] +
                       _nav_T_src[2] * _nav_T_target[2] + _nav_T_src[3] * _nav_T_target[3];
  const Scalar _tmp1 = _nav_T_src[0] * _nav_T_target[3] + _nav_T_src[1] * _nav_T_target[2] -
                       _nav_T_src[2] * _nav_T_target[1] - _nav_T_src[3] * _nav_T_target[0];
  const Scalar _tmp2 = _nav_T_src[0] * _nav_T_target[1] - _nav_T_src[1] * _nav_T_target[0] +
                       _nav_T_src[2] * _nav_T_target[3] - _nav_T_src[3] * _nav_T_target[2];
  const Scalar _tmp3 = -_nav_T_src[0] * _nav_T_target[2] + _nav_T_src[1] * _nav_T_target[3] +
                       _nav_T_src[2] * _nav_T_target[0] - _nav_T_src[3] * _nav_T_target[1];
  const Scalar _tmp4 = -_target_T_src_prior[0] * _tmp0 - _target_T_src_prior[1] * _tmp2 +
                       _target_T_src_prior[2] * _tmp3 + _target_T_src_prior[3] * _tmp1;
  const Scalar _tmp5 = _target_T_src_prior[0] * _tmp1 + _target_T_src_prior[1] * _tmp3 +
                       _target_T_src_prior[2] * _tmp2 + _target_T_src_prior[3] * _tmp0;
  const Scalar _tmp6 = std::fabs(_tmp5);
  const Scalar _tmp7 = 1 - epsilon;
  const Scalar _tmp8 = std::min<Scalar>(_tmp6, _tmp7);
  const Scalar _tmp9 = std::acos(_tmp8);
  const Scalar _tmp10 = 1 - std::pow<Scalar>(_tmp8, 2);
  const Scalar _tmp11 = 2 / std::sqrt(_tmp10);
  const Scalar _tmp12 = _tmp11 * _tmp9;
  const Scalar _tmp13 = std::sqrt(prior_weight);
  const Scalar _tmp14 = (((_tmp5) > 0) - ((_tmp5) < 0));
  const Scalar _tmp15 = _tmp13 * (2 * std::min<Scalar>(0, _tmp14) + 1);
  const Scalar _tmp16 = _tmp15 / (epsilon + prior_sigmas(0, 0));
  const Scalar _tmp17 = _tmp12 * _tmp16;
  const Scalar _tmp18 = _tmp17 * _tmp4;
  const Scalar _tmp19 = _target_T_src_prior[0] * _tmp2 - _target_T_src_prior[1] * _tmp0 -
                        _target_T_src_prior[2] * _tmp1 + _target_T_src_prior[3] * _tmp3;
  const Scalar _tmp20 = _tmp15 / (epsilon + prior_sigmas(1, 0));
  const Scalar _tmp21 = _tmp20 * _tmp9;
  const Scalar _tmp22 = _tmp11 * _tmp21;
  const Scalar _tmp23 = _tmp19 * _tmp22;
  const Scalar _tmp24 = -_target_T_src_prior[0] * _tmp3 + _target_T_src_prior[1] * _tmp1 -
                        _target_T_src_prior[2] * _tmp0 + _target_T_src_prior[3] * _tmp2;
  const Scalar _tmp25 = _tmp15 / (epsilon + prior_sigmas(2, 0));
  const Scalar _tmp26 = _tmp12 * _tmp25;
  const Scalar _tmp27 = _tmp24 * _tmp26;
  const Scalar _tmp28 = 2 * std::pow<Scalar>(_nav_T_target[2], 2);
  const Scalar _tmp29 = -_tmp28;
  const Scalar _tmp30 = 2 * std::pow<Scalar>(_nav_T_target[1], 2);
  const Scalar _tmp31 = 1 - _tmp30;
  const Scalar _tmp32 = _tmp29 + _tmp31;
  const Scalar _tmp33 = 2 * _nav_T_target[3];
  const Scalar _tmp34 = _nav_T_target[2] * _tmp33;
  const Scalar _tmp35 = 2 * _nav_T_target[0];
  const Scalar _tmp36 = _nav_T_target[1] * _tmp35;
  const Scalar _tmp37 = _tmp34 + _tmp36;
  const Scalar _tmp38 = _nav_T_target[2] * _tmp35;
  const Scalar _tmp39 = _nav_T_target[1] * _tmp33;
  const Scalar _tmp40 = -_tmp39;
  const Scalar _tmp41 = _tmp38 + _tmp40;
  const Scalar _tmp42 = _nav_T_src[4] * _tmp32 + _nav_T_src[5] * _tmp37 + _nav_T_src[6] * _tmp41 -
                        _nav_T_target[4] * _tmp32 - _nav_T_target[5] * _tmp37 -
                        _nav_T_target[6] * _tmp41 - _target_T_src_prior[4];
  const Scalar _tmp43 = epsilon + prior_sigmas(3, 0);
  const Scalar _tmp44 = _tmp13 / _tmp43;
  const Scalar _tmp45 = _tmp42 * _tmp44;
  const Scalar _tmp46 = 2 * std::pow<Scalar>(_nav_T_target[0], 2);
  const Scalar _tmp47 = -_tmp46;
  const Scalar _tmp48 = _tmp29 + _tmp47 + 1;
  const Scalar _tmp49 = 2 * _nav_T_target[1];
  const Scalar _tmp50 = _nav_T_target[2] * _tmp49;
  const Scalar _tmp51 = _nav_T_target[3] * _tmp35;
  const Scalar _tmp52 = _tmp50 + _tmp51;
  const Scalar _tmp53 = -_tmp34;
  const Scalar _tmp54 = _tmp36 + _tmp53;
  const Scalar _tmp55 = _nav_T_src[4] * _tmp54 + _nav_T_src[5] * _tmp48 + _nav_T_src[6] * _tmp52 -
                        _nav_T_target[4] * _tmp54 - _nav_T_target[5] * _tmp48 -
                        _nav_T_target[6] * _tmp52 - _target_T_src_prior[5];
  const Scalar _tmp56 = epsilon + prior_sigmas(4, 0);
  const Scalar _tmp57 = _tmp13 / _tmp56;
  const Scalar _tmp58 = _tmp55 * _tmp57;
  const Scalar _tmp59 = _tmp31 + _tmp47;
  const Scalar _tmp60 = -_tmp51;
  const Scalar _tmp61 = _tmp50 + _tmp60;
  const Scalar _tmp62 = _tmp38 + _tmp39;
  const Scalar _tmp63 = _nav_T_src[4] * _tmp62 + _nav_T_src[5] * _tmp61 + _nav_T_src[6] * _tmp59 -
                        _nav_T_target[4] * _tmp62 - _nav_T_target[5] * _tmp61 -
                        _nav_T_target[6] * _tmp59 - _target_T_src_prior[6];
  const Scalar _tmp64 = epsilon + prior_sigmas(5, 0);
  const Scalar _tmp65 = _tmp13 / _tmp64;
  const Scalar _tmp66 = _tmp63 * _tmp65;
  const Scalar _tmp67 = _nav_T_target[3] * _target_T_src_prior[1];
  const Scalar _tmp68 = _nav_T_target[1] * _target_T_src_prior[3];
  const Scalar _tmp69 = _nav_T_target[2] * _target_T_src_prior[0];
  const Scalar _tmp70 = _nav_T_target[0] * _target_T_src_prior[2];
  const Scalar _tmp71 = _tmp67 + _tmp68 + _tmp69 - _tmp70;
  const Scalar _tmp72 = _tmp14 * ((((-_tmp6 + _tmp7) > 0) - ((-_tmp6 + _tmp7) < 0)) + 1);
  const Scalar _tmp73 = _tmp72 / _tmp10;
  const Scalar _tmp74 = _tmp16 * _tmp4;
  const Scalar _tmp75 = _tmp73 * _tmp74;
  const Scalar _tmp76 = _tmp72 * _tmp8 / (_tmp10 * std::sqrt(_tmp10));
  const Scalar _tmp77 = _tmp76 * _tmp9;
  const Scalar _tmp78 = _tmp74 * _tmp77;
  const Scalar _tmp79 = _nav_T_target[0] * _target_T_src_prior[1];
  const Scalar _tmp80 = _nav_T_target[2] * _target_T_src_prior[3];
  const Scalar _tmp81 = _nav_T_target[1] * _target_T_src_prior[0];
  const Scalar _tmp82 = _nav_T_target[3] * _target_T_src_prior[2];
  const Scalar _tmp83 = _tmp79 + _tmp80 - _tmp81 + _tmp82;
  const Scalar _tmp84 = _tmp17 * _tmp83 - _tmp71 * _tmp75 + _tmp71 * _tmp78;
  const Scalar _tmp85 = (Scalar(1) / Scalar(2)) * _nav_T_src[2];
  const Scalar _tmp86 = _nav_T_target[2] * _target_T_src_prior[1];
  const Scalar _tmp87 = _nav_T_target[0] * _target_T_src_prior[3];
  const Scalar _tmp88 = _nav_T_target[3] * _target_T_src_prior[0];
  const Scalar _tmp89 = _nav_T_target[1] * _target_T_src_prior[2];
  const Scalar _tmp90 = _tmp86 - _tmp87 - _tmp88 - _tmp89;
  const Scalar _tmp91 =
      -_nav_T_target[0] * _target_T_src_prior[0] - _nav_T_target[1] * _target_T_src_prior[1] -
      _nav_T_target[2] * _target_T_src_prior[2] + _nav_T_target[3] * _target_T_src_prior[3];
  const Scalar _tmp92 = _tmp76 * _tmp91;
  const Scalar _tmp93 = _tmp9 * _tmp92;
  const Scalar _tmp94 = _tmp17 * _tmp90 + _tmp74 * _tmp93 - _tmp75 * _tmp91;
  const Scalar _tmp95 = (Scalar(1) / Scalar(2)) * _nav_T_src[0];
  const Scalar _tmp96 = -_tmp67 - _tmp68 - _tmp69 + _tmp70;
  const Scalar _tmp97 = _tmp17 * _tmp96 - _tmp75 * _tmp83 + _tmp78 * _tmp83;
  const Scalar _tmp98 = (Scalar(1) / Scalar(2)) * _nav_T_src[1];
  const Scalar _tmp99 = -_tmp86 + _tmp87 + _tmp88 + _tmp89;
  const Scalar _tmp100 = _tmp73 * _tmp99;
  const Scalar _tmp101 = -Scalar(1) / Scalar(2) * _tmp100 * _tmp74 +
                         (Scalar(1) / Scalar(2)) * _tmp17 * _tmp91 +
                         (Scalar(1) / Scalar(2)) * _tmp78 * _tmp99;
  const Scalar _tmp102 =
      _nav_T_src[3] * _tmp101 + _tmp84 * _tmp85 - _tmp94 * _tmp95 - _tmp97 * _tmp98;
  const Scalar _tmp103 = (Scalar(1) / Scalar(2)) * _nav_T_src[3];
  const Scalar _tmp104 = (Scalar(1) / Scalar(2)) * _tmp97;
  const Scalar _tmp105 =
      _nav_T_src[0] * _tmp104 - _nav_T_src[2] * _tmp101 + _tmp103 * _tmp84 - _tmp94 * _tmp98;
  const Scalar _tmp106 =
      _nav_T_src[1] * _tmp101 + _nav_T_src[3] * _tmp104 - _tmp84 * _tmp95 - _tmp85 * _tmp94;
  const Scalar _tmp107 = _nav_T_src[3] * _target_T_src_prior[3];
  const Scalar _tmp108 = _nav_T_src[1] * _target_T_src_prior[1];
  const Scalar _tmp109 = _nav_T_src[2] * _target_T_src_prior[2];
  const Scalar _tmp110 = _nav_T_src[0] * _target_T_src_prior[0];
  const Scalar _tmp111 = _tmp109 + _tmp110;
  const Scalar _tmp112 = _tmp107 + _tmp108 + _tmp111;
  const Scalar _tmp113 = _nav_T_src[3] * _target_T_src_prior[0];
  const Scalar _tmp114 = -_tmp113;
  const Scalar _tmp115 = _nav_T_src[1] * _target_T_src_prior[2];
  const Scalar _tmp116 = _nav_T_src[2] * _target_T_src_prior[1];
  const Scalar _tmp117 = -_tmp116;
  const Scalar _tmp118 = _nav_T_src[0] * _target_T_src_prior[3];
  const Scalar _tmp119 = _tmp117 + _tmp118;
  const Scalar _tmp120 = -Scalar(1) / Scalar(2) * _tmp112 * _tmp75 +
                         (Scalar(1) / Scalar(2)) * _tmp112 * _tmp78 +
                         (Scalar(1) / Scalar(2)) * _tmp17 * (_tmp114 + _tmp115 + _tmp119);
  const Scalar _tmp121 = _nav_T_src[3] * _target_T_src_prior[2];
  const Scalar _tmp122 = -_tmp121;
  const Scalar _tmp123 = _nav_T_src[2] * _target_T_src_prior[3];
  const Scalar _tmp124 = _nav_T_src[1] * _target_T_src_prior[0];
  const Scalar _tmp125 = -_tmp124;
  const Scalar _tmp126 = _nav_T_src[0] * _target_T_src_prior[1];
  const Scalar _tmp127 = -_tmp126;
  const Scalar _tmp128 = _tmp125 + _tmp127;
  const Scalar _tmp129 = _nav_T_src[3] * _target_T_src_prior[1];
  const Scalar _tmp130 = -_tmp129;
  const Scalar _tmp131 = _nav_T_src[0] * _target_T_src_prior[2];
  const Scalar _tmp132 = _nav_T_src[1] * _target_T_src_prior[3];
  const Scalar _tmp133 = _nav_T_src[2] * _target_T_src_prior[0];
  const Scalar _tmp134 = -_tmp133;
  const Scalar _tmp135 = _tmp132 + _tmp134;
  const Scalar _tmp136 = _tmp130 + _tmp131 + _tmp135;
  const Scalar _tmp137 =
      -_tmp136 * _tmp75 + _tmp136 * _tmp78 + _tmp17 * (_tmp122 - _tmp123 + _tmp128);
  const Scalar _tmp138 = (Scalar(1) / Scalar(2)) * _tmp137;
  const Scalar _tmp139 = _tmp122 + _tmp123;
  const Scalar _tmp140 = _tmp124 + _tmp127 + _tmp139;
  const Scalar _tmp141 = -_tmp131;
  const Scalar _tmp142 =
      -_tmp140 * _tmp75 + _tmp140 * _tmp78 + _tmp17 * (_tmp129 + _tmp135 + _tmp141);
  const Scalar _tmp143 = (Scalar(1) / Scalar(2)) * _tmp142;
  const Scalar _tmp144 = -_tmp107;
  const Scalar _tmp145 = _tmp108 + _tmp144;
  const Scalar _tmp146 = -_tmp115;
  const Scalar _tmp147 = _tmp114 + _tmp146;
  const Scalar _tmp148 = _tmp116 + _tmp118 + _tmp147;
  const Scalar _tmp149 = _tmp148 * _tmp73;
  const Scalar _tmp150 =
      _tmp148 * _tmp78 - _tmp149 * _tmp74 + _tmp17 * (_tmp109 - _tmp110 + _tmp145);
  const Scalar _tmp151 = (Scalar(1) / Scalar(2)) * _nav_T_target[3];
  const Scalar _tmp152 = -_nav_T_target[0] * _tmp120 - _nav_T_target[1] * _tmp143 +
                         _nav_T_target[2] * _tmp138 + _tmp150 * _tmp151;
  const Scalar _tmp153 = (Scalar(1) / Scalar(2)) * _tmp150;
  const Scalar _tmp154 = _nav_T_target[0] * _tmp143 - _nav_T_target[1] * _tmp120 -
                         _nav_T_target[2] * _tmp153 + _tmp137 * _tmp151;
  const Scalar _tmp155 = -_nav_T_target[0] * _tmp138 + _nav_T_target[1] * _tmp153 -
                         _nav_T_target[2] * _tmp120 + _tmp142 * _tmp151;
  const Scalar _tmp156 = _tmp19 * _tmp20;
  const Scalar _tmp157 = _tmp156 * _tmp73;
  const Scalar _tmp158 = _tmp19 * _tmp21;
  const Scalar _tmp159 = -_tmp157 * _tmp91 + _tmp158 * _tmp92 + _tmp22 * _tmp96;
  const Scalar _tmp160 = _tmp158 * _tmp76;
  const Scalar _tmp161 = -Scalar(1) / Scalar(2) * _tmp157 * _tmp83 +
                         (Scalar(1) / Scalar(2)) * _tmp160 * _tmp83 +
                         (Scalar(1) / Scalar(2)) * _tmp22 * _tmp99;
  const Scalar _tmp162 = -Scalar(1) / Scalar(2) * _tmp157 * _tmp71 +
                         (Scalar(1) / Scalar(2)) * _tmp160 * _tmp71 +
                         (Scalar(1) / Scalar(2)) * _tmp22 * _tmp91;
  const Scalar _tmp163 = -_tmp79 - _tmp80 + _tmp81 - _tmp82;
  const Scalar _tmp164 = -_tmp100 * _tmp156 + _tmp160 * _tmp99 + _tmp163 * _tmp22;
  const Scalar _tmp165 =
      -_nav_T_src[1] * _tmp161 + _nav_T_src[2] * _tmp162 + _tmp103 * _tmp164 - _tmp159 * _tmp95;
  const Scalar _tmp166 =
      _nav_T_src[0] * _tmp161 + _nav_T_src[3] * _tmp162 - _tmp159 * _tmp98 - _tmp164 * _tmp85;
  const Scalar _tmp167 =
      -_nav_T_src[0] * _tmp162 + _nav_T_src[3] * _tmp161 - _tmp159 * _tmp85 + _tmp164 * _tmp98;
  const Scalar _tmp168 =
      -_tmp140 * _tmp157 + _tmp140 * _tmp160 + _tmp22 * (_tmp117 - _tmp118 + _tmp147);
  const Scalar _tmp169 = (Scalar(1) / Scalar(2)) * _tmp168;
  const Scalar _tmp170 =
      _tmp148 * _tmp160 - _tmp149 * _tmp156 + _tmp22 * (_tmp121 + _tmp123 + _tmp128);
  const Scalar _tmp171 = _tmp130 + _tmp141;
  const Scalar _tmp172 = -Scalar(1) / Scalar(2) * _tmp112 * _tmp157 +
                         (Scalar(1) / Scalar(2)) * _tmp112 * _tmp160 +
                         (Scalar(1) / Scalar(2)) * _tmp22 * (_tmp132 + _tmp133 + _tmp171);
  const Scalar _tmp173 =
      -_tmp136 * _tmp157 + _tmp136 * _tmp160 + _tmp22 * (-_tmp108 + _tmp111 + _tmp144);
  const Scalar _tmp174 = (Scalar(1) / Scalar(2)) * _tmp173;
  const Scalar _tmp175 = -_nav_T_target[0] * _tmp172 - _nav_T_target[1] * _tmp169 +
                         _nav_T_target[2] * _tmp174 + _tmp151 * _tmp170;
  const Scalar _tmp176 = (Scalar(1) / Scalar(2)) * _tmp170;
  const Scalar _tmp177 = _nav_T_target[0] * _tmp169 - _nav_T_target[1] * _tmp172 -
                         _nav_T_target[2] * _tmp176 + _tmp151 * _tmp173;
  const Scalar _tmp178 = -_nav_T_target[0] * _tmp174 + _nav_T_target[1] * _tmp176 -
                         _nav_T_target[2] * _tmp172 + _tmp151 * _tmp168;
  const Scalar _tmp179 = _tmp24 * _tmp25;
  const Scalar _tmp180 = _tmp179 * _tmp77;
  const Scalar _tmp181 = _tmp179 * _tmp73;
  const Scalar _tmp182 = _tmp180 * _tmp83 - _tmp181 * _tmp83 + _tmp26 * _tmp91;
  const Scalar _tmp183 = (Scalar(1) / Scalar(2)) * _tmp180 * _tmp71 -
                         Scalar(1) / Scalar(2) * _tmp181 * _tmp71 +
                         (Scalar(1) / Scalar(2)) * _tmp26 * _tmp90;
  const Scalar _tmp184 = _tmp163 * _tmp26 + _tmp179 * _tmp93 - _tmp181 * _tmp91;
  const Scalar _tmp185 = (Scalar(1) / Scalar(2)) * _tmp184;
  const Scalar _tmp186 = -_tmp100 * _tmp179 + _tmp180 * _tmp99 + _tmp26 * _tmp71;
  const Scalar _tmp187 =
      -_nav_T_src[0] * _tmp185 + _nav_T_src[2] * _tmp183 + _tmp103 * _tmp186 - _tmp182 * _tmp98;
  const Scalar _tmp188 =
      _nav_T_src[3] * _tmp183 + _tmp182 * _tmp95 - _tmp184 * _tmp98 - _tmp186 * _tmp85;
  const Scalar _tmp189 =
      -_nav_T_src[0] * _tmp183 - _nav_T_src[2] * _tmp185 + _tmp103 * _tmp182 + _tmp186 * _tmp98;
  const Scalar _tmp190 =
      _tmp136 * _tmp180 - _tmp136 * _tmp181 + _tmp26 * (_tmp113 + _tmp119 + _tmp146);
  const Scalar _tmp191 = (Scalar(1) / Scalar(2)) * _tmp190;
  const Scalar _tmp192 =
      _tmp148 * _tmp180 - _tmp149 * _tmp179 + _tmp26 * (-_tmp132 + _tmp134 + _tmp171);
  const Scalar _tmp193 = (Scalar(1) / Scalar(2)) * _tmp112 * _tmp180 -
                         Scalar(1) / Scalar(2) * _tmp112 * _tmp181 +
                         (Scalar(1) / Scalar(2)) * _tmp26 * (_tmp125 + _tmp126 + _tmp139);
  const Scalar _tmp194 =
      _tmp140 * _tmp180 - _tmp140 * _tmp181 + _tmp26 * (-_tmp109 + _tmp110 + _tmp145);
  const Scalar _tmp195 = (Scalar(1) / Scalar(2)) * _tmp194;
  const Scalar _tmp196 = -_nav_T_target[0] * _tmp193 - _nav_T_target[1] * _tmp195 +
                         _nav_T_target[2] * _tmp191 + _tmp151 * _tmp192;
  const Scalar _tmp197 = (Scalar(1) / Scalar(2)) * _tmp192;
  const Scalar _tmp198 = _nav_T_target[0] * _tmp195 - _nav_T_target[1] * _tmp193 -
                         _nav_T_target[2] * _tmp197 + _tmp151 * _tmp190;
  const Scalar _tmp199 = -_nav_T_target[0] * _tmp191 + _nav_T_target[1] * _tmp197 -
                         _nav_T_target[2] * _tmp193 + _tmp151 * _tmp194;
  const Scalar _tmp200 = _tmp32 * _tmp44;
  const Scalar _tmp201 = _tmp37 * _tmp44;
  const Scalar _tmp202 = _tmp41 * _tmp44;
  const Scalar _tmp203 = 2 * _nav_T_target[5];
  const Scalar _tmp204 = _nav_T_src[5] * _tmp49 - _nav_T_target[1] * _tmp203;
  const Scalar _tmp205 = 2 * _nav_T_target[2];
  const Scalar _tmp206 = _nav_T_src[6] * _tmp205 - _nav_T_target[6] * _tmp205;
  const Scalar _tmp207 = _tmp44 * (_tmp204 + _tmp206);
  const Scalar _tmp208 = (Scalar(1) / Scalar(2)) * _nav_T_target[1];
  const Scalar _tmp209 = 4 * _nav_T_target[2];
  const Scalar _tmp210 = _nav_T_src[5] * _tmp33;
  const Scalar _tmp211 = _nav_T_target[3] * _tmp203;
  const Scalar _tmp212 = _nav_T_src[6] * _tmp35 - _nav_T_target[6] * _tmp35;
  const Scalar _tmp213 =
      -_nav_T_src[4] * _tmp209 + _nav_T_target[4] * _tmp209 + _tmp210 - _tmp211 + _tmp212;
  const Scalar _tmp214 = _tmp213 * _tmp44;
  const Scalar _tmp215 = 4 * _nav_T_target[1];
  const Scalar _tmp216 = _nav_T_src[5] * _tmp35;
  const Scalar _tmp217 = _nav_T_src[6] * _tmp33;
  const Scalar _tmp218 = _nav_T_target[6] * _tmp33;
  const Scalar _tmp219 = _nav_T_target[5] * _tmp35;
  const Scalar _tmp220 =
      -_nav_T_src[4] * _tmp215 + _nav_T_target[4] * _tmp215 + _tmp216 - _tmp217 + _tmp218 - _tmp219;
  const Scalar _tmp221 = (Scalar(1) / Scalar(2)) * _nav_T_target[2];
  const Scalar _tmp222 = _tmp221 * _tmp44;
  const Scalar _tmp223 = (Scalar(1) / Scalar(2)) * _nav_T_target[0];
  const Scalar _tmp224 = _nav_T_src[6] * _tmp49;
  const Scalar _tmp225 = _nav_T_target[6] * _tmp49;
  const Scalar _tmp226 = _nav_T_src[5] * _tmp205 - _nav_T_target[2] * _tmp203;
  const Scalar _tmp227 = -_tmp224 + _tmp225 + _tmp226;
  const Scalar _tmp228 = _tmp227 * _tmp44;
  const Scalar _tmp229 =
      _tmp151 * _tmp207 - _tmp208 * _tmp214 + _tmp220 * _tmp222 - _tmp223 * _tmp228;
  const Scalar _tmp230 = _tmp151 * _tmp44;
  const Scalar _tmp231 =
      -_tmp207 * _tmp221 - _tmp208 * _tmp228 + _tmp214 * _tmp223 + _tmp220 * _tmp230;
  const Scalar _tmp232 =
      _tmp207 * _tmp208 + _tmp213 * _tmp230 - _tmp220 * _tmp223 * _tmp44 - _tmp222 * _tmp227;
  const Scalar _tmp233 = _tmp28 + _tmp30 - 1;
  const Scalar _tmp234 = _tmp233 * _tmp44;
  const Scalar _tmp235 = -_tmp36;
  const Scalar _tmp236 = _tmp235 + _tmp53;
  const Scalar _tmp237 = _tmp236 * _tmp44;
  const Scalar _tmp238 = -_tmp38;
  const Scalar _tmp239 = _tmp238 + _tmp39;
  const Scalar _tmp240 = _tmp239 * _tmp44;
  const Scalar _tmp241 = _tmp54 * _tmp57;
  const Scalar _tmp242 = _tmp48 * _tmp57;
  const Scalar _tmp243 = _tmp52 * _tmp57;
  const Scalar _tmp244 = _nav_T_src[4] * _tmp205;
  const Scalar _tmp245 = _nav_T_target[4] * _tmp205;
  const Scalar _tmp246 = _tmp212 - _tmp244 + _tmp245;
  const Scalar _tmp247 = _tmp223 * _tmp57;
  const Scalar _tmp248 = _nav_T_src[4] * _tmp35 - _nav_T_target[4] * _tmp35;
  const Scalar _tmp249 = _tmp206 + _tmp248;
  const Scalar _tmp250 = _tmp249 * _tmp57;
  const Scalar _tmp251 = 4 * _nav_T_target[0];
  const Scalar _tmp252 = _nav_T_src[4] * _tmp49 - _nav_T_target[4] * _tmp49;
  const Scalar _tmp253 = _tmp57 * (-_nav_T_src[5] * _tmp251 + _nav_T_target[5] * _tmp251 + _tmp217 -
                                   _tmp218 + _tmp252);
  const Scalar _tmp254 = _nav_T_src[4] * _tmp33;
  const Scalar _tmp255 = _nav_T_target[4] * _tmp33;
  const Scalar _tmp256 =
      -_nav_T_src[5] * _tmp209 + _nav_T_target[5] * _tmp209 + _tmp224 - _tmp225 - _tmp254 + _tmp255;
  const Scalar _tmp257 = _tmp256 * _tmp57;
  const Scalar _tmp258 =
      _tmp151 * _tmp253 - _tmp208 * _tmp257 + _tmp221 * _tmp250 - _tmp246 * _tmp247;
  const Scalar _tmp259 = _tmp246 * _tmp57;
  const Scalar _tmp260 =
      _tmp151 * _tmp250 - _tmp208 * _tmp259 - _tmp221 * _tmp253 + _tmp247 * _tmp256;
  const Scalar _tmp261 =
      _tmp151 * _tmp257 + _tmp208 * _tmp253 - _tmp221 * _tmp259 - _tmp247 * _tmp249;
  const Scalar _tmp262 = _tmp235 + _tmp34;
  const Scalar _tmp263 = _tmp262 * _tmp57;
  const Scalar _tmp264 = _tmp46 - 1;
  const Scalar _tmp265 = _tmp264 + _tmp28;
  const Scalar _tmp266 = _tmp265 * _tmp57;
  const Scalar _tmp267 = -_tmp50;
  const Scalar _tmp268 = _tmp267 + _tmp60;
  const Scalar _tmp269 = _tmp268 * _tmp57;
  const Scalar _tmp270 = _tmp62 * _tmp65;
  const Scalar _tmp271 = _tmp61 * _tmp65;
  const Scalar _tmp272 = _tmp59 * _tmp65;
  const Scalar _tmp273 = _tmp65 * (_tmp204 + _tmp248);
  const Scalar _tmp274 = _tmp65 * (-_tmp216 + _tmp219 + _tmp252);
  const Scalar _tmp275 = _tmp65 * (-_nav_T_src[6] * _tmp251 + _nav_T_target[6] * _tmp251 - _tmp210 +
                                   _tmp211 + _tmp244 - _tmp245);
  const Scalar _tmp276 = _tmp65 * (-_nav_T_src[6] * _tmp215 + _nav_T_target[6] * _tmp215 + _tmp226 +
                                   _tmp254 - _tmp255);
  const Scalar _tmp277 =
      _tmp151 * _tmp275 - _tmp208 * _tmp273 + _tmp221 * _tmp276 - _tmp223 * _tmp274;
  const Scalar _tmp278 =
      _tmp151 * _tmp276 - _tmp208 * _tmp274 - _tmp221 * _tmp275 + _tmp223 * _tmp273;
  const Scalar _tmp279 =
      _tmp151 * _tmp273 + _tmp208 * _tmp275 - _tmp221 * _tmp274 - _tmp223 * _tmp276;
  const Scalar _tmp280 = _tmp238 + _tmp40;
  const Scalar _tmp281 = _tmp280 * _tmp65;
  const Scalar _tmp282 = _tmp267 + _tmp51;
  const Scalar _tmp283 = _tmp282 * _tmp65;
  const Scalar _tmp284 = _tmp264 + _tmp30;
  const Scalar _tmp285 = _tmp284 * _tmp65;
  const Scalar _tmp286 = prior_weight / std::pow<Scalar>(_tmp43, 2);
  const Scalar _tmp287 = prior_weight / std::pow<Scalar>(_tmp64, 2);
  const Scalar _tmp288 = prior_weight / std::pow<Scalar>(_tmp56, 2);
  const Scalar _tmp289 = _tmp287 * _tmp62;
  const Scalar _tmp290 = _tmp286 * _tmp32;
  const Scalar _tmp291 = _tmp288 * _tmp54;
  const Scalar _tmp292 = _tmp287 * _tmp59;
  const Scalar _tmp293 = _tmp288 * _tmp48;
  const Scalar _tmp294 = _tmp286 * _tmp41;
  const Scalar _tmp295 = _tmp280 * _tmp287;
  const Scalar _tmp296 = _tmp233 * _tmp286;
  const Scalar _tmp297 = _tmp288 * _tmp52;
  const Scalar _tmp298 = _tmp236 * _tmp286;
  const Scalar _tmp299 = _tmp262 * _tmp288;
  const Scalar _tmp300 = _tmp284 * _tmp287;
  const Scalar _tmp301 = _tmp287 * _tmp63;
  const Scalar _tmp302 = _tmp286 * _tmp42;
  const Scalar _tmp303 = _tmp288 * _tmp55;

  // Output terms (4)
  if (res != nullptr) {
    Eigen::Matrix<Scalar, 6, 1>& _res = (*res);

    _res(0, 0) = _tmp18;
    _res(1, 0) = _tmp23;
    _res(2, 0) = _tmp27;
    _res(3, 0) = _tmp45;
    _res(4, 0) = _tmp58;
    _res(5, 0) = _tmp66;
  }

  if (jacobian != nullptr) {
    Eigen::Matrix<Scalar, 6, 12>& _jacobian = (*jacobian);

    _jacobian(0, 0) = _tmp102;
    _jacobian(0, 1) = _tmp105;
    _jacobian(0, 2) = _tmp106;
    _jacobian(0, 3) = 0;
    _jacobian(0, 4) = 0;
    _jacobian(0, 5) = 0;
    _jacobian(0, 6) = _tmp152;
    _jacobian(0, 7) = _tmp154;
    _jacobian(0, 8) = _tmp155;
    _jacobian(0, 9) = 0;
    _jacobian(0, 10) = 0;
    _jacobian(0, 11) = 0;
    _jacobian(1, 0) = _tmp165;
    _jacobian(1, 1) = _tmp166;
    _jacobian(1, 2) = _tmp167;
    _jacobian(1, 3) = 0;
    _jacobian(1, 4) = 0;
    _jacobian(1, 5) = 0;
    _jacobian(1, 6) = _tmp175;
    _jacobian(1, 7) = _tmp177;
    _jacobian(1, 8) = _tmp178;
    _jacobian(1, 9) = 0;
    _jacobian(1, 10) = 0;
    _jacobian(1, 11) = 0;
    _jacobian(2, 0) = _tmp187;
    _jacobian(2, 1) = _tmp188;
    _jacobian(2, 2) = _tmp189;
    _jacobian(2, 3) = 0;
    _jacobian(2, 4) = 0;
    _jacobian(2, 5) = 0;
    _jacobian(2, 6) = _tmp196;
    _jacobian(2, 7) = _tmp198;
    _jacobian(2, 8) = _tmp199;
    _jacobian(2, 9) = 0;
    _jacobian(2, 10) = 0;
    _jacobian(2, 11) = 0;
    _jacobian(3, 0) = 0;
    _jacobian(3, 1) = 0;
    _jacobian(3, 2) = 0;
    _jacobian(3, 3) = _tmp200;
    _jacobian(3, 4) = _tmp201;
    _jacobian(3, 5) = _tmp202;
    _jacobian(3, 6) = _tmp229;
    _jacobian(3, 7) = _tmp231;
    _jacobian(3, 8) = _tmp232;
    _jacobian(3, 9) = _tmp234;
    _jacobian(3, 10) = _tmp237;
    _jacobian(3, 11) = _tmp240;
    _jacobian(4, 0) = 0;
    _jacobian(4, 1) = 0;
    _jacobian(4, 2) = 0;
    _jacobian(4, 3) = _tmp241;
    _jacobian(4, 4) = _tmp242;
    _jacobian(4, 5) = _tmp243;
    _jacobian(4, 6) = _tmp258;
    _jacobian(4, 7) = _tmp260;
    _jacobian(4, 8) = _tmp261;
    _jacobian(4, 9) = _tmp263;
    _jacobian(4, 10) = _tmp266;
    _jacobian(4, 11) = _tmp269;
    _jacobian(5, 0) = 0;
    _jacobian(5, 1) = 0;
    _jacobian(5, 2) = 0;
    _jacobian(5, 3) = _tmp270;
    _jacobian(5, 4) = _tmp271;
    _jacobian(5, 5) = _tmp272;
    _jacobian(5, 6) = _tmp277;
    _jacobian(5, 7) = _tmp278;
    _jacobian(5, 8) = _tmp279;
    _jacobian(5, 9) = _tmp281;
    _jacobian(5, 10) = _tmp283;
    _jacobian(5, 11) = _tmp285;
  }

  if (hessian != nullptr) {
    Eigen::Matrix<Scalar, 12, 12>& _hessian = (*hessian);

    _hessian(0, 0) =
        std::pow<Scalar>(_tmp102, 2) + std::pow<Scalar>(_tmp165, 2) + std::pow<Scalar>(_tmp187, 2);
    _hessian(0, 1) = 0;
    _hessian(0, 2) = 0;
    _hessian(0, 3) = 0;
    _hessian(0, 4) = 0;
    _hessian(0, 5) = 0;
    _hessian(0, 6) = 0;
    _hessian(0, 7) = 0;
    _hessian(0, 8) = 0;
    _hessian(0, 9) = 0;
    _hessian(0, 10) = 0;
    _hessian(0, 11) = 0;
    _hessian(1, 0) = _tmp102 * _tmp105 + _tmp165 * _tmp166 + _tmp187 * _tmp188;
    _hessian(1, 1) =
        std::pow<Scalar>(_tmp105, 2) + std::pow<Scalar>(_tmp166, 2) + std::pow<Scalar>(_tmp188, 2);
    _hessian(1, 2) = 0;
    _hessian(1, 3) = 0;
    _hessian(1, 4) = 0;
    _hessian(1, 5) = 0;
    _hessian(1, 6) = 0;
    _hessian(1, 7) = 0;
    _hessian(1, 8) = 0;
    _hessian(1, 9) = 0;
    _hessian(1, 10) = 0;
    _hessian(1, 11) = 0;
    _hessian(2, 0) = _tmp102 * _tmp106 + _tmp165 * _tmp167 + _tmp187 * _tmp189;
    _hessian(2, 1) = _tmp105 * _tmp106 + _tmp166 * _tmp167 + _tmp188 * _tmp189;
    _hessian(2, 2) =
        std::pow<Scalar>(_tmp106, 2) + std::pow<Scalar>(_tmp167, 2) + std::pow<Scalar>(_tmp189, 2);
    _hessian(2, 3) = 0;
    _hessian(2, 4) = 0;
    _hessian(2, 5) = 0;
    _hessian(2, 6) = 0;
    _hessian(2, 7) = 0;
    _hessian(2, 8) = 0;
    _hessian(2, 9) = 0;
    _hessian(2, 10) = 0;
    _hessian(2, 11) = 0;
    _hessian(3, 0) = 0;
    _hessian(3, 1) = 0;
    _hessian(3, 2) = 0;
    _hessian(3, 3) = _tmp286 * std::pow<Scalar>(_tmp32, 2) + _tmp287 * std::pow<Scalar>(_tmp62, 2) +
                     _tmp288 * std::pow<Scalar>(_tmp54, 2);
    _hessian(3, 4) = 0;
    _hessian(3, 5) = 0;
    _hessian(3, 6) = 0;
    _hessian(3, 7) = 0;
    _hessian(3, 8) = 0;
    _hessian(3, 9) = 0;
    _hessian(3, 10) = 0;
    _hessian(3, 11) = 0;
    _hessian(4, 0) = 0;
    _hessian(4, 1) = 0;
    _hessian(4, 2) = 0;
    _hessian(4, 3) = _tmp289 * _tmp61 + _tmp290 * _tmp37 + _tmp291 * _tmp48;
    _hessian(4, 4) = _tmp286 * std::pow<Scalar>(_tmp37, 2) + _tmp287 * std::pow<Scalar>(_tmp61, 2) +
                     _tmp288 * std::pow<Scalar>(_tmp48, 2);
    _hessian(4, 5) = 0;
    _hessian(4, 6) = 0;
    _hessian(4, 7) = 0;
    _hessian(4, 8) = 0;
    _hessian(4, 9) = 0;
    _hessian(4, 10) = 0;
    _hessian(4, 11) = 0;
    _hessian(5, 0) = 0;
    _hessian(5, 1) = 0;
    _hessian(5, 2) = 0;
    _hessian(5, 3) = _tmp290 * _tmp41 + _tmp291 * _tmp52 + _tmp292 * _tmp62;
    _hessian(5, 4) = _tmp292 * _tmp61 + _tmp293 * _tmp52 + _tmp294 * _tmp37;
    _hessian(5, 5) = _tmp286 * std::pow<Scalar>(_tmp41, 2) + _tmp287 * std::pow<Scalar>(_tmp59, 2) +
                     _tmp288 * std::pow<Scalar>(_tmp52, 2);
    _hessian(5, 6) = 0;
    _hessian(5, 7) = 0;
    _hessian(5, 8) = 0;
    _hessian(5, 9) = 0;
    _hessian(5, 10) = 0;
    _hessian(5, 11) = 0;
    _hessian(6, 0) = _tmp102 * _tmp152 + _tmp165 * _tmp175 + _tmp187 * _tmp196;
    _hessian(6, 1) = _tmp105 * _tmp152 + _tmp166 * _tmp175 + _tmp188 * _tmp196;
    _hessian(6, 2) = _tmp106 * _tmp152 + _tmp167 * _tmp175 + _tmp189 * _tmp196;
    _hessian(6, 3) = _tmp200 * _tmp229 + _tmp241 * _tmp258 + _tmp270 * _tmp277;
    _hessian(6, 4) = _tmp201 * _tmp229 + _tmp242 * _tmp258 + _tmp271 * _tmp277;
    _hessian(6, 5) = _tmp202 * _tmp229 + _tmp243 * _tmp258 + _tmp272 * _tmp277;
    _hessian(6, 6) = std::pow<Scalar>(_tmp152, 2) + std::pow<Scalar>(_tmp175, 2) +
                     std::pow<Scalar>(_tmp196, 2) + std::pow<Scalar>(_tmp229, 2) +
                     std::pow<Scalar>(_tmp258, 2) + std::pow<Scalar>(_tmp277, 2);
    _hessian(6, 7) = 0;
    _hessian(6, 8) = 0;
    _hessian(6, 9) = 0;
    _hessian(6, 10) = 0;
    _hessian(6, 11) = 0;
    _hessian(7, 0) = _tmp102 * _tmp154 + _tmp165 * _tmp177 + _tmp187 * _tmp198;
    _hessian(7, 1) = _tmp105 * _tmp154 + _tmp166 * _tmp177 + _tmp188 * _tmp198;
    _hessian(7, 2) = _tmp106 * _tmp154 + _tmp167 * _tmp177 + _tmp189 * _tmp198;
    _hessian(7, 3) = _tmp200 * _tmp231 + _tmp241 * _tmp260 + _tmp270 * _tmp278;
    _hessian(7, 4) = _tmp201 * _tmp231 + _tmp242 * _tmp260 + _tmp271 * _tmp278;
    _hessian(7, 5) = _tmp202 * _tmp231 + _tmp243 * _tmp260 + _tmp272 * _tmp278;
    _hessian(7, 6) = _tmp152 * _tmp154 + _tmp175 * _tmp177 + _tmp196 * _tmp198 + _tmp229 * _tmp231 +
                     _tmp258 * _tmp260 + _tmp277 * _tmp278;
    _hessian(7, 7) = std::pow<Scalar>(_tmp154, 2) + std::pow<Scalar>(_tmp177, 2) +
                     std::pow<Scalar>(_tmp198, 2) + std::pow<Scalar>(_tmp231, 2) +
                     std::pow<Scalar>(_tmp260, 2) + std::pow<Scalar>(_tmp278, 2);
    _hessian(7, 8) = 0;
    _hessian(7, 9) = 0;
    _hessian(7, 10) = 0;
    _hessian(7, 11) = 0;
    _hessian(8, 0) = _tmp102 * _tmp155 + _tmp165 * _tmp178 + _tmp187 * _tmp199;
    _hessian(8, 1) = _tmp105 * _tmp155 + _tmp166 * _tmp178 + _tmp188 * _tmp199;
    _hessian(8, 2) = _tmp106 * _tmp155 + _tmp167 * _tmp178 + _tmp189 * _tmp199;
    _hessian(8, 3) = _tmp200 * _tmp232 + _tmp241 * _tmp261 + _tmp270 * _tmp279;
    _hessian(8, 4) = _tmp201 * _tmp232 + _tmp242 * _tmp261 + _tmp271 * _tmp279;
    _hessian(8, 5) = _tmp202 * _tmp232 + _tmp243 * _tmp261 + _tmp272 * _tmp279;
    _hessian(8, 6) = _tmp152 * _tmp155 + _tmp175 * _tmp178 + _tmp196 * _tmp199 + _tmp229 * _tmp232 +
                     _tmp258 * _tmp261 + _tmp277 * _tmp279;
    _hessian(8, 7) = _tmp154 * _tmp155 + _tmp177 * _tmp178 + _tmp198 * _tmp199 + _tmp231 * _tmp232 +
                     _tmp260 * _tmp261 + _tmp278 * _tmp279;
    _hessian(8, 8) = std::pow<Scalar>(_tmp155, 2) + std::pow<Scalar>(_tmp178, 2) +
                     std::pow<Scalar>(_tmp199, 2) + std::pow<Scalar>(_tmp232, 2) +
                     std::pow<Scalar>(_tmp261, 2) + std::pow<Scalar>(_tmp279, 2);
    _hessian(8, 9) = 0;
    _hessian(8, 10) = 0;
    _hessian(8, 11) = 0;
    _hessian(9, 0) = 0;
    _hessian(9, 1) = 0;
    _hessian(9, 2) = 0;
    _hessian(9, 3) = _tmp233 * _tmp290 + _tmp262 * _tmp291 + _tmp295 * _tmp62;
    _hessian(9, 4) = _tmp262 * _tmp293 + _tmp295 * _tmp61 + _tmp296 * _tmp37;
    _hessian(9, 5) = _tmp233 * _tmp294 + _tmp262 * _tmp297 + _tmp280 * _tmp292;
    _hessian(9, 6) = _tmp229 * _tmp234 + _tmp258 * _tmp263 + _tmp277 * _tmp281;
    _hessian(9, 7) = _tmp231 * _tmp234 + _tmp260 * _tmp263 + _tmp278 * _tmp281;
    _hessian(9, 8) = _tmp232 * _tmp234 + _tmp261 * _tmp263 + _tmp279 * _tmp281;
    _hessian(9, 9) = std::pow<Scalar>(_tmp233, 2) * _tmp286 +
                     std::pow<Scalar>(_tmp262, 2) * _tmp288 +
                     std::pow<Scalar>(_tmp280, 2) * _tmp287;
    _hessian(9, 10) = 0;
    _hessian(9, 11) = 0;
    _hessian(10, 0) = 0;
    _hessian(10, 1) = 0;
    _hessian(10, 2) = 0;
    _hessian(10, 3) = _tmp236 * _tmp290 + _tmp265 * _tmp291 + _tmp282 * _tmp289;
    _hessian(10, 4) = _tmp265 * _tmp293 + _tmp282 * _tmp287 * _tmp61 + _tmp298 * _tmp37;
    _hessian(10, 5) = _tmp236 * _tmp294 + _tmp265 * _tmp297 + _tmp282 * _tmp292;
    _hessian(10, 6) = _tmp229 * _tmp237 + _tmp258 * _tmp266 + _tmp277 * _tmp283;
    _hessian(10, 7) = _tmp231 * _tmp237 + _tmp260 * _tmp266 + _tmp278 * _tmp283;
    _hessian(10, 8) = _tmp232 * _tmp237 + _tmp261 * _tmp266 + _tmp279 * _tmp283;
    _hessian(10, 9) = _tmp236 * _tmp296 + _tmp265 * _tmp299 + _tmp282 * _tmp295;
    _hessian(10, 10) = std::pow<Scalar>(_tmp236, 2) * _tmp286 +
                       std::pow<Scalar>(_tmp265, 2) * _tmp288 +
                       std::pow<Scalar>(_tmp282, 2) * _tmp287;
    _hessian(10, 11) = 0;
    _hessian(11, 0) = 0;
    _hessian(11, 1) = 0;
    _hessian(11, 2) = 0;
    _hessian(11, 3) = _tmp239 * _tmp290 + _tmp268 * _tmp291 + _tmp300 * _tmp62;
    _hessian(11, 4) = _tmp239 * _tmp286 * _tmp37 + _tmp268 * _tmp293 + _tmp300 * _tmp61;
    _hessian(11, 5) = _tmp239 * _tmp294 + _tmp268 * _tmp297 + _tmp300 * _tmp59;
    _hessian(11, 6) = _tmp229 * _tmp240 + _tmp258 * _tmp269 + _tmp277 * _tmp285;
    _hessian(11, 7) = _tmp231 * _tmp240 + _tmp260 * _tmp269 + _tmp278 * _tmp285;
    _hessian(11, 8) = _tmp232 * _tmp240 + _tmp261 * _tmp269 + _tmp279 * _tmp285;
    _hessian(11, 9) = _tmp239 * _tmp296 + _tmp268 * _tmp299 + _tmp280 * _tmp300;
    _hessian(11, 10) = _tmp239 * _tmp298 + _tmp265 * _tmp268 * _tmp288 + _tmp282 * _tmp300;
    _hessian(11, 11) = std::pow<Scalar>(_tmp239, 2) * _tmp286 +
                       std::pow<Scalar>(_tmp268, 2) * _tmp288 +
                       std::pow<Scalar>(_tmp284, 2) * _tmp287;
  }

  if (rhs != nullptr) {
    Eigen::Matrix<Scalar, 12, 1>& _rhs = (*rhs);

    _rhs(0, 0) = _tmp102 * _tmp18 + _tmp165 * _tmp23 + _tmp187 * _tmp27;
    _rhs(1, 0) = _tmp105 * _tmp18 + _tmp166 * _tmp23 + _tmp188 * _tmp27;
    _rhs(2, 0) = _tmp106 * _tmp18 + _tmp167 * _tmp23 + _tmp189 * _tmp27;
    _rhs(3, 0) = _tmp291 * _tmp55 + _tmp301 * _tmp62 + _tmp302 * _tmp32;
    _rhs(4, 0) = _tmp301 * _tmp61 + _tmp302 * _tmp37 + _tmp303 * _tmp48;
    _rhs(5, 0) = _tmp292 * _tmp63 + _tmp302 * _tmp41 + _tmp303 * _tmp52;
    _rhs(6, 0) = _tmp152 * _tmp18 + _tmp175 * _tmp23 + _tmp196 * _tmp27 + _tmp229 * _tmp45 +
                 _tmp258 * _tmp58 + _tmp277 * _tmp66;
    _rhs(7, 0) = _tmp154 * _tmp18 + _tmp177 * _tmp23 + _tmp198 * _tmp27 + _tmp231 * _tmp45 +
                 _tmp260 * _tmp58 + _tmp278 * _tmp66;
    _rhs(8, 0) = _tmp155 * _tmp18 + _tmp178 * _tmp23 + _tmp199 * _tmp27 + _tmp232 * _tmp45 +
                 _tmp261 * _tmp58 + _tmp279 * _tmp66;
    _rhs(9, 0) = _tmp233 * _tmp302 + _tmp262 * _tmp303 + _tmp295 * _tmp63;
    _rhs(10, 0) = _tmp236 * _tmp302 + _tmp265 * _tmp303 + _tmp282 * _tmp301;
    _rhs(11, 0) = _tmp239 * _tmp302 + _tmp268 * _tmp303 + _tmp300 * _tmp63;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace custom_factor_generation
