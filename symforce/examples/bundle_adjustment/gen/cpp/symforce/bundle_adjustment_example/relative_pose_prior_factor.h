// -----------------------------------------------------------------------------
// This file was autogenerated by symforce. Do NOT modify by hand.
// -----------------------------------------------------------------------------
#pragma once

#include <Eigen/Dense>
#include <sym/pose3.h>
#include <sym/rot3.h>

namespace bundle_adjustment_example {

/**
 * Return the 6dof residual on the relative pose between the given two views. Compares
 * the relative pose between the optimized poses to the relative pose between the priors.
 *
 * Args:
 *     nav_T_src: Pose of source camera
 *     nav_T_target: Pose of target camera
 *     prior_rotation: The rotation component of the prior
 *     prior_translation: The translation component of the prior
 *     prior_sigmas: Diagonal standard deviations of the prior (i.e. sqrt(diag(cov)))
 *     geo.Matrix: Jacobian for args 0 (nav_T_src), 1 (nav_T_target)
 *     geo.Matrix: Hessian for args 0 (nav_T_src), 1 (nav_T_target)
 *     geo.Matrix: rhs for args 0 (nav_T_src), 1 (nav_T_target)
 */
template <typename Scalar>
void RelativePosePriorFactor(const sym::Pose3<Scalar>& nav_T_src,
                             const sym::Pose3<Scalar>& nav_T_target,
                             const sym::Rot3<Scalar>& prior_rotation,
                             const Eigen::Matrix<Scalar, 3, 1>& prior_translation,
                             const Scalar prior_weight,
                             const Eigen::Matrix<Scalar, 6, 1>& prior_sigmas, const Scalar epsilon,
                             Eigen::Matrix<Scalar, 6, 1>* const res = nullptr,
                             Eigen::Matrix<Scalar, 6, 12>* const jacobian = nullptr,
                             Eigen::Matrix<Scalar, 12, 12>* const hessian = nullptr,
                             Eigen::Matrix<Scalar, 12, 1>* const rhs = nullptr) {
  // Total ops: 767

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _nav_T_src = nav_T_src.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _nav_T_target = nav_T_target.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _prior_rotation = prior_rotation.Data();

  // Intermediate terms (174)
  const Scalar _tmp0 = -_nav_T_src[0] * _nav_T_target[2] + _nav_T_src[1] * _nav_T_target[3] +
                       _nav_T_src[2] * _nav_T_target[0] - _nav_T_src[3] * _nav_T_target[1];
  const Scalar _tmp1 = _nav_T_src[0] * _nav_T_target[1] - _nav_T_src[1] * _nav_T_target[0] +
                       _nav_T_src[2] * _nav_T_target[3] - _nav_T_src[3] * _nav_T_target[2];
  const Scalar _tmp2 = _nav_T_src[0] * _nav_T_target[3] + _nav_T_src[1] * _nav_T_target[2] -
                       _nav_T_src[2] * _nav_T_target[1] - _nav_T_src[3] * _nav_T_target[0];
  const Scalar _tmp3 = _nav_T_src[0] * _nav_T_target[0] + _nav_T_src[1] * _nav_T_target[1] +
                       _nav_T_src[2] * _nav_T_target[2] + _nav_T_src[3] * _nav_T_target[3];
  const Scalar _tmp4 = _prior_rotation[0] * _tmp3 + _prior_rotation[1] * _tmp1 -
                       _prior_rotation[2] * _tmp0 - _prior_rotation[3] * _tmp2;
  const Scalar _tmp5 = 1 - epsilon;
  const Scalar _tmp6 = _prior_rotation[0] * _tmp2 + _prior_rotation[1] * _tmp0 +
                       _prior_rotation[2] * _tmp1 + _prior_rotation[3] * _tmp3;
  const Scalar _tmp7 = std::fabs(_tmp6);
  const Scalar _tmp8 = std::min<Scalar>(_tmp5, _tmp7);
  const Scalar _tmp9 = std::acos(_tmp8);
  const Scalar _tmp10 = 1 - (_tmp8 * _tmp8);
  const Scalar _tmp11 = 2 / std::sqrt(_tmp10);
  const Scalar _tmp12 = _tmp11 * _tmp9;
  const Scalar _tmp13 = std::sqrt(prior_weight);
  const Scalar _tmp14 = (((_tmp6) > 0) - ((_tmp6) < 0));
  const Scalar _tmp15 = _tmp13 * (2 * std::min<Scalar>(0, _tmp14) + 1);
  const Scalar _tmp16 = _tmp15 / (epsilon + prior_sigmas(0, 0));
  const Scalar _tmp17 = _tmp12 * _tmp16;
  const Scalar _tmp18 = _tmp17 * _tmp4;
  const Scalar _tmp19 = -_prior_rotation[0] * _tmp1 + _prior_rotation[1] * _tmp3 +
                        _prior_rotation[2] * _tmp2 - _prior_rotation[3] * _tmp0;
  const Scalar _tmp20 = _tmp15 / (epsilon + prior_sigmas(1, 0));
  const Scalar _tmp21 = _tmp12 * _tmp20;
  const Scalar _tmp22 = _tmp19 * _tmp21;
  const Scalar _tmp23 = _prior_rotation[0] * _tmp0 - _prior_rotation[1] * _tmp2 +
                        _prior_rotation[2] * _tmp3 - _prior_rotation[3] * _tmp1;
  const Scalar _tmp24 = _tmp15 / (epsilon + prior_sigmas(2, 0));
  const Scalar _tmp25 = _tmp24 * _tmp9;
  const Scalar _tmp26 = _tmp11 * _tmp25;
  const Scalar _tmp27 = _tmp23 * _tmp26;
  const Scalar _tmp28 = -_nav_T_src[4] + _nav_T_target[4] + prior_translation(0, 0);
  const Scalar _tmp29 = epsilon + prior_sigmas(3, 0);
  const Scalar _tmp30 = _tmp13 / _tmp29;
  const Scalar _tmp31 = -_nav_T_src[5] + _nav_T_target[5] + prior_translation(1, 0);
  const Scalar _tmp32 = epsilon + prior_sigmas(4, 0);
  const Scalar _tmp33 = _tmp13 / _tmp32;
  const Scalar _tmp34 = -_nav_T_src[6] + _nav_T_target[6] + prior_translation(2, 0);
  const Scalar _tmp35 = epsilon + prior_sigmas(5, 0);
  const Scalar _tmp36 = _tmp13 / _tmp35;
  const Scalar _tmp37 = _tmp16 * _tmp4;
  const Scalar _tmp38 = _nav_T_target[3] * _prior_rotation[3];
  const Scalar _tmp39 = _nav_T_target[2] * _prior_rotation[2];
  const Scalar _tmp40 = _nav_T_target[1] * _prior_rotation[1];
  const Scalar _tmp41 = _nav_T_target[0] * _prior_rotation[0];
  const Scalar _tmp42 = _tmp38 - _tmp39 - _tmp40 - _tmp41;
  const Scalar _tmp43 = _tmp14 * ((((_tmp5 - _tmp7) > 0) - ((_tmp5 - _tmp7) < 0)) + 1);
  const Scalar _tmp44 = _tmp43 / _tmp10;
  const Scalar _tmp45 = _tmp42 * _tmp44;
  const Scalar _tmp46 = _nav_T_target[0] * _prior_rotation[3];
  const Scalar _tmp47 = _nav_T_target[3] * _prior_rotation[0];
  const Scalar _tmp48 = _nav_T_target[1] * _prior_rotation[2];
  const Scalar _tmp49 = _nav_T_target[2] * _prior_rotation[1];
  const Scalar _tmp50 = _tmp46 + _tmp47 + _tmp48 - _tmp49;
  const Scalar _tmp51 = _tmp43 * _tmp8 / (_tmp10 * std::sqrt(_tmp10));
  const Scalar _tmp52 = _tmp51 * _tmp9;
  const Scalar _tmp53 = _tmp37 * _tmp52;
  const Scalar _tmp54 = _tmp17 * _tmp50 - _tmp37 * _tmp45 + _tmp42 * _tmp53;
  const Scalar _tmp55 = (1.0 / 2.0) * _nav_T_src[0];
  const Scalar _tmp56 = _nav_T_target[3] * _prior_rotation[2];
  const Scalar _tmp57 = _nav_T_target[0] * _prior_rotation[1];
  const Scalar _tmp58 = _nav_T_target[2] * _prior_rotation[3];
  const Scalar _tmp59 = _nav_T_target[1] * _prior_rotation[0];
  const Scalar _tmp60 = _tmp56 + _tmp57 + _tmp58 - _tmp59;
  const Scalar _tmp61 = _tmp37 * _tmp44;
  const Scalar _tmp62 = _nav_T_target[2] * _prior_rotation[0];
  const Scalar _tmp63 = _nav_T_target[1] * _prior_rotation[3];
  const Scalar _tmp64 = _nav_T_target[3] * _prior_rotation[1];
  const Scalar _tmp65 = _nav_T_target[0] * _prior_rotation[2];
  const Scalar _tmp66 = _tmp62 + _tmp63 + _tmp64 - _tmp65;
  const Scalar _tmp67 =
      (1.0 / 2.0) * _tmp17 * _tmp66 + (1.0 / 2.0) * _tmp53 * _tmp60 - 1.0 / 2.0 * _tmp60 * _tmp61;
  const Scalar _tmp68 =
      _tmp17 * (-_tmp56 - _tmp57 - _tmp58 + _tmp59) + _tmp53 * _tmp66 - _tmp61 * _tmp66;
  const Scalar _tmp69 = (1.0 / 2.0) * _nav_T_src[2];
  const Scalar _tmp70 = _tmp44 * _tmp50;
  const Scalar _tmp71 = -_tmp38 + _tmp39 + _tmp40 + _tmp41;
  const Scalar _tmp72 = _tmp17 * _tmp71 - _tmp37 * _tmp70 + _tmp50 * _tmp53;
  const Scalar _tmp73 = (1.0 / 2.0) * _nav_T_src[3];
  const Scalar _tmp74 =
      -_nav_T_src[1] * _tmp67 - _tmp54 * _tmp55 + _tmp68 * _tmp69 + _tmp72 * _tmp73;
  const Scalar _tmp75 = (1.0 / 2.0) * _tmp68;
  const Scalar _tmp76 = (1.0 / 2.0) * _nav_T_src[1];
  const Scalar _tmp77 =
      _nav_T_src[0] * _tmp67 + _nav_T_src[3] * _tmp75 - _tmp54 * _tmp76 - _tmp69 * _tmp72;
  const Scalar _tmp78 =
      -_nav_T_src[0] * _tmp75 + _nav_T_src[3] * _tmp67 - _tmp54 * _tmp69 + _tmp72 * _tmp76;
  const Scalar _tmp79 = _nav_T_src[3] * _prior_rotation[1];
  const Scalar _tmp80 = -_tmp79;
  const Scalar _tmp81 = _nav_T_src[2] * _prior_rotation[0];
  const Scalar _tmp82 = _nav_T_src[0] * _prior_rotation[2];
  const Scalar _tmp83 = _nav_T_src[1] * _prior_rotation[3];
  const Scalar _tmp84 = _tmp82 - _tmp83;
  const Scalar _tmp85 = _nav_T_src[3] * _prior_rotation[2];
  const Scalar _tmp86 = -_tmp85;
  const Scalar _tmp87 = _nav_T_src[0] * _prior_rotation[1];
  const Scalar _tmp88 = -_tmp87;
  const Scalar _tmp89 = _nav_T_src[2] * _prior_rotation[3];
  const Scalar _tmp90 = _nav_T_src[1] * _prior_rotation[0];
  const Scalar _tmp91 = _tmp89 + _tmp90;
  const Scalar _tmp92 = _tmp86 + _tmp88 + _tmp91;
  const Scalar _tmp93 = _tmp44 * _tmp92;
  const Scalar _tmp94 = (1.0 / 2.0) * _tmp17 * (_tmp80 + _tmp81 + _tmp84) -
                        1.0 / 2.0 * _tmp37 * _tmp93 + (1.0 / 2.0) * _tmp53 * _tmp92;
  const Scalar _tmp95 = -_tmp81;
  const Scalar _tmp96 = _tmp82 + _tmp83;
  const Scalar _tmp97 = _tmp80 + _tmp95 + _tmp96;
  const Scalar _tmp98 = _tmp51 * _tmp97;
  const Scalar _tmp99 = _tmp9 * _tmp98;
  const Scalar _tmp100 = _tmp17 * (_tmp85 + _tmp87 + _tmp91) + _tmp37 * _tmp99 - _tmp61 * _tmp97;
  const Scalar _tmp101 = (1.0 / 2.0) * _nav_T_target[2];
  const Scalar _tmp102 = _nav_T_src[0] * _prior_rotation[0];
  const Scalar _tmp103 = _nav_T_src[2] * _prior_rotation[2];
  const Scalar _tmp104 = _nav_T_src[3] * _prior_rotation[3];
  const Scalar _tmp105 = _nav_T_src[1] * _prior_rotation[1];
  const Scalar _tmp106 = _tmp104 + _tmp105;
  const Scalar _tmp107 = _tmp102 + _tmp103 + _tmp106;
  const Scalar _tmp108 = _nav_T_src[1] * _prior_rotation[2];
  const Scalar _tmp109 = -_tmp108;
  const Scalar _tmp110 = _nav_T_src[0] * _prior_rotation[3];
  const Scalar _tmp111 = -_tmp110;
  const Scalar _tmp112 = _nav_T_src[2] * _prior_rotation[1];
  const Scalar _tmp113 = _nav_T_src[3] * _prior_rotation[0];
  const Scalar _tmp114 = _tmp112 + _tmp113;
  const Scalar _tmp115 = (1.0 / 2.0) * _tmp107 * _tmp53 - 1.0 / 2.0 * _tmp107 * _tmp61 +
                         (1.0 / 2.0) * _tmp17 * (_tmp109 + _tmp111 + _tmp114);
  const Scalar _tmp116 = _tmp112 - _tmp113;
  const Scalar _tmp117 = _tmp109 + _tmp110 + _tmp116;
  const Scalar _tmp118 = _tmp117 * _tmp44;
  const Scalar _tmp119 = -_tmp103;
  const Scalar _tmp120 = _tmp104 - _tmp105;
  const Scalar _tmp121 =
      _tmp117 * _tmp53 - _tmp118 * _tmp37 + _tmp17 * (_tmp102 + _tmp119 + _tmp120);
  const Scalar _tmp122 = (1.0 / 2.0) * _tmp121;
  const Scalar _tmp123 = -_nav_T_target[0] * _tmp115 - _nav_T_target[1] * _tmp94 +
                         _nav_T_target[3] * _tmp122 + _tmp100 * _tmp101;
  const Scalar _tmp124 = _nav_T_target[0] * _tmp94 - _nav_T_target[1] * _tmp115 +
                         (1.0 / 2.0) * _nav_T_target[3] * _tmp100 - _tmp101 * _tmp121;
  const Scalar _tmp125 = (1.0 / 2.0) * _nav_T_target[0];
  const Scalar _tmp126 = _nav_T_target[1] * _tmp122 - _nav_T_target[2] * _tmp115 +
                         _nav_T_target[3] * _tmp94 - _tmp100 * _tmp125;
  const Scalar _tmp127 = _tmp19 * _tmp20;
  const Scalar _tmp128 = _tmp127 * _tmp44;
  const Scalar _tmp129 = _tmp127 * _tmp52;
  const Scalar _tmp130 = -_tmp128 * _tmp42 + _tmp129 * _tmp42 + _tmp21 * _tmp66;
  const Scalar _tmp131 = (1.0 / 2.0) * _tmp130;
  const Scalar _tmp132 =
      -_tmp128 * _tmp60 + _tmp129 * _tmp60 + _tmp21 * (-_tmp46 - _tmp47 - _tmp48 + _tmp49);
  const Scalar _tmp133 = -_tmp128 * _tmp66 + _tmp129 * _tmp66 + _tmp21 * _tmp71;
  const Scalar _tmp134 = -_tmp127 * _tmp70 + _tmp129 * _tmp50 + _tmp21 * _tmp60;
  const Scalar _tmp135 =
      -_nav_T_src[0] * _tmp131 - _tmp132 * _tmp76 + _tmp133 * _tmp69 + _tmp134 * _tmp73;
  const Scalar _tmp136 =
      -_nav_T_src[1] * _tmp131 + _tmp132 * _tmp55 + _tmp133 * _tmp73 - _tmp134 * _tmp69;
  const Scalar _tmp137 = -_tmp130 * _tmp69 + _tmp132 * _tmp73 - _tmp133 * _tmp55 + _tmp134 * _tmp76;
  const Scalar _tmp138 = -1.0 / 2.0 * _tmp107 * _tmp128 + (1.0 / 2.0) * _tmp107 * _tmp129 +
                         (1.0 / 2.0) * _tmp21 * (_tmp79 + _tmp84 + _tmp95);
  const Scalar _tmp139 = -1.0 / 2.0 * _tmp128 * _tmp92 + (1.0 / 2.0) * _tmp129 * _tmp92 +
                         (1.0 / 2.0) * _tmp21 * (_tmp108 + _tmp110 + _tmp114);
  const Scalar _tmp140 = -_tmp102;
  const Scalar _tmp141 = (1.0 / 2.0) * _tmp127 * _tmp99 - 1.0 / 2.0 * _tmp128 * _tmp97 +
                         (1.0 / 2.0) * _tmp21 * (_tmp106 + _tmp119 + _tmp140);
  const Scalar _tmp142 = -_tmp89 + _tmp90;
  const Scalar _tmp143 = (1.0 / 2.0) * _tmp117 * _tmp129 - 1.0 / 2.0 * _tmp118 * _tmp127 +
                         (1.0 / 2.0) * _tmp21 * (_tmp142 + _tmp86 + _tmp87);
  const Scalar _tmp144 = -_nav_T_target[0] * _tmp138 - _nav_T_target[1] * _tmp139 +
                         _nav_T_target[2] * _tmp141 + _nav_T_target[3] * _tmp143;
  const Scalar _tmp145 = _nav_T_target[0] * _tmp139 - _nav_T_target[1] * _tmp138 -
                         _nav_T_target[2] * _tmp143 + _nav_T_target[3] * _tmp141;
  const Scalar _tmp146 = -_nav_T_target[0] * _tmp141 + _nav_T_target[1] * _tmp143 -
                         _nav_T_target[2] * _tmp138 + _nav_T_target[3] * _tmp139;
  const Scalar _tmp147 = _tmp23 * _tmp24;
  const Scalar _tmp148 = _tmp23 * _tmp25;
  const Scalar _tmp149 = _tmp148 * _tmp51;
  const Scalar _tmp150 = -_tmp147 * _tmp45 + _tmp149 * _tmp42 + _tmp26 * _tmp60;
  const Scalar _tmp151 = (1.0 / 2.0) * _tmp150;
  const Scalar _tmp152 = _tmp147 * _tmp44;
  const Scalar _tmp153 = _tmp149 * _tmp66 - _tmp152 * _tmp66 + _tmp26 * _tmp50;
  const Scalar _tmp154 =
      (1.0 / 2.0) * _tmp149 * _tmp60 - 1.0 / 2.0 * _tmp152 * _tmp60 + (1.0 / 2.0) * _tmp26 * _tmp71;
  const Scalar _tmp155 =
      -_tmp147 * _tmp70 + _tmp149 * _tmp50 + _tmp26 * (-_tmp62 - _tmp63 - _tmp64 + _tmp65);
  const Scalar _tmp156 = (1.0 / 2.0) * _tmp155;
  const Scalar _tmp157 = -_nav_T_src[0] * _tmp151 - _nav_T_src[1] * _tmp154 +
                         _nav_T_src[3] * _tmp156 + _tmp153 * _tmp69;
  const Scalar _tmp158 = (1.0 / 2.0) * _tmp153;
  const Scalar _tmp159 = _nav_T_src[0] * _tmp154 - _nav_T_src[1] * _tmp151 +
                         _nav_T_src[3] * _tmp158 - _tmp155 * _tmp69;
  const Scalar _tmp160 = -_nav_T_src[0] * _tmp158 + _nav_T_src[1] * _tmp156 +
                         _nav_T_src[3] * _tmp154 - _tmp150 * _tmp69;
  const Scalar _tmp161 = -1.0 / 2.0 * _tmp147 * _tmp93 + (1.0 / 2.0) * _tmp149 * _tmp92 +
                         (1.0 / 2.0) * _tmp26 * (_tmp103 + _tmp120 + _tmp140);
  const Scalar _tmp162 =
      _tmp107 * _tmp149 - _tmp107 * _tmp152 + _tmp26 * (_tmp142 + _tmp85 + _tmp88);
  const Scalar _tmp163 = (1.0 / 2.0) * _tmp148 * _tmp98 - 1.0 / 2.0 * _tmp152 * _tmp97 +
                         (1.0 / 2.0) * _tmp26 * (_tmp108 + _tmp111 + _tmp116);
  const Scalar _tmp164 = (1.0 / 2.0) * _tmp117 * _tmp149 - 1.0 / 2.0 * _tmp118 * _tmp147 +
                         (1.0 / 2.0) * _tmp26 * (_tmp79 + _tmp81 + _tmp96);
  const Scalar _tmp165 = -_nav_T_target[1] * _tmp161 + _nav_T_target[2] * _tmp163 +
                         _nav_T_target[3] * _tmp164 - _tmp125 * _tmp162;
  const Scalar _tmp166 = _nav_T_target[0] * _tmp161 - 1.0 / 2.0 * _nav_T_target[1] * _tmp162 -
                         _nav_T_target[2] * _tmp164 + _nav_T_target[3] * _tmp163;
  const Scalar _tmp167 = -_nav_T_target[0] * _tmp163 + _nav_T_target[1] * _tmp164 +
                         _nav_T_target[3] * _tmp161 - _tmp101 * _tmp162;
  const Scalar _tmp168 = prior_weight / (_tmp29 * _tmp29);
  const Scalar _tmp169 = prior_weight / (_tmp32 * _tmp32);
  const Scalar _tmp170 = prior_weight / (_tmp35 * _tmp35);
  const Scalar _tmp171 = _tmp168 * _tmp28;
  const Scalar _tmp172 = _tmp169 * _tmp31;
  const Scalar _tmp173 = _tmp170 * _tmp34;

  // Output terms (4)
  if (res != nullptr) {
    Eigen::Matrix<Scalar, 6, 1>& _res = (*res);

    _res(0, 0) = _tmp18;
    _res(1, 0) = _tmp22;
    _res(2, 0) = _tmp27;
    _res(3, 0) = _tmp28 * _tmp30;
    _res(4, 0) = _tmp31 * _tmp33;
    _res(5, 0) = _tmp34 * _tmp36;
  }

  if (jacobian != nullptr) {
    Eigen::Matrix<Scalar, 6, 12>& _jacobian = (*jacobian);

    _jacobian(0, 0) = _tmp74;
    _jacobian(0, 1) = _tmp77;
    _jacobian(0, 2) = _tmp78;
    _jacobian(0, 3) = 0;
    _jacobian(0, 4) = 0;
    _jacobian(0, 5) = 0;
    _jacobian(0, 6) = _tmp123;
    _jacobian(0, 7) = _tmp124;
    _jacobian(0, 8) = _tmp126;
    _jacobian(0, 9) = 0;
    _jacobian(0, 10) = 0;
    _jacobian(0, 11) = 0;
    _jacobian(1, 0) = _tmp135;
    _jacobian(1, 1) = _tmp136;
    _jacobian(1, 2) = _tmp137;
    _jacobian(1, 3) = 0;
    _jacobian(1, 4) = 0;
    _jacobian(1, 5) = 0;
    _jacobian(1, 6) = _tmp144;
    _jacobian(1, 7) = _tmp145;
    _jacobian(1, 8) = _tmp146;
    _jacobian(1, 9) = 0;
    _jacobian(1, 10) = 0;
    _jacobian(1, 11) = 0;
    _jacobian(2, 0) = _tmp157;
    _jacobian(2, 1) = _tmp159;
    _jacobian(2, 2) = _tmp160;
    _jacobian(2, 3) = 0;
    _jacobian(2, 4) = 0;
    _jacobian(2, 5) = 0;
    _jacobian(2, 6) = _tmp165;
    _jacobian(2, 7) = _tmp166;
    _jacobian(2, 8) = _tmp167;
    _jacobian(2, 9) = 0;
    _jacobian(2, 10) = 0;
    _jacobian(2, 11) = 0;
    _jacobian(3, 0) = 0;
    _jacobian(3, 1) = 0;
    _jacobian(3, 2) = 0;
    _jacobian(3, 3) = -_tmp30;
    _jacobian(3, 4) = 0;
    _jacobian(3, 5) = 0;
    _jacobian(3, 6) = 0;
    _jacobian(3, 7) = 0;
    _jacobian(3, 8) = 0;
    _jacobian(3, 9) = _tmp30;
    _jacobian(3, 10) = 0;
    _jacobian(3, 11) = 0;
    _jacobian(4, 0) = 0;
    _jacobian(4, 1) = 0;
    _jacobian(4, 2) = 0;
    _jacobian(4, 3) = 0;
    _jacobian(4, 4) = -_tmp33;
    _jacobian(4, 5) = 0;
    _jacobian(4, 6) = 0;
    _jacobian(4, 7) = 0;
    _jacobian(4, 8) = 0;
    _jacobian(4, 9) = 0;
    _jacobian(4, 10) = _tmp33;
    _jacobian(4, 11) = 0;
    _jacobian(5, 0) = 0;
    _jacobian(5, 1) = 0;
    _jacobian(5, 2) = 0;
    _jacobian(5, 3) = 0;
    _jacobian(5, 4) = 0;
    _jacobian(5, 5) = -_tmp36;
    _jacobian(5, 6) = 0;
    _jacobian(5, 7) = 0;
    _jacobian(5, 8) = 0;
    _jacobian(5, 9) = 0;
    _jacobian(5, 10) = 0;
    _jacobian(5, 11) = _tmp36;
  }

  if (hessian != nullptr) {
    Eigen::Matrix<Scalar, 12, 12>& _hessian = (*hessian);

    _hessian(0, 0) = (_tmp135 * _tmp135) + (_tmp157 * _tmp157) + (_tmp74 * _tmp74);
    _hessian(0, 1) = 0;
    _hessian(0, 2) = 0;
    _hessian(0, 3) = 0;
    _hessian(0, 4) = 0;
    _hessian(0, 5) = 0;
    _hessian(0, 6) = 0;
    _hessian(0, 7) = 0;
    _hessian(0, 8) = 0;
    _hessian(0, 9) = 0;
    _hessian(0, 10) = 0;
    _hessian(0, 11) = 0;
    _hessian(1, 0) = _tmp135 * _tmp136 + _tmp157 * _tmp159 + _tmp74 * _tmp77;
    _hessian(1, 1) = (_tmp136 * _tmp136) + (_tmp159 * _tmp159) + (_tmp77 * _tmp77);
    _hessian(1, 2) = 0;
    _hessian(1, 3) = 0;
    _hessian(1, 4) = 0;
    _hessian(1, 5) = 0;
    _hessian(1, 6) = 0;
    _hessian(1, 7) = 0;
    _hessian(1, 8) = 0;
    _hessian(1, 9) = 0;
    _hessian(1, 10) = 0;
    _hessian(1, 11) = 0;
    _hessian(2, 0) = _tmp135 * _tmp137 + _tmp157 * _tmp160 + _tmp74 * _tmp78;
    _hessian(2, 1) = _tmp136 * _tmp137 + _tmp159 * _tmp160 + _tmp77 * _tmp78;
    _hessian(2, 2) = (_tmp137 * _tmp137) + (_tmp160 * _tmp160) + (_tmp78 * _tmp78);
    _hessian(2, 3) = 0;
    _hessian(2, 4) = 0;
    _hessian(2, 5) = 0;
    _hessian(2, 6) = 0;
    _hessian(2, 7) = 0;
    _hessian(2, 8) = 0;
    _hessian(2, 9) = 0;
    _hessian(2, 10) = 0;
    _hessian(2, 11) = 0;
    _hessian(3, 0) = 0;
    _hessian(3, 1) = 0;
    _hessian(3, 2) = 0;
    _hessian(3, 3) = _tmp168;
    _hessian(3, 4) = 0;
    _hessian(3, 5) = 0;
    _hessian(3, 6) = 0;
    _hessian(3, 7) = 0;
    _hessian(3, 8) = 0;
    _hessian(3, 9) = 0;
    _hessian(3, 10) = 0;
    _hessian(3, 11) = 0;
    _hessian(4, 0) = 0;
    _hessian(4, 1) = 0;
    _hessian(4, 2) = 0;
    _hessian(4, 3) = 0;
    _hessian(4, 4) = _tmp169;
    _hessian(4, 5) = 0;
    _hessian(4, 6) = 0;
    _hessian(4, 7) = 0;
    _hessian(4, 8) = 0;
    _hessian(4, 9) = 0;
    _hessian(4, 10) = 0;
    _hessian(4, 11) = 0;
    _hessian(5, 0) = 0;
    _hessian(5, 1) = 0;
    _hessian(5, 2) = 0;
    _hessian(5, 3) = 0;
    _hessian(5, 4) = 0;
    _hessian(5, 5) = _tmp170;
    _hessian(5, 6) = 0;
    _hessian(5, 7) = 0;
    _hessian(5, 8) = 0;
    _hessian(5, 9) = 0;
    _hessian(5, 10) = 0;
    _hessian(5, 11) = 0;
    _hessian(6, 0) = _tmp123 * _tmp74 + _tmp135 * _tmp144 + _tmp157 * _tmp165;
    _hessian(6, 1) = _tmp123 * _tmp77 + _tmp136 * _tmp144 + _tmp159 * _tmp165;
    _hessian(6, 2) = _tmp123 * _tmp78 + _tmp137 * _tmp144 + _tmp160 * _tmp165;
    _hessian(6, 3) = 0;
    _hessian(6, 4) = 0;
    _hessian(6, 5) = 0;
    _hessian(6, 6) = (_tmp123 * _tmp123) + (_tmp144 * _tmp144) + (_tmp165 * _tmp165);
    _hessian(6, 7) = 0;
    _hessian(6, 8) = 0;
    _hessian(6, 9) = 0;
    _hessian(6, 10) = 0;
    _hessian(6, 11) = 0;
    _hessian(7, 0) = _tmp124 * _tmp74 + _tmp135 * _tmp145 + _tmp157 * _tmp166;
    _hessian(7, 1) = _tmp124 * _tmp77 + _tmp136 * _tmp145 + _tmp159 * _tmp166;
    _hessian(7, 2) = _tmp124 * _tmp78 + _tmp137 * _tmp145 + _tmp160 * _tmp166;
    _hessian(7, 3) = 0;
    _hessian(7, 4) = 0;
    _hessian(7, 5) = 0;
    _hessian(7, 6) = _tmp123 * _tmp124 + _tmp144 * _tmp145 + _tmp165 * _tmp166;
    _hessian(7, 7) = (_tmp124 * _tmp124) + (_tmp145 * _tmp145) + (_tmp166 * _tmp166);
    _hessian(7, 8) = 0;
    _hessian(7, 9) = 0;
    _hessian(7, 10) = 0;
    _hessian(7, 11) = 0;
    _hessian(8, 0) = _tmp126 * _tmp74 + _tmp135 * _tmp146 + _tmp157 * _tmp167;
    _hessian(8, 1) = _tmp126 * _tmp77 + _tmp136 * _tmp146 + _tmp159 * _tmp167;
    _hessian(8, 2) = _tmp126 * _tmp78 + _tmp137 * _tmp146 + _tmp160 * _tmp167;
    _hessian(8, 3) = 0;
    _hessian(8, 4) = 0;
    _hessian(8, 5) = 0;
    _hessian(8, 6) = _tmp123 * _tmp126 + _tmp144 * _tmp146 + _tmp165 * _tmp167;
    _hessian(8, 7) = _tmp124 * _tmp126 + _tmp145 * _tmp146 + _tmp166 * _tmp167;
    _hessian(8, 8) = (_tmp126 * _tmp126) + (_tmp146 * _tmp146) + (_tmp167 * _tmp167);
    _hessian(8, 9) = 0;
    _hessian(8, 10) = 0;
    _hessian(8, 11) = 0;
    _hessian(9, 0) = 0;
    _hessian(9, 1) = 0;
    _hessian(9, 2) = 0;
    _hessian(9, 3) = -_tmp168;
    _hessian(9, 4) = 0;
    _hessian(9, 5) = 0;
    _hessian(9, 6) = 0;
    _hessian(9, 7) = 0;
    _hessian(9, 8) = 0;
    _hessian(9, 9) = _tmp168;
    _hessian(9, 10) = 0;
    _hessian(9, 11) = 0;
    _hessian(10, 0) = 0;
    _hessian(10, 1) = 0;
    _hessian(10, 2) = 0;
    _hessian(10, 3) = 0;
    _hessian(10, 4) = -_tmp169;
    _hessian(10, 5) = 0;
    _hessian(10, 6) = 0;
    _hessian(10, 7) = 0;
    _hessian(10, 8) = 0;
    _hessian(10, 9) = 0;
    _hessian(10, 10) = _tmp169;
    _hessian(10, 11) = 0;
    _hessian(11, 0) = 0;
    _hessian(11, 1) = 0;
    _hessian(11, 2) = 0;
    _hessian(11, 3) = 0;
    _hessian(11, 4) = 0;
    _hessian(11, 5) = -_tmp170;
    _hessian(11, 6) = 0;
    _hessian(11, 7) = 0;
    _hessian(11, 8) = 0;
    _hessian(11, 9) = 0;
    _hessian(11, 10) = 0;
    _hessian(11, 11) = _tmp170;
  }

  if (rhs != nullptr) {
    Eigen::Matrix<Scalar, 12, 1>& _rhs = (*rhs);

    _rhs(0, 0) = _tmp135 * _tmp22 + _tmp157 * _tmp27 + _tmp18 * _tmp74;
    _rhs(1, 0) = _tmp136 * _tmp22 + _tmp159 * _tmp27 + _tmp18 * _tmp77;
    _rhs(2, 0) = _tmp137 * _tmp22 + _tmp160 * _tmp27 + _tmp18 * _tmp78;
    _rhs(3, 0) = -_tmp171;
    _rhs(4, 0) = -_tmp172;
    _rhs(5, 0) = -_tmp173;
    _rhs(6, 0) = _tmp123 * _tmp18 + _tmp144 * _tmp22 + _tmp165 * _tmp27;
    _rhs(7, 0) = _tmp124 * _tmp18 + _tmp145 * _tmp22 + _tmp166 * _tmp27;
    _rhs(8, 0) = _tmp126 * _tmp18 + _tmp146 * _tmp22 + _tmp167 * _tmp27;
    _rhs(9, 0) = _tmp171;
    _rhs(10, 0) = _tmp172;
    _rhs(11, 0) = _tmp173;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace bundle_adjustment_example
