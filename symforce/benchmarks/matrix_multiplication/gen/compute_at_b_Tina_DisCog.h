// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     cpp_templates/function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once


#include <Eigen/Dense>



namespace sym {


/**
* This function was autogenerated. Do not modify by hand.
*
* Args:
*     x0: Scalar
*     x1: Scalar
*
* Outputs:
*     result: Matrix11_11
*
*/
template <typename Scalar>
__attribute__((noinline))
Eigen::Matrix<Scalar, 11, 11> ComputeAtBTinaDiscog(const Scalar x0, const Scalar x1) {

    // Total ops: 242

    // Input arrays

    // Intermediate terms (61)
    const Scalar _tmp0 = x1 + 4;
    const Scalar _tmp1 = _tmp0*x1;
    const Scalar _tmp2 = 2*x1;
    const Scalar _tmp3 = _tmp2 - 8;
    const Scalar _tmp4 = 4*x1;
    const Scalar _tmp5 = _tmp2 + 2;
    const Scalar _tmp6 = -_tmp5;
    const Scalar _tmp7 = 2*x0;
    const Scalar _tmp8 = _tmp7 - 4;
    const Scalar _tmp9 = _tmp2 - 4;
    const Scalar _tmp10 = 3*x1;
    const Scalar _tmp11 = -_tmp10;
    const Scalar _tmp12 = Scalar(1.0) / (x0);
    const Scalar _tmp13 = x0 + 2;
    const Scalar _tmp14 = Scalar(1.0) / (x1);
    const Scalar _tmp15 = _tmp14 + 1;
    const Scalar _tmp16 = _tmp13 - x1;
    const Scalar _tmp17 = _tmp2*x0;
    const Scalar _tmp18 = _tmp16*_tmp17;
    const Scalar _tmp19 = Scalar(1.0)*x1;
    const Scalar _tmp20 = std::pow(x0, Scalar(2));
    const Scalar _tmp21 = 2/_tmp20;
    const Scalar _tmp22 = -_tmp21;
    const Scalar _tmp23 = _tmp13*x0;
    const Scalar _tmp24 = _tmp23 - x0;
    const Scalar _tmp25 = 3*x0;
    const Scalar _tmp26 = -_tmp2;
    const Scalar _tmp27 = x0 - 1;
    const Scalar _tmp28 = x1 - 3;
    const Scalar _tmp29 = x0 + x1;
    const Scalar _tmp30 = _tmp14*_tmp29;
    const Scalar _tmp31 = 2*_tmp14;
    const Scalar _tmp32 = _tmp2 + 1;
    const Scalar _tmp33 = std::pow(x1, Scalar(2));
    const Scalar _tmp34 = 4*x0;
    const Scalar _tmp35 = -_tmp17;
    const Scalar _tmp36 = Scalar(1.0) / (_tmp13);
    const Scalar _tmp37 = 2*_tmp20;
    const Scalar _tmp38 = _tmp36*x0;
    const Scalar _tmp39 = -_tmp38;
    const Scalar _tmp40 = x0*x1;
    const Scalar _tmp41 = _tmp40 + x0;
    const Scalar _tmp42 = 8*x1;
    const Scalar _tmp43 = 2*_tmp12;
    const Scalar _tmp44 = -_tmp7;
    const Scalar _tmp45 = _tmp44 + 4;
    const Scalar _tmp46 = x1 - 2;
    const Scalar _tmp47 = Scalar(1.0) / (_tmp46);
    const Scalar _tmp48 = x1 - 4;
    const Scalar _tmp49 = _tmp33*_tmp34;
    const Scalar _tmp50 = x1 + 1;
    const Scalar _tmp51 = -_tmp23*_tmp50;
    const Scalar _tmp52 = _tmp13*_tmp7;
    const Scalar _tmp53 = x0 - 2;
    const Scalar _tmp54 = -_tmp50*_tmp53;
    const Scalar _tmp55 = _tmp17*_tmp50;
    const Scalar _tmp56 = _tmp20*_tmp50;
    const Scalar _tmp57 = _tmp29 + 1;
    const Scalar _tmp58 = (Scalar(1)/Scalar(2))*_tmp40;
    const Scalar _tmp59 = Scalar(4.0)*x0;
    const Scalar _tmp60 = _tmp7 + 2;

    // Output terms (1)
    Eigen::Matrix<Scalar, 11, 11> _result;


    _result(0, 0) = _tmp1 + _tmp3;
    _result(0, 1) = -_tmp4 - 10;
    _result(0, 2) = Scalar(1.0)*_tmp1;
    _result(0, 3) = 4;
    _result(0, 4) = _tmp0*x0 - 2;
    _result(0, 5) = 6;
    _result(0, 6) = _tmp6;
    _result(0, 7) = -_tmp8;
    _result(0, 8) = 0;
    _result(0, 9) = _tmp9;
    _result(0, 10) = 0;
    _result(1, 0) = _tmp2 - 12;
    _result(1, 1) = _tmp11 + 4*_tmp12 - _tmp13*_tmp15 + _tmp18 + x0 + 4;
    _result(1, 2) = -Scalar(0.5)*_tmp14 - _tmp19 - x0 + Scalar(0.5);
    _result(1, 3) = _tmp0 + _tmp22 + _tmp24;
    _result(1, 4) = -_tmp25 - _tmp26 - 7;
    _result(1, 5) = _tmp27*_tmp28 + _tmp7 + 13;
    _result(1, 6) = -_tmp10 + _tmp15*x0 - _tmp18 - _tmp22 - 3;
    _result(1, 7) = _tmp13*x1 - _tmp14*_tmp16 - _tmp25 + 6;
    _result(1, 8) = 0;
    _result(1, 9) = -_tmp11 - _tmp27*_tmp30 - 6;
    _result(1, 10) = -_tmp21*_tmp32 - _tmp31 - 2;
    _result(2, 0) = -2*_tmp33;
    _result(2, 1) = -_tmp34 + _tmp4 - 7;
    _result(2, 2) = -Scalar(2.0)*_tmp33 + Scalar(-1.0);
    _result(2, 3) = 0;
    _result(2, 4) = _tmp35;
    _result(2, 5) = -_tmp28;
    _result(2, 6) = _tmp34;
    _result(2, 7) = 0;
    _result(2, 8) = 0;
    _result(2, 9) = _tmp30;
    _result(2, 10) = -8;
    _result(3, 0) = -_tmp3;
    _result(3, 1) = _tmp35 - _tmp36*_tmp37 + _tmp5 + _tmp7;
    _result(3, 2) = 0;
    _result(3, 3) = -8*_tmp20 - _tmp39 + _tmp41*x0 - 4;
    _result(3, 4) = 6;
    _result(3, 5) = _tmp40 + _tmp7 - 12*x1 - 6;
    _result(3, 6) = _tmp39 + _tmp4*x0 + _tmp5;
    _result(3, 7) = -_tmp17 + _tmp31 + _tmp41*x1 - _tmp42 - _tmp43 - _tmp45;
    _result(3, 8) = 8*_tmp47*x0;
    _result(3, 9) = -_tmp9;
    _result(3, 10) = -4*_tmp23 + _tmp32*_tmp38;
    _result(4, 0) = _tmp23*_tmp48 + x1;
    _result(4, 1) = _tmp49 + _tmp51 - 2;
    _result(4, 2) = _tmp19;
    _result(4, 3) = _tmp26 + _tmp52;
    _result(4, 4) = -_tmp24 - _tmp4;
    _result(4, 5) = 3*_tmp23;
    _result(4, 6) = -_tmp49 + _tmp51;
    _result(4, 7) = -_tmp23*_tmp53 - 2;
    _result(4, 8) = 0;
    _result(4, 9) = _tmp23*_tmp46;
    _result(4, 10) = 0;
    _result(5, 0) = _tmp48*_tmp53;
    _result(5, 1) = _tmp54 - 6;
    _result(5, 2) = -2;
    _result(5, 3) = -2;
    _result(5, 4) = -_tmp53;
    _result(5, 5) = _tmp40 + 5*x1 - 10;
    _result(5, 6) = _tmp54;
    _result(5, 7) = _tmp43 - std::pow(_tmp53, Scalar(2)) - _tmp8;
    _result(5, 8) = 0;
    _result(5, 9) = -_tmp29*_tmp31 + _tmp46*_tmp53;
    _result(5, 10) = 0;
    _result(6, 0) = 12 - _tmp10;
    _result(6, 1) = -_tmp11 - _tmp55 + 10*x0 - 1;
    _result(6, 2) = Scalar(-1.0);
    _result(6, 3) = _tmp37 + x1 - 9;
    _result(6, 4) = _tmp2 + 5;
    _result(6, 5) = _tmp34 - 9;
    _result(6, 6) = _tmp10 + _tmp55 + _tmp7 + 19;
    _result(6, 7) = _tmp14*_tmp50 + _tmp17 + _tmp25 - 30;
    _result(6, 8) = 0;
    _result(6, 9) = 6 - _tmp10;
    _result(6, 10) = -_tmp42 - 8;
    _result(7, 0) = -_tmp20*_tmp48;
    _result(7, 1) = _tmp17 - _tmp23 + _tmp56;
    _result(7, 2) = -Scalar(0.5)*x0;
    _result(7, 3) = -_tmp13 - x1;
    _result(7, 4) = _tmp20 - 2;
    _result(7, 5) = -3*_tmp20 - _tmp57*_tmp58 + 6;
    _result(7, 6) = _tmp20 + _tmp35 + _tmp56 + 6;
    _result(7, 7) = -_tmp12*_tmp57 - _tmp14 + _tmp20*_tmp53 + _tmp58 - 8;
    _result(7, 8) = -_tmp47*_tmp7;
    _result(7, 9) = -_tmp20*_tmp46;
    _result(7, 10) = _tmp23 + _tmp44;
    _result(8, 0) = 0;
    _result(8, 1) = 0;
    _result(8, 2) = 0;
    _result(8, 3) = -_tmp59;
    _result(8, 4) = 0;
    _result(8, 5) = 0;
    _result(8, 6) = 0;
    _result(8, 7) = -_tmp19;
    _result(8, 8) = Scalar(4.0)*_tmp47;
    _result(8, 9) = 0;
    _result(8, 10) = -Scalar(2.0)*x0 + Scalar(-4.0);
    _result(9, 0) = _tmp3;
    _result(9, 1) = 6 - _tmp2;
    _result(9, 2) = 4;
    _result(9, 3) = _tmp7 + 4;
    _result(9, 4) = -2;
    _result(9, 5) = 22 - _tmp4;
    _result(9, 6) = _tmp6;
    _result(9, 7) = _tmp2 + _tmp45;
    _result(9, 8) = 0;
    _result(9, 9) = 4*_tmp30 + _tmp9;
    _result(9, 10) = 0;
    _result(10, 0) = 0;
    _result(10, 1) = -_tmp52 - _tmp60*_tmp7;
    _result(10, 2) = -Scalar(1.0)*x0;
    _result(10, 3) = _tmp59 + 2;
    _result(10, 4) = 0;
    _result(10, 5) = 0;
    _result(10, 6) = _tmp37 - _tmp60;
    _result(10, 7) = Scalar(0.5)*x1;
    _result(10, 8) = -Scalar(2.0)*_tmp47;
    _result(10, 9) = 0;
    _result(10, 10) = _tmp32*_tmp60 - Scalar(3.0)*x0 + Scalar(2.0);

    return _result;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
