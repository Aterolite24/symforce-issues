// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     cpp_templates/function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once


#include <Eigen/Dense>
#include <Eigen/Sparse>



namespace sym {


/**
* This function was autogenerated. Do not modify by hand.
*
* Args:
*     x0: Scalar
*     x1: Scalar
*
* Outputs:
*     result: Matrix36_84
*
*/
template <typename Scalar>
Eigen::SparseMatrix<Scalar> ComputeBBibd93(const Scalar x0, const Scalar x1) {

    // Total ops: 71

    // Input arrays

    // Intermediate terms (35)
    const Scalar _tmp0 = -x1;
    const Scalar _tmp1 = x0 + 1;
    const Scalar _tmp2 = -_tmp1;
    const Scalar _tmp3 = x0*x1;
    const Scalar _tmp4 = -_tmp3;
    const Scalar _tmp5 = (Scalar(1)/Scalar(2))*x1;
    const Scalar _tmp6 = 2*x1;
    const Scalar _tmp7 = -_tmp6;
    const Scalar _tmp8 = x1 - 3;
    const Scalar _tmp9 = x0 + x1;
    const Scalar _tmp10 = x1 - 2;
    const Scalar _tmp11 = x0 - 1;
    const Scalar _tmp12 = -x0;
    const Scalar _tmp13 = x0 - 2;
    const Scalar _tmp14 = -_tmp13;
    const Scalar _tmp15 = 2*x0;
    const Scalar _tmp16 = -_tmp15;
    const Scalar _tmp17 = x1 + 2;
    const Scalar _tmp18 = x1 + 1;
    const Scalar _tmp19 = x1 + 4;
    const Scalar _tmp20 = -_tmp10;
    const Scalar _tmp21 = Scalar(1.0) / (x0);
    const Scalar _tmp22 = x0 + 2;
    const Scalar _tmp23 = -_tmp22;
    const Scalar _tmp24 = -_tmp18;
    const Scalar _tmp25 = _tmp6 - 2;
    const Scalar _tmp26 = std::pow(x0, Scalar(2));
    const Scalar _tmp27 = -_tmp26;
    const Scalar _tmp28 = x1 - 1;
    const Scalar _tmp29 = -_tmp28;
    const Scalar _tmp30 = _tmp0 + x0;
    const Scalar _tmp31 = 4*x1;
    const Scalar _tmp32 = _tmp15 - 4;
    const Scalar _tmp33 = _tmp6 - 4;
    const Scalar _tmp34 = -_tmp11;

    // Output terms (1)
    static constexpr int kRows_result = 36;
    static constexpr int kCols_result = 84;
    static constexpr int kNumNonZero_result = 245;
    static constexpr int kColPtrs_result[] = {0, 1, 4, 7, 10, 13, 16, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51, 54, 57, 60, 63, 66, 69, 72, 75, 78, 81, 84, 87, 90, 93, 96, 99, 102, 105, 108, 111, 114, 117, 120, 123, 126, 129, 132, 135, 137, 140, 143, 146, 149, 152, 155, 157, 160, 163, 166, 169, 172, 175, 178, 181, 184, 187, 190, 193, 196, 199, 202, 205, 208, 211, 214, 217, 220, 223, 226, 229, 232, 235, 238, 241, 244, 245};
    static constexpr int kRowIndices_result[] = {1, 0, 2, 9, 0, 3, 10, 0, 4, 11, 0, 5, 12, 0, 6, 13, 7, 14, 1, 2, 15, 1, 3, 16, 1, 4, 17, 1, 5, 18, 1, 6, 19, 1, 7, 20, 2, 3, 21, 2, 4, 22, 2, 5, 23, 2, 6, 24, 2, 7, 25, 3, 4, 26, 3, 5, 27, 3, 6, 28, 3, 7, 29, 4, 5, 30, 4, 6, 31, 4, 7, 32, 5, 6, 33, 5, 7, 34, 6, 7, 35, 8, 9, 15, 8, 10, 16, 8, 11, 17, 8, 12, 18, 8, 13, 19, 8, 14, 20, 9, 10, 21, 9, 11, 22, 9, 12, 23, 9, 13, 24, 9, 14, 25, 10, 11, 26, 10, 12, 27, 10, 13, 28, 10, 14, 29, 11, 12, 30, 11, 13, 31, 11, 14, 32, 12, 13, 12, 14, 34, 13, 14, 35, 15, 16, 21, 15, 17, 22, 15, 18, 23, 15, 19, 24, 15, 20, 16, 17, 26, 16, 18, 27, 16, 19, 28, 16, 20, 29, 17, 18, 30, 17, 19, 31, 17, 20, 32, 18, 19, 33, 18, 20, 34, 19, 20, 35, 21, 22, 26, 21, 23, 27, 21, 24, 28, 21, 25, 29, 22, 23, 30, 22, 24, 31, 22, 25, 32, 23, 24, 33, 23, 25, 34, 24, 25, 35, 26, 27, 30, 26, 28, 31, 26, 29, 32, 27, 28, 33, 27, 29, 34, 28, 29, 35, 30, 31, 33, 30, 32, 34, 31, 32, 35, 33};
    Scalar result_empty_value_ptr[245];
    Eigen::SparseMatrix<Scalar> result = Eigen::Map<const Eigen::SparseMatrix<Scalar>>(
        kRows_result,
        kCols_result,
        kNumNonZero_result,
        kColPtrs_result,
        kRowIndices_result,
        result_empty_value_ptr
    );
    Scalar* result_value_ptr = result.valuePtr();


    result_value_ptr[0] = -1;
    result_value_ptr[1] = 3;
    result_value_ptr[2] = _tmp0;
    result_value_ptr[3] = _tmp2;
    result_value_ptr[4] = -1;
    result_value_ptr[5] = 2;
    result_value_ptr[6] = Scalar(2.0);
    result_value_ptr[7] = _tmp4;
    result_value_ptr[8] = _tmp5;
    result_value_ptr[9] = -std::pow(x1, Scalar(2));
    result_value_ptr[10] = -2;
    result_value_ptr[11] = 2;
    result_value_ptr[12] = x0;
    result_value_ptr[13] = _tmp7;
    result_value_ptr[14] = -2;
    result_value_ptr[15] = x1;
    result_value_ptr[16] = _tmp8;
    result_value_ptr[17] = 1;
    result_value_ptr[18] = 2;
    result_value_ptr[19] = 4;
    result_value_ptr[20] = 3;
    result_value_ptr[21] = -1;
    result_value_ptr[22] = 2;
    result_value_ptr[23] = -1;
    result_value_ptr[24] = _tmp9;
    result_value_ptr[25] = -1;
    result_value_ptr[26] = _tmp10;
    result_value_ptr[27] = -2;
    result_value_ptr[28] = 1;
    result_value_ptr[29] = _tmp11;
    result_value_ptr[30] = 2;
    result_value_ptr[31] = 2;
    result_value_ptr[32] = x1;
    result_value_ptr[33] = -2;
    result_value_ptr[34] = _tmp12;
    result_value_ptr[35] = _tmp11;
    result_value_ptr[36] = 2;
    result_value_ptr[37] = _tmp14;
    result_value_ptr[38] = -2;
    result_value_ptr[39] = x0;
    result_value_ptr[40] = _tmp6;
    result_value_ptr[41] = (Scalar(1)/Scalar(2))*x0;
    result_value_ptr[42] = -1;
    result_value_ptr[43] = 1;
    result_value_ptr[44] = x1;
    result_value_ptr[45] = _tmp16;
    result_value_ptr[46] = x1;
    result_value_ptr[47] = Scalar(0.5);
    result_value_ptr[48] = _tmp17;
    result_value_ptr[49] = _tmp12 + _tmp18;
    result_value_ptr[50] = _tmp8;
    result_value_ptr[51] = _tmp19;
    result_value_ptr[52] = x0;
    result_value_ptr[53] = _tmp15;
    result_value_ptr[54] = _tmp20;
    result_value_ptr[55] = _tmp4;
    result_value_ptr[56] = 1;
    result_value_ptr[57] = Scalar(1.0);
    result_value_ptr[58] = 2;
    result_value_ptr[59] = 4;
    result_value_ptr[60] = Scalar(2.0);
    result_value_ptr[61] = 4;
    result_value_ptr[62] = _tmp0;
    result_value_ptr[63] = x0;
    result_value_ptr[64] = 4;
    result_value_ptr[65] = 6;
    result_value_ptr[66] = _tmp20;
    result_value_ptr[67] = 4;
    result_value_ptr[68] = 2;
    result_value_ptr[69] = _tmp5;
    result_value_ptr[70] = -2;
    result_value_ptr[71] = _tmp10;
    result_value_ptr[72] = -_tmp5;
    result_value_ptr[73] = 2*_tmp21;
    result_value_ptr[74] = _tmp23;
    result_value_ptr[75] = _tmp21;
    result_value_ptr[76] = _tmp22;
    result_value_ptr[77] = _tmp10;
    result_value_ptr[78] = _tmp6;
    result_value_ptr[79] = _tmp21;
    result_value_ptr[80] = _tmp16;
    result_value_ptr[81] = _tmp24;
    result_value_ptr[82] = -2;
    result_value_ptr[83] = -1;
    result_value_ptr[84] = _tmp16;
    result_value_ptr[85] = -2;
    result_value_ptr[86] = _tmp4;
    result_value_ptr[87] = x0;
    result_value_ptr[88] = 2;
    result_value_ptr[89] = 3*x0;
    result_value_ptr[90] = 1;
    result_value_ptr[91] = Scalar(1.0);
    result_value_ptr[92] = _tmp0;
    result_value_ptr[93] = -3;
    result_value_ptr[94] = _tmp0 + _tmp22;
    result_value_ptr[95] = -2;
    result_value_ptr[96] = -2;
    result_value_ptr[97] = 1;
    result_value_ptr[98] = _tmp2;
    result_value_ptr[99] = _tmp19;
    result_value_ptr[100] = -_tmp25;
    result_value_ptr[101] = 2;
    result_value_ptr[102] = _tmp13;
    result_value_ptr[103] = _tmp20;
    result_value_ptr[104] = _tmp14;
    result_value_ptr[105] = _tmp12;
    result_value_ptr[106] = _tmp15;
    result_value_ptr[107] = x0;
    result_value_ptr[108] = x1;
    result_value_ptr[109] = -4;
    result_value_ptr[110] = _tmp27;
    result_value_ptr[111] = x1;
    result_value_ptr[112] = _tmp29;
    result_value_ptr[113] = _tmp0;
    result_value_ptr[114] = 1;
    result_value_ptr[115] = Scalar(2.0);
    result_value_ptr[116] = _tmp0;
    result_value_ptr[117] = _tmp25;
    result_value_ptr[118] = -2;
    result_value_ptr[119] = _tmp12;
    result_value_ptr[120] = 1;
    result_value_ptr[121] = _tmp30;
    result_value_ptr[122] = -2;
    result_value_ptr[123] = -4;
    result_value_ptr[124] = -1;
    result_value_ptr[125] = _tmp24;
    result_value_ptr[126] = -_tmp31;
    result_value_ptr[127] = -1;
    result_value_ptr[128] = x0;
    result_value_ptr[129] = -3;
    result_value_ptr[130] = -2;
    result_value_ptr[131] = _tmp4;
    result_value_ptr[132] = -_tmp21*x1;
    result_value_ptr[133] = _tmp18;
    result_value_ptr[134] = _tmp22;
    result_value_ptr[135] = _tmp27;
    result_value_ptr[136] = -2;
    result_value_ptr[137] = -_tmp28*x1;
    result_value_ptr[138] = 4;
    result_value_ptr[139] = _tmp16;
    result_value_ptr[140] = -_tmp32;
    result_value_ptr[141] = 3*x1;
    result_value_ptr[142] = _tmp33;
    result_value_ptr[143] = -2;
    result_value_ptr[144] = 4;
    result_value_ptr[145] = _tmp15;
    result_value_ptr[146] = _tmp15;
    result_value_ptr[147] = Scalar(1.0) / (_tmp1);
    result_value_ptr[148] = x0;
    result_value_ptr[149] = 2;
    result_value_ptr[150] = _tmp26 + x1;
    result_value_ptr[151] = _tmp31;
    result_value_ptr[152] = _tmp12;
    result_value_ptr[153] = -2;
    result_value_ptr[154] = 3;
    result_value_ptr[155] = _tmp30;
    result_value_ptr[156] = x0;
    result_value_ptr[157] = x0;
    result_value_ptr[158] = 1;
    result_value_ptr[159] = 2;
    result_value_ptr[160] = 4;
    result_value_ptr[161] = x1;
    result_value_ptr[162] = -1;
    result_value_ptr[163] = 3 - x0;
    result_value_ptr[164] = 1;
    result_value_ptr[165] = _tmp23;
    result_value_ptr[166] = -Scalar(1.0)*_tmp21;
    result_value_ptr[167] = _tmp29;
    result_value_ptr[168] = -2;
    result_value_ptr[169] = -2;
    result_value_ptr[170] = -_tmp15 - _tmp6;
    result_value_ptr[171] = x1;
    result_value_ptr[172] = _tmp16;
    result_value_ptr[173] = _tmp12;
    result_value_ptr[174] = _tmp23;
    result_value_ptr[175] = -2;
    result_value_ptr[176] = -2;
    result_value_ptr[177] = x0 + 3;
    result_value_ptr[178] = _tmp7;
    result_value_ptr[179] = 2;
    result_value_ptr[180] = _tmp1 + x1;
    result_value_ptr[181] = -_tmp30;
    result_value_ptr[182] = _tmp34;
    result_value_ptr[183] = 1;
    result_value_ptr[184] = _tmp7;
    result_value_ptr[185] = x0;
    result_value_ptr[186] = -4;
    result_value_ptr[187] = 2;
    result_value_ptr[188] = _tmp6;
    result_value_ptr[189] = -_tmp17;
    result_value_ptr[190] = 4;
    result_value_ptr[191] = _tmp9 + 2;
    result_value_ptr[192] = 2;
    result_value_ptr[193] = x0;
    result_value_ptr[194] = 2*_tmp3;
    result_value_ptr[195] = _tmp20;
    result_value_ptr[196] = _tmp15;
    result_value_ptr[197] = 1;
    result_value_ptr[198] = 3;
    result_value_ptr[199] = _tmp29;
    result_value_ptr[200] = _tmp13;
    result_value_ptr[201] = 1;
    result_value_ptr[202] = 1;
    result_value_ptr[203] = _tmp22;
    result_value_ptr[204] = _tmp16;
    result_value_ptr[205] = -1;
    result_value_ptr[206] = x1 - 4;
    result_value_ptr[207] = -1;
    result_value_ptr[208] = _tmp3 + 2;
    result_value_ptr[209] = 3;
    result_value_ptr[210] = -4;
    result_value_ptr[211] = _tmp11;
    result_value_ptr[212] = _tmp32;
    result_value_ptr[213] = _tmp22;
    result_value_ptr[214] = _tmp33;
    result_value_ptr[215] = 2;
    result_value_ptr[216] = 1;
    result_value_ptr[217] = x0;
    result_value_ptr[218] = _tmp34;
    result_value_ptr[219] = x0;
    result_value_ptr[220] = 6;
    result_value_ptr[221] = 2;
    result_value_ptr[222] = _tmp1;
    result_value_ptr[223] = _tmp0;
    result_value_ptr[224] = _tmp22;
    result_value_ptr[225] = _tmp16;
    result_value_ptr[226] = -2;
    result_value_ptr[227] = _tmp29;
    result_value_ptr[228] = _tmp29;
    result_value_ptr[229] = _tmp9;
    result_value_ptr[230] = _tmp6 + x0;
    result_value_ptr[231] = -1;
    result_value_ptr[232] = Scalar(-1.0);
    result_value_ptr[233] = x0;
    result_value_ptr[234] = _tmp7;
    result_value_ptr[235] = _tmp6;
    result_value_ptr[236] = x0;
    result_value_ptr[237] = -2/x1;
    result_value_ptr[238] = _tmp1;
    result_value_ptr[239] = (Scalar(3)/Scalar(2))*x0;
    result_value_ptr[240] = _tmp7;
    result_value_ptr[241] = _tmp0;
    result_value_ptr[242] = 2;
    result_value_ptr[243] = -2;
    result_value_ptr[244] = _tmp12;

    return result;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
