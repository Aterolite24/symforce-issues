// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     cpp_templates/function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once


#include <Eigen/Dense>
#include <Eigen/Sparse>



namespace sym {


/**
* This function was autogenerated. Do not modify by hand.
*
* Args:
*     x0: Scalar
*     x1: Scalar
*
* Outputs:
*     result: Matrix163_163
*
*/
template <typename Scalar>
__attribute__((noinline))
Eigen::SparseMatrix<Scalar> ComputeAtBLpSc105(const Scalar x0, const Scalar x1) {

    // Total ops: 777

    // Input arrays

    // Intermediate terms (216)
    const Scalar _tmp0 = x1 - 1;
    const Scalar _tmp1 = _tmp0*x0;
    const Scalar _tmp2 = 2*x0;
    const Scalar _tmp3 = _tmp2 + 1;
    const Scalar _tmp4 = _tmp3*x0;
    const Scalar _tmp5 = 3*x1;
    const Scalar _tmp6 = -_tmp5;
    const Scalar _tmp7 = 2*x1;
    const Scalar _tmp8 = -_tmp7;
    const Scalar _tmp9 = std::pow(x1, Scalar(2));
    const Scalar _tmp10 = 2*_tmp9;
    const Scalar _tmp11 = x1 + 1;
    const Scalar _tmp12 = Scalar(1.0) / (x0);
    const Scalar _tmp13 = x0 - 2;
    const Scalar _tmp14 = _tmp13 + x1;
    const Scalar _tmp15 = std::pow(x0, Scalar(2));
    const Scalar _tmp16 = -_tmp13*_tmp15;
    const Scalar _tmp17 = x0 + 2;
    const Scalar _tmp18 = _tmp15*_tmp17;
    const Scalar _tmp19 = -_tmp15;
    const Scalar _tmp20 = [&]() { const Scalar base = x0; return base * base * base; }();
    const Scalar _tmp21 = 2*_tmp20;
    const Scalar _tmp22 = Scalar(3.0)*x0;
    const Scalar _tmp23 = Scalar(3.0)*x1;
    const Scalar _tmp24 = _tmp22 + _tmp23;
    const Scalar _tmp25 = _tmp0 + x0;
    const Scalar _tmp26 = -x1;
    const Scalar _tmp27 = _tmp26 + x0;
    const Scalar _tmp28 = x0 - 3;
    const Scalar _tmp29 = x0 - 1;
    const Scalar _tmp30 = _tmp2 + _tmp7;
    const Scalar _tmp31 = 4*x1;
    const Scalar _tmp32 = -_tmp0;
    const Scalar _tmp33 = Scalar(1.0) / (x1);
    const Scalar _tmp34 = Scalar(1.0)*x0;
    const Scalar _tmp35 = Scalar(1.5)*x0;
    const Scalar _tmp36 = _tmp35 + Scalar(1.5);
    const Scalar _tmp37 = x0*x1;
    const Scalar _tmp38 = (Scalar(1)/Scalar(2))*x1;
    const Scalar _tmp39 = _tmp0*_tmp12*_tmp38;
    const Scalar _tmp40 = x1 + 2;
    const Scalar _tmp41 = -x0;
    const Scalar _tmp42 = _tmp7 - 4;
    const Scalar _tmp43 = -_tmp42;
    const Scalar _tmp44 = 8*x0;
    const Scalar _tmp45 = _tmp44*x1;
    const Scalar _tmp46 = -_tmp25*_tmp31;
    const Scalar _tmp47 = 4*_tmp9;
    const Scalar _tmp48 = -_tmp2;
    const Scalar _tmp49 = _tmp31 + 8;
    const Scalar _tmp50 = -_tmp49;
    const Scalar _tmp51 = Scalar(1.0)*x1;
    const Scalar _tmp52 = _tmp40 + _tmp41;
    const Scalar _tmp53 = 2*_tmp15;
    const Scalar _tmp54 = 12*x0;
    const Scalar _tmp55 = _tmp2*x1;
    const Scalar _tmp56 = 4*x0;
    const Scalar _tmp57 = -_tmp56;
    const Scalar _tmp58 = _tmp2 - 2;
    const Scalar _tmp59 = _tmp8 + x0;
    const Scalar _tmp60 = x0 + 3;
    const Scalar _tmp61 = _tmp60*x1;
    const Scalar _tmp62 = _tmp12*x1;
    const Scalar _tmp63 = x1 - 3;
    const Scalar _tmp64 = -_tmp31;
    const Scalar _tmp65 = 4*_tmp33;
    const Scalar _tmp66 = -_tmp65;
    const Scalar _tmp67 = x0 + 1;
    const Scalar _tmp68 = -_tmp67;
    const Scalar _tmp69 = _tmp31*x0;
    const Scalar _tmp70 = 6*x0;
    const Scalar _tmp71 = _tmp13*x1;
    const Scalar _tmp72 = _tmp0*_tmp13;
    const Scalar _tmp73 = -_tmp72;
    const Scalar _tmp74 = _tmp2 - 4;
    const Scalar _tmp75 = _tmp31 + 4;
    const Scalar _tmp76 = -_tmp75;
    const Scalar _tmp77 = _tmp31 - 8;
    const Scalar _tmp78 = 6*_tmp15;
    const Scalar _tmp79 = 3*x0;
    const Scalar _tmp80 = _tmp31 - 2;
    const Scalar _tmp81 = -_tmp70;
    const Scalar _tmp82 = x1 - 2;
    const Scalar _tmp83 = -_tmp29;
    const Scalar _tmp84 = _tmp12*_tmp7;
    const Scalar _tmp85 = _tmp7 + x0;
    const Scalar _tmp86 = 2*_tmp12;
    const Scalar _tmp87 = -_tmp23;
    const Scalar _tmp88 = _tmp26 + _tmp9;
    const Scalar _tmp89 = _tmp2 + 2;
    const Scalar _tmp90 = -_tmp89;
    const Scalar _tmp91 = _tmp2 + 6;
    const Scalar _tmp92 = _tmp9 - 2;
    const Scalar _tmp93 = _tmp0*x1;
    const Scalar _tmp94 = -_tmp93;
    const Scalar _tmp95 = _tmp17*x1;
    const Scalar _tmp96 = 2*_tmp33;
    const Scalar _tmp97 = _tmp96 + x1;
    const Scalar _tmp98 = Scalar(2.0)*x1;
    const Scalar _tmp99 = -_tmp55;
    const Scalar _tmp100 = -_tmp2*_tmp82;
    const Scalar _tmp101 = -_tmp44;
    const Scalar _tmp102 = 4*_tmp15;
    const Scalar _tmp103 = _tmp38 + Scalar(1)/Scalar(2);
    const Scalar _tmp104 = _tmp7 + 4;
    const Scalar _tmp105 = _tmp9 + 2;
    const Scalar _tmp106 = -_tmp74;
    const Scalar _tmp107 = 2*_tmp1;
    const Scalar _tmp108 = _tmp79 + 3;
    const Scalar _tmp109 = -_tmp108;
    const Scalar _tmp110 = _tmp67*_tmp7;
    const Scalar _tmp111 = -_tmp51;
    const Scalar _tmp112 = -_tmp27;
    const Scalar _tmp113 = -_tmp13*_tmp29;
    const Scalar _tmp114 = _tmp40*_tmp7;
    const Scalar _tmp115 = Scalar(0.5)*x1;
    const Scalar _tmp116 = _tmp31 + 2;
    const Scalar _tmp117 = _tmp7 - 2;
    const Scalar _tmp118 = _tmp62 + 2;
    const Scalar _tmp119 = _tmp6 + _tmp79;
    const Scalar _tmp120 = _tmp31 - 4;
    const Scalar _tmp121 = _tmp7 + 2;
    const Scalar _tmp122 = _tmp27*_tmp29;
    const Scalar _tmp123 = -_tmp104;
    const Scalar _tmp124 = _tmp56 - 8;
    const Scalar _tmp125 = _tmp56 + 8;
    const Scalar _tmp126 = -_tmp125;
    const Scalar _tmp127 = -9*x0;
    const Scalar _tmp128 = _tmp79 - 6;
    const Scalar _tmp129 = _tmp2 + _tmp8;
    const Scalar _tmp130 = _tmp22 + Scalar(3.0);
    const Scalar _tmp131 = _tmp2 + 4;
    const Scalar _tmp132 = -_tmp131;
    const Scalar _tmp133 = 5*x0;
    const Scalar _tmp134 = _tmp7 - 1;
    const Scalar _tmp135 = 6*x1;
    const Scalar _tmp136 = Scalar(4.0)*x1;
    const Scalar _tmp137 = x1 + 3;
    const Scalar _tmp138 = _tmp17*x0;
    const Scalar _tmp139 = -_tmp98;
    const Scalar _tmp140 = -_tmp58;
    const Scalar _tmp141 = _tmp15 - 2;
    const Scalar _tmp142 = _tmp15*_tmp9;
    const Scalar _tmp143 = _tmp29*x1;
    const Scalar _tmp144 = -_tmp37;
    const Scalar _tmp145 = -_tmp13;
    const Scalar _tmp146 = Scalar(0.5)*x0;
    const Scalar _tmp147 = [&]() { const Scalar base = x1; return base * base * base; }();
    const Scalar _tmp148 = _tmp12*_tmp17;
    const Scalar _tmp149 = -_tmp5*_tmp67;
    const Scalar _tmp150 = _tmp8 + 2;
    const Scalar _tmp151 = -_tmp1;
    const Scalar _tmp152 = -_tmp13*_tmp96;
    const Scalar _tmp153 = _tmp67*x1;
    const Scalar _tmp154 = -_tmp153;
    const Scalar _tmp155 = _tmp30*x1;
    const Scalar _tmp156 = -_tmp20;
    const Scalar _tmp157 = _tmp33*x0;
    const Scalar _tmp158 = _tmp67*_tmp9;
    const Scalar _tmp159 = _tmp17*_tmp9;
    const Scalar _tmp160 = x1 + 4;
    const Scalar _tmp161 = 5*x1;
    const Scalar _tmp162 = -_tmp9;
    const Scalar _tmp163 = _tmp40*x1;
    const Scalar _tmp164 = _tmp0*_tmp7;
    const Scalar _tmp165 = -_tmp117;
    const Scalar _tmp166 = _tmp0*_tmp67;
    const Scalar _tmp167 = _tmp8 + 4;
    const Scalar _tmp168 = -_tmp40*x0;
    const Scalar _tmp169 = 6 - _tmp2;
    const Scalar _tmp170 = -_tmp69;
    const Scalar _tmp171 = -_tmp121;
    const Scalar _tmp172 = _tmp0*_tmp40;
    const Scalar _tmp173 = 8*x1;
    const Scalar _tmp174 = -_tmp137*_tmp82;
    const Scalar _tmp175 = (Scalar(1)/Scalar(2))*x0;
    const Scalar _tmp176 = x0 + x1;
    const Scalar _tmp177 = _tmp5 + _tmp79 - 3;
    const Scalar _tmp178 = _tmp13*_tmp82;
    const Scalar _tmp179 = _tmp82*x0;
    const Scalar _tmp180 = (Scalar(1)/Scalar(2))*_tmp15;
    const Scalar _tmp181 = _tmp82*x1;
    const Scalar _tmp182 = _tmp38*_tmp82;
    const Scalar _tmp183 = _tmp104 + _tmp48;
    const Scalar _tmp184 = -_tmp79;
    const Scalar _tmp185 = -_tmp135;
    const Scalar _tmp186 = -_tmp96 + x0;
    const Scalar _tmp187 = 8*_tmp33;
    const Scalar _tmp188 = -_tmp133;
    const Scalar _tmp189 = _tmp29*_tmp82;
    const Scalar _tmp190 = _tmp29*x0;
    const Scalar _tmp191 = -_tmp173;
    const Scalar _tmp192 = _tmp15*x1;
    const Scalar _tmp193 = -_tmp86;
    const Scalar _tmp194 = _tmp56 + 4;
    const Scalar _tmp195 = _tmp2*_tmp9;
    const Scalar _tmp196 = -_tmp195;
    const Scalar _tmp197 = _tmp63*x0;
    const Scalar _tmp198 = _tmp33*_tmp56;
    const Scalar _tmp199 = -_tmp11;
    const Scalar _tmp200 = -_tmp190;
    const Scalar _tmp201 = -_tmp102;
    const Scalar _tmp202 = -_tmp191 - _tmp44;
    const Scalar _tmp203 = _tmp115 + Scalar(-0.5);
    const Scalar _tmp204 = _tmp31*_tmp82;
    const Scalar _tmp205 = -_tmp181;
    const Scalar _tmp206 = _tmp2 + x1;
    const Scalar _tmp207 = _tmp0*_tmp82;
    const Scalar _tmp208 = -_tmp207;
    const Scalar _tmp209 = _tmp15 + 1;
    const Scalar _tmp210 = -_tmp34;
    const Scalar _tmp211 = (Scalar(1)/Scalar(2))*_tmp33;
    const Scalar _tmp212 = x1 + Scalar(-1.0);
    const Scalar _tmp213 = -_tmp11*_tmp17;
    const Scalar _tmp214 = _tmp12*_tmp31;
    const Scalar _tmp215 = _tmp86 + x1;

    // Output terms (1)
    static constexpr int kRows_result = 163;
    static constexpr int kCols_result = 163;
    static constexpr int kNumNonZero_result = 872;
    static constexpr int kColPtrs_result[] = {0, 4, 8, 9, 11, 14, 17, 22, 26, 26, 29, 32, 35, 40, 45, 47, 50, 53, 56, 61, 66, 68, 71, 74, 77, 82, 87, 90, 93, 96, 99, 104, 109, 112, 115, 118, 121, 126, 131, 134, 136, 139, 142, 146, 151, 154, 157, 159, 161, 162, 167, 170, 173, 176, 179, 184, 188, 191, 195, 198, 200, 205, 211, 217, 219, 225, 230, 236, 242, 249, 255, 260, 269, 278, 287, 291, 297, 304, 311, 318, 325, 332, 337, 346, 355, 364, 369, 375, 382, 388, 394, 401, 408, 413, 420, 429, 438, 442, 449, 455, 461, 467, 474, 481, 486, 493, 502, 511, 516, 523, 528, 535, 540, 547, 554, 559, 567, 576, 584, 589, 596, 603, 610, 616, 623, 630, 635, 644, 653, 660, 665, 672, 676, 681, 688, 694, 701, 706, 715, 724, 733, 738, 743, 748, 754, 761, 765, 772, 776, 784, 792, 800, 805, 810, 815, 820, 825, 832, 835, 840, 849, 858, 869, 872};
    static constexpr int kRowIndices_result[] = {0, 60, 61, 62, 1, 60, 61, 62, 2, 3, 65, 4, 66, 69, 5, 67, 70, 6, 68, 71, 72, 73, 7, 69, 72, 73, 9, 76, 79, 10, 77, 80, 11, 78, 81, 12, 79, 82, 83, 84, 13, 80, 82, 83, 84, 14, 75, 15, 87, 90, 16, 88, 91, 17, 89, 92, 18, 90, 93, 94, 95, 19, 91, 93, 94, 95, 20, 86, 21, 98, 101, 22, 99, 102, 23, 100, 103, 24, 101, 104, 105, 106, 25, 102, 104, 105, 106, 26, 97, 103, 27, 109, 112, 28, 110, 113, 29, 111, 114, 30, 112, 115, 116, 117, 31, 113, 115, 116, 117, 32, 108, 114, 33, 120, 123, 34, 121, 124, 35, 122, 125, 36, 123, 126, 127, 128, 37, 124, 126, 127, 128, 38, 119, 125, 39, 131, 40, 132, 135, 41, 133, 136, 42, 134, 137, 139, 43, 135, 137, 138, 139, 44, 130, 136, 45, 142, 145, 46, 143, 47, 147, 48, 49, 146, 148, 149, 150, 50, 141, 147, 51, 153, 156, 52, 154, 157, 53, 155, 158, 54, 156, 159, 160, 161, 55, 157, 159, 161, 56, 152, 158, 57, 159, 160, 161, 58, 160, 161, 59, 162, 1, 60, 61, 62, 65, 0, 1, 60, 61, 62, 66, 0, 1, 60, 61, 62, 67, 63, 74, 8, 63, 64, 70, 74, 75, 3, 60, 65, 71, 76, 4, 61, 66, 69, 72, 77, 5, 62, 67, 70, 73, 78, 3, 6, 65, 68, 71, 72, 73, 4, 7, 66, 69, 72, 73, 5, 8, 64, 67, 70, 6, 7, 65, 68, 69, 71, 72, 73, 76, 6, 7, 66, 68, 69, 71, 72, 73, 77, 6, 7, 67, 68, 69, 71, 72, 73, 78, 63, 64, 74, 75, 14, 64, 74, 75, 85, 86, 9, 65, 71, 76, 79, 82, 87, 10, 66, 72, 77, 80, 83, 88, 11, 67, 73, 78, 81, 84, 89, 9, 12, 76, 79, 82, 83, 84, 10, 13, 77, 80, 82, 83, 84, 11, 14, 75, 78, 81, 12, 13, 76, 79, 80, 82, 83, 84, 87, 12, 13, 77, 79, 80, 82, 83, 84, 88, 12, 13, 78, 79, 80, 82, 83, 84, 89, 74, 75, 85, 86, 96, 20, 75, 85, 86, 96, 97, 15, 76, 82, 87, 90, 93, 98, 16, 77, 83, 88, 91, 99, 17, 78, 84, 89, 92, 100, 15, 18, 87, 90, 93, 94, 95, 16, 19, 88, 91, 93, 94, 95, 17, 20, 86, 89, 92, 18, 19, 90, 91, 93, 94, 95, 18, 19, 88, 90, 91, 93, 94, 95, 99, 18, 19, 89, 90, 91, 93, 94, 95, 100, 85, 86, 96, 97, 26, 86, 96, 97, 103, 107, 108, 21, 87, 93, 98, 101, 109, 22, 88, 99, 102, 105, 110, 23, 89, 100, 103, 106, 111, 21, 24, 98, 101, 104, 105, 106, 22, 25, 99, 102, 104, 105, 106, 23, 26, 97, 100, 103, 25, 98, 102, 104, 105, 106, 109, 24, 25, 99, 101, 102, 104, 105, 106, 110, 24, 25, 100, 101, 102, 104, 105, 106, 111, 96, 97, 107, 108, 118, 32, 97, 107, 108, 114, 118, 119, 27, 98, 109, 112, 115, 28, 99, 105, 110, 113, 116, 121, 29, 100, 106, 111, 114, 27, 30, 109, 112, 115, 116, 117, 28, 31, 110, 113, 115, 116, 117, 29, 32, 108, 111, 114, 30, 31, 109, 112, 113, 115, 116, 117, 30, 31, 110, 112, 113, 115, 116, 117, 121, 30, 31, 112, 113, 115, 116, 117, 122, 107, 108, 118, 119, 129, 38, 108, 118, 119, 125, 129, 130, 33, 109, 115, 120, 123, 126, 131, 34, 110, 116, 121, 124, 127, 132, 35, 117, 122, 125, 128, 133, 33, 36, 120, 123, 126, 127, 128, 34, 37, 121, 124, 126, 127, 128, 35, 38, 119, 122, 125, 36, 37, 120, 123, 124, 126, 127, 128, 131, 36, 37, 121, 123, 124, 126, 127, 128, 132, 37, 122, 124, 126, 127, 128, 133, 118, 119, 129, 130, 140, 44, 119, 129, 130, 136, 140, 141, 39, 120, 126, 131, 121, 127, 132, 138, 143, 41, 122, 128, 133, 136, 139, 144, 39, 42, 131, 134, 137, 139, 40, 43, 132, 135, 137, 138, 139, 41, 44, 130, 133, 136, 42, 43, 131, 134, 135, 137, 138, 139, 142, 42, 43, 132, 134, 135, 137, 138, 139, 143, 42, 43, 133, 134, 135, 137, 138, 139, 144, 129, 130, 140, 141, 151, 50, 130, 140, 141, 147, 131, 137, 142, 148, 153, 46, 132, 138, 143, 149, 154, 47, 133, 139, 144, 147, 150, 155, 45, 48, 142, 145, 46, 49, 143, 146, 148, 149, 150, 47, 50, 141, 147, 48, 49, 142, 146, 148, 149, 150, 153, 48, 49, 143, 146, 148, 149, 150, 154, 48, 49, 144, 146, 148, 149, 150, 155, 140, 141, 151, 152, 162, 56, 141, 151, 152, 158, 51, 142, 148, 153, 156, 52, 143, 149, 154, 157, 53, 144, 150, 155, 158, 51, 54, 153, 156, 159, 160, 161, 52, 154, 157, 53, 56, 152, 155, 158, 54, 55, 57, 58, 156, 157, 159, 160, 161, 54, 55, 57, 58, 156, 157, 159, 160, 161, 54, 55, 57, 58, 59, 156, 157, 159, 160, 161, 162, 59, 151, 162};
    Scalar result_empty_value_ptr[872];
    Eigen::SparseMatrix<Scalar> result = Eigen::Map<const Eigen::SparseMatrix<Scalar>>(
        kRows_result,
        kCols_result,
        kNumNonZero_result,
        kColPtrs_result,
        kRowIndices_result,
        result_empty_value_ptr
    );
    Scalar* result_value_ptr = result.valuePtr();


    result_value_ptr[0] = _tmp1;
    result_value_ptr[1] = _tmp4;
    result_value_ptr[2] = _tmp2;
    result_value_ptr[3] = x0;
    result_value_ptr[4] = _tmp6;
    result_value_ptr[5] = _tmp8;
    result_value_ptr[6] = _tmp7;
    result_value_ptr[7] = _tmp10;
    result_value_ptr[8] = _tmp11*(_tmp11 + x0);
    result_value_ptr[9] = _tmp8;
    result_value_ptr[10] = -_tmp12*_tmp9;
    result_value_ptr[11] = 1;
    result_value_ptr[12] = -3;
    result_value_ptr[13] = _tmp12;
    result_value_ptr[14] = _tmp14*x1;
    result_value_ptr[15] = (Scalar(1)/Scalar(2))*_tmp9;
    result_value_ptr[16] = _tmp7;
    result_value_ptr[17] = _tmp16;
    result_value_ptr[18] = _tmp18;
    result_value_ptr[19] = _tmp19;
    result_value_ptr[20] = _tmp21;
    result_value_ptr[21] = -_tmp11*_tmp15;
    result_value_ptr[22] = Scalar(3.0) - _tmp24;
    result_value_ptr[23] = _tmp25*_tmp27;
    result_value_ptr[24] = -_tmp25;
    result_value_ptr[25] = _tmp25;
    result_value_ptr[26] = -_tmp28*_tmp29;
    result_value_ptr[27] = -_tmp27*_tmp28;
    result_value_ptr[28] = -_tmp28*_tmp30;
    result_value_ptr[29] = -_tmp15*_tmp31;
    result_value_ptr[30] = -2*_tmp18;
    result_value_ptr[31] = -4*_tmp20;
    result_value_ptr[32] = _tmp32;
    result_value_ptr[33] = x0;
    result_value_ptr[34] = _tmp26;
    result_value_ptr[35] = _tmp21;
    result_value_ptr[36] = -_tmp13*_tmp2*_tmp33;
    result_value_ptr[37] = _tmp2;
    result_value_ptr[38] = _tmp34;
    result_value_ptr[39] = _tmp2;
    result_value_ptr[40] = Scalar(1.5)*_tmp9;
    result_value_ptr[41] = _tmp36;
    result_value_ptr[42] = _tmp24;
    result_value_ptr[43] = _tmp35 + Scalar(3.0);
    result_value_ptr[44] = _tmp36;
    result_value_ptr[45] = _tmp17*_tmp37;
    result_value_ptr[46] = -1;
    result_value_ptr[47] = -_tmp39;
    result_value_ptr[48] = _tmp38;
    result_value_ptr[49] = _tmp39;
    result_value_ptr[50] = _tmp40;
    result_value_ptr[51] = 1;
    result_value_ptr[52] = _tmp31;
    result_value_ptr[53] = 4;
    result_value_ptr[54] = 2;
    result_value_ptr[55] = _tmp41;
    result_value_ptr[56] = -16;
    result_value_ptr[57] = -4;
    result_value_ptr[58] = _tmp43;
    result_value_ptr[59] = x0;
    result_value_ptr[60] = _tmp43;
    result_value_ptr[61] = -_tmp45;
    result_value_ptr[62] = _tmp13*_tmp31;
    result_value_ptr[63] = Scalar(12.0)*x1;
    result_value_ptr[64] = _tmp46;
    result_value_ptr[65] = -_tmp47;
    result_value_ptr[66] = _tmp41;
    result_value_ptr[67] = Scalar(-1.0);
    result_value_ptr[68] = _tmp31;
    result_value_ptr[69] = 16;
    result_value_ptr[70] = 16*x1;
    result_value_ptr[71] = -2;
    result_value_ptr[72] = -_tmp7 - 6;
    result_value_ptr[73] = _tmp42;
    result_value_ptr[74] = -1;
    result_value_ptr[75] = -2;
    result_value_ptr[76] = _tmp48;
    result_value_ptr[77] = _tmp40;
    result_value_ptr[78] = _tmp50;
    result_value_ptr[79] = -_tmp40;
    result_value_ptr[80] = -_tmp51 + Scalar(-2.0);
    result_value_ptr[81] = _tmp40*_tmp52;
    result_value_ptr[82] = _tmp53;
    result_value_ptr[83] = _tmp2*_tmp27;
    result_value_ptr[84] = _tmp54;
    result_value_ptr[85] = _tmp55;
    result_value_ptr[86] = _tmp53;
    result_value_ptr[87] = _tmp57;
    result_value_ptr[88] = _tmp2;
    result_value_ptr[89] = _tmp15;
    result_value_ptr[90] = _tmp58;
    result_value_ptr[91] = _tmp56 - 4;
    result_value_ptr[92] = -_tmp29*_tmp59;
    result_value_ptr[93] = _tmp61;
    result_value_ptr[94] = x1;
    result_value_ptr[95] = _tmp62;
    result_value_ptr[96] = -4;
    result_value_ptr[97] = 4;
    result_value_ptr[98] = _tmp10;
    result_value_ptr[99] = _tmp41;
    result_value_ptr[100] = _tmp41;
    result_value_ptr[101] = _tmp41;
    result_value_ptr[102] = _tmp0;
    result_value_ptr[103] = -_tmp63;
    result_value_ptr[104] = _tmp26;
    result_value_ptr[105] = 2;
    result_value_ptr[106] = -4;
    result_value_ptr[107] = _tmp64;
    result_value_ptr[108] = _tmp66;
    result_value_ptr[109] = -2;
    result_value_ptr[110] = x1;
    result_value_ptr[111] = _tmp68;
    result_value_ptr[112] = x1;
    result_value_ptr[113] = _tmp26;
    result_value_ptr[114] = _tmp69;
    result_value_ptr[115] = -8;
    result_value_ptr[116] = x1;
    result_value_ptr[117] = -_tmp17;
    result_value_ptr[118] = _tmp64;
    result_value_ptr[119] = _tmp46;
    result_value_ptr[120] = _tmp31*_tmp40;
    result_value_ptr[121] = _tmp48;
    result_value_ptr[122] = _tmp44;
    result_value_ptr[123] = _tmp2;
    result_value_ptr[124] = _tmp70;
    result_value_ptr[125] = _tmp48;
    result_value_ptr[126] = _tmp71;
    result_value_ptr[127] = _tmp72;
    result_value_ptr[128] = _tmp73;
    result_value_ptr[129] = _tmp72;
    result_value_ptr[130] = _tmp74;
    result_value_ptr[131] = _tmp76;
    result_value_ptr[132] = _tmp77;
    result_value_ptr[133] = -4;
    result_value_ptr[134] = -_tmp78;
    result_value_ptr[135] = _tmp11*_tmp79;
    result_value_ptr[136] = _tmp80;
    result_value_ptr[137] = _tmp81;
    result_value_ptr[138] = _tmp66 + 4;
    result_value_ptr[139] = -1;
    result_value_ptr[140] = _tmp82;
    result_value_ptr[141] = _tmp83;
    result_value_ptr[142] = _tmp84;
    result_value_ptr[143] = -_tmp85*_tmp86;
    result_value_ptr[144] = _tmp67*_tmp86;
    result_value_ptr[145] = -4*_tmp12;
    result_value_ptr[146] = _tmp87 + Scalar(3.0)*_tmp9;
    result_value_ptr[147] = -_tmp29*_tmp88;
    result_value_ptr[148] = _tmp82*_tmp88;
    result_value_ptr[149] = -_tmp10 - _tmp8;
    result_value_ptr[150] = _tmp15*_tmp88;
    result_value_ptr[151] = 4;
    result_value_ptr[152] = _tmp90;
    result_value_ptr[153] = 2;
    result_value_ptr[154] = _tmp91;
    result_value_ptr[155] = _tmp30;
    result_value_ptr[156] = -8;
    result_value_ptr[157] = _tmp7;
    result_value_ptr[158] = _tmp92*x1;
    result_value_ptr[159] = 2;
    result_value_ptr[160] = _tmp94;
    result_value_ptr[161] = -_tmp67*_tmp82;
    result_value_ptr[162] = _tmp2;
    result_value_ptr[163] = _tmp37;
    result_value_ptr[164] = _tmp55;
    result_value_ptr[165] = _tmp48;
    result_value_ptr[166] = _tmp56;
    result_value_ptr[167] = 2;
    result_value_ptr[168] = _tmp41;
    result_value_ptr[169] = 1;
    result_value_ptr[170] = -6;
    result_value_ptr[171] = 3;
    result_value_ptr[172] = -6;
    result_value_ptr[173] = _tmp2;
    result_value_ptr[174] = _tmp15;
    result_value_ptr[175] = _tmp37;
    result_value_ptr[176] = _tmp95;
    result_value_ptr[177] = _tmp97*x1;
    result_value_ptr[178] = _tmp98;
    result_value_ptr[179] = _tmp68;
    result_value_ptr[180] = 2;
    result_value_ptr[181] = _tmp79;
    result_value_ptr[182] = -1;
    result_value_ptr[183] = -2;
    result_value_ptr[184] = _tmp99;
    result_value_ptr[185] = _tmp100;
    result_value_ptr[186] = -_tmp2*_tmp67;
    result_value_ptr[187] = -4;
    result_value_ptr[188] = 16*x0;
    result_value_ptr[189] = _tmp101;
    result_value_ptr[190] = _tmp101;
    result_value_ptr[191] = _tmp102;
    result_value_ptr[192] = -_tmp21;
    result_value_ptr[193] = -_tmp0*_tmp53;
    result_value_ptr[194] = _tmp103*_tmp53;
    result_value_ptr[195] = -_tmp104*_tmp82;
    result_value_ptr[196] = Scalar(2.0) - _tmp51;
    result_value_ptr[197] = _tmp34*_tmp82;
    result_value_ptr[198] = _tmp105*_tmp29;
    result_value_ptr[199] = -_tmp29*_tmp86;
    result_value_ptr[200] = -6;
    result_value_ptr[201] = _tmp48;
    result_value_ptr[202] = 4;
    result_value_ptr[203] = _tmp31;
    result_value_ptr[204] = _tmp106;
    result_value_ptr[205] = -_tmp107;
    result_value_ptr[206] = Scalar(3.0);
    result_value_ptr[207] = -_tmp2*_tmp3 + Scalar(2.0);
    result_value_ptr[208] = -_tmp26 - _tmp56 + Scalar(-2.0);
    result_value_ptr[209] = -_tmp2 - _tmp98;
    result_value_ptr[210] = _tmp8;
    result_value_ptr[211] = 3*_tmp1;
    result_value_ptr[212] = _tmp109;
    result_value_ptr[213] = 3*_tmp4 - _tmp89;
    result_value_ptr[214] = _tmp44 + 2;
    result_value_ptr[215] = _tmp110 + _tmp79 + Scalar(-3.0);
    result_value_ptr[216] = _tmp111 + _tmp34;
    result_value_ptr[217] = 1;
    result_value_ptr[218] = 2;
    result_value_ptr[219] = _tmp58;
    result_value_ptr[220] = _tmp112;
    result_value_ptr[221] = _tmp5 - _tmp54 + 1;
    result_value_ptr[222] = _tmp113;
    result_value_ptr[223] = _tmp44;
    result_value_ptr[224] = Scalar(8.0)*x0;
    result_value_ptr[225] = _tmp34;
    result_value_ptr[226] = -_tmp114;
    result_value_ptr[227] = -_tmp114 + _tmp115 - _tmp2;
    result_value_ptr[228] = _tmp107;
    result_value_ptr[229] = _tmp57;
    result_value_ptr[230] = _tmp48;
    result_value_ptr[231] = _tmp15;
    result_value_ptr[232] = -_tmp116 - _tmp53 - _tmp81;
    result_value_ptr[233] = -2;
    result_value_ptr[234] = -4;
    result_value_ptr[235] = _tmp31;
    result_value_ptr[236] = _tmp117*_tmp14;
    result_value_ptr[237] = 9;
    result_value_ptr[238] = _tmp117*_tmp38 - _tmp118*x1 - _tmp119;
    result_value_ptr[239] = _tmp120;
    result_value_ptr[240] = _tmp118*_tmp29;
    result_value_ptr[241] = _tmp118*x0;
    result_value_ptr[242] = _tmp121;
    result_value_ptr[243] = _tmp71;
    result_value_ptr[244] = _tmp11*_tmp62;
    result_value_ptr[245] = -_tmp95;
    result_value_ptr[246] = x1;
    result_value_ptr[247] = _tmp99;
    result_value_ptr[248] = _tmp11*x1;
    result_value_ptr[249] = -_tmp53;
    result_value_ptr[250] = _tmp22 + Scalar(-3.0);
    result_value_ptr[251] = _tmp78;
    result_value_ptr[252] = -_tmp122 + _tmp48;
    result_value_ptr[253] = _tmp29;
    result_value_ptr[254] = _tmp83;
    result_value_ptr[255] = -_tmp14;
    result_value_ptr[256] = _tmp123;
    result_value_ptr[257] = _tmp40;
    result_value_ptr[258] = -_tmp38;
    result_value_ptr[259] = _tmp13*_tmp40 - 2;
    result_value_ptr[260] = _tmp124;
    result_value_ptr[261] = -_tmp22;
    result_value_ptr[262] = x0;
    result_value_ptr[263] = _tmp126;
    result_value_ptr[264] = _tmp27*x0;
    result_value_ptr[265] = 4 - _tmp1;
    result_value_ptr[266] = _tmp127;
    result_value_ptr[267] = _tmp75 + x0;
    result_value_ptr[268] = _tmp2;
    result_value_ptr[269] = _tmp128;
    result_value_ptr[270] = Scalar(-6.0);
    result_value_ptr[271] = -_tmp7*(_tmp7 + 1);
    result_value_ptr[272] = -_tmp79 - 6;
    result_value_ptr[273] = _tmp129;
    result_value_ptr[274] = 3;
    result_value_ptr[275] = -_tmp116 - _tmp70;
    result_value_ptr[276] = _tmp5 + 5;
    result_value_ptr[277] = _tmp47;
    result_value_ptr[278] = _tmp74;
    result_value_ptr[279] = -_tmp130;
    result_value_ptr[280] = _tmp64;
    result_value_ptr[281] = _tmp132;
    result_value_ptr[282] = _tmp27*_tmp67;
    result_value_ptr[283] = 2;
    result_value_ptr[284] = -_tmp133 - 1;
    result_value_ptr[285] = _tmp133 + _tmp134;
    result_value_ptr[286] = _tmp56;
    result_value_ptr[287] = _tmp32;
    result_value_ptr[288] = _tmp49;
    result_value_ptr[289] = -_tmp135 - _tmp41 - 6;
    result_value_ptr[290] = -_tmp136 + Scalar(-8.0);
    result_value_ptr[291] = _tmp137*_tmp138;
    result_value_ptr[292] = _tmp8;
    result_value_ptr[293] = _tmp7;
    result_value_ptr[294] = -_tmp137*_tmp33 - _tmp139 - _tmp55;
    result_value_ptr[295] = _tmp56;
    result_value_ptr[296] = -_tmp2*_tmp40;
    result_value_ptr[297] = _tmp140;
    result_value_ptr[298] = -1;
    result_value_ptr[299] = _tmp0;
    result_value_ptr[300] = -_tmp8 - _tmp91;
    result_value_ptr[301] = -_tmp31 - _tmp56;
    result_value_ptr[302] = _tmp89;
    result_value_ptr[303] = _tmp90;
    result_value_ptr[304] = _tmp7*_tmp74;
    result_value_ptr[305] = -_tmp136 + Scalar(-2.0);
    result_value_ptr[306] = Scalar(-4.0);
    result_value_ptr[307] = _tmp136 + _tmp17*_tmp74 - _tmp44 - 8;
    result_value_ptr[308] = _tmp2*_tmp74;
    result_value_ptr[309] = 4;
    result_value_ptr[310] = 8;
    result_value_ptr[311] = -_tmp0*_tmp141;
    result_value_ptr[312] = -_tmp142;
    result_value_ptr[313] = _tmp143*_tmp15;
    result_value_ptr[314] = _tmp141*x0 + _tmp144 + _tmp20*x1;
    result_value_ptr[315] = -_tmp141*x1;
    result_value_ptr[316] = _tmp11;
    result_value_ptr[317] = _tmp8;
    result_value_ptr[318] = _tmp113;
    result_value_ptr[319] = _tmp16;
    result_value_ptr[320] = -_tmp13*_tmp27;
    result_value_ptr[321] = std::pow(_tmp13, Scalar(2))*_tmp33 - _tmp13*_tmp30;
    result_value_ptr[322] = _tmp145;
    result_value_ptr[323] = Scalar(1.0) - _tmp146;
    result_value_ptr[324] = _tmp145;
    result_value_ptr[325] = -_tmp0*_tmp84;
    result_value_ptr[326] = -3*_tmp147;
    result_value_ptr[327] = -_tmp0*_tmp148;
    result_value_ptr[328] = _tmp149 + _tmp150;
    result_value_ptr[329] = -_tmp30*_tmp5;
    result_value_ptr[330] = -_tmp17*_tmp5;
    result_value_ptr[331] = _tmp149;
    result_value_ptr[332] = std::pow(_tmp0, Scalar(2));
    result_value_ptr[333] = -_tmp17*_tmp2;
    result_value_ptr[334] = _tmp96;
    result_value_ptr[335] = _tmp151;
    result_value_ptr[336] = _tmp93;
    result_value_ptr[337] = _tmp53;
    result_value_ptr[338] = -_tmp147;
    result_value_ptr[339] = -6;
    result_value_ptr[340] = _tmp152;
    result_value_ptr[341] = _tmp154;
    result_value_ptr[342] = -_tmp155 + _tmp79 + 5;
    result_value_ptr[343] = Scalar(1.0) - _tmp95;
    result_value_ptr[344] = 2 - _tmp153;
    result_value_ptr[345] = _tmp109;
    result_value_ptr[346] = _tmp156;
    result_value_ptr[347] = std::pow(x1, Scalar(4));
    result_value_ptr[348] = _tmp89*x1;
    result_value_ptr[349] = _tmp13*_tmp157;
    result_value_ptr[350] = _tmp158;
    result_value_ptr[351] = _tmp30*_tmp9 + _tmp41;
    result_value_ptr[352] = -_tmp146 + _tmp159 + _tmp26;
    result_value_ptr[353] = _tmp158 + _tmp41;
    result_value_ptr[354] = _tmp8;
    result_value_ptr[355] = _tmp53;
    result_value_ptr[356] = _tmp147;
    result_value_ptr[357] = -_tmp160*_tmp37;
    result_value_ptr[358] = _tmp152;
    result_value_ptr[359] = _tmp153;
    result_value_ptr[360] = _tmp155 + 2;
    result_value_ptr[361] = _tmp95 + Scalar(1.0);
    result_value_ptr[362] = _tmp11*_tmp160 + _tmp153 + 2;
    result_value_ptr[363] = -_tmp160*_tmp7;
    result_value_ptr[364] = _tmp157;
    result_value_ptr[365] = -_tmp121*x1;
    result_value_ptr[366] = _tmp161 + 4;
    result_value_ptr[367] = -_tmp121*_tmp40;
    result_value_ptr[368] = 2;
    result_value_ptr[369] = _tmp89*x0;
    result_value_ptr[370] = _tmp162;
    result_value_ptr[371] = _tmp7;
    result_value_ptr[372] = _tmp154 - _tmp163 + Scalar(2.0)*x0 + Scalar(2.0);
    result_value_ptr[373] = _tmp10;
    result_value_ptr[374] = _tmp162;
    result_value_ptr[375] = -_tmp164;
    result_value_ptr[376] = _tmp165;
    result_value_ptr[377] = _tmp166;
    result_value_ptr[378] = -_tmp166 + _tmp167 + _tmp55;
    result_value_ptr[379] = _tmp164;
    result_value_ptr[380] = -2;
    result_value_ptr[381] = 1;
    result_value_ptr[382] = _tmp168;
    result_value_ptr[383] = -_tmp70 - 6;
    result_value_ptr[384] = 3;
    result_value_ptr[385] = _tmp169;
    result_value_ptr[386] = _tmp170;
    result_value_ptr[387] = 1;
    result_value_ptr[388] = _tmp75;
    result_value_ptr[389] = _tmp55;
    result_value_ptr[390] = _tmp171;
    result_value_ptr[391] = _tmp135 + _tmp79 + 2;
    result_value_ptr[392] = -_tmp11*x0;
    result_value_ptr[393] = -_tmp138;
    result_value_ptr[394] = _tmp172;
    result_value_ptr[395] = -_tmp173 - 24;
    result_value_ptr[396] = _tmp168;
    result_value_ptr[397] = -_tmp172 + _tmp8 - 6;
    result_value_ptr[398] = _tmp174;
    result_value_ptr[399] = _tmp137*_tmp175;
    result_value_ptr[400] = _tmp174;
    result_value_ptr[401] = _tmp176*_tmp40;
    result_value_ptr[402] = _tmp81;
    result_value_ptr[403] = _tmp176;
    result_value_ptr[404] = _tmp128 + _tmp176*_tmp31;
    result_value_ptr[405] = Scalar(9.0);
    result_value_ptr[406] = -_tmp177;
    result_value_ptr[407] = _tmp6;
    result_value_ptr[408] = 8;
    result_value_ptr[409] = _tmp99;
    result_value_ptr[410] = _tmp139;
    result_value_ptr[411] = 4;
    result_value_ptr[412] = _tmp48;
    result_value_ptr[413] = _tmp101;
    result_value_ptr[414] = _tmp100;
    result_value_ptr[415] = _tmp48;
    result_value_ptr[416] = _tmp178;
    result_value_ptr[417] = -_tmp179 - _tmp87 + Scalar(-6.0);
    result_value_ptr[418] = _tmp180 - _tmp25*_tmp82;
    result_value_ptr[419] = -_tmp179 - _tmp181;
    result_value_ptr[420] = _tmp44 - 16;
    result_value_ptr[421] = _tmp153*_tmp2;
    result_value_ptr[422] = x0;
    result_value_ptr[423] = _tmp74;
    result_value_ptr[424] = -_tmp67*_tmp71;
    result_value_ptr[425] = _tmp178 - _tmp23*_tmp67;
    result_value_ptr[426] = -_tmp13*_tmp175 + _tmp153*_tmp25;
    result_value_ptr[427] = _tmp158 + _tmp178;
    result_value_ptr[428] = -1;
    result_value_ptr[429] = _tmp31;
    result_value_ptr[430] = _tmp69;
    result_value_ptr[431] = -6;
    result_value_ptr[432] = x1;
    result_value_ptr[433] = -_tmp13*_tmp7;
    result_value_ptr[434] = _tmp182 - Scalar(6.0)*x1;
    result_value_ptr[435] = _tmp25*_tmp7 - Scalar(1)/Scalar(4)*_tmp37;
    result_value_ptr[436] = _tmp10 + _tmp182;
    result_value_ptr[437] = _tmp131;
    result_value_ptr[438] = _tmp37;
    result_value_ptr[439] = _tmp67;
    result_value_ptr[440] = -_tmp183 - _tmp65;
    result_value_ptr[441] = x1;
    result_value_ptr[442] = 8;
    result_value_ptr[443] = _tmp89;
    result_value_ptr[444] = _tmp64;
    result_value_ptr[445] = _tmp7 + Scalar(2.0);
    result_value_ptr[446] = _tmp48;
    result_value_ptr[447] = _tmp130;
    result_value_ptr[448] = Scalar(12.0);
    result_value_ptr[449] = _tmp9;
    result_value_ptr[450] = _tmp11*_tmp42;
    result_value_ptr[451] = _tmp121;
    result_value_ptr[452] = _tmp31 - 1;
    result_value_ptr[453] = _tmp47;
    result_value_ptr[454] = -_tmp9*x0;
    result_value_ptr[455] = _tmp160;
    result_value_ptr[456] = _tmp28*x0;
    result_value_ptr[457] = _tmp137*_tmp160 + _tmp184 + 7;
    result_value_ptr[458] = -_tmp160*_tmp82;
    result_value_ptr[459] = _tmp2;
    result_value_ptr[460] = -4;
    result_value_ptr[461] = _tmp7;
    result_value_ptr[462] = _tmp185;
    result_value_ptr[463] = _tmp17*_tmp7 + _tmp75;
    result_value_ptr[464] = _tmp69;
    result_value_ptr[465] = _tmp64;
    result_value_ptr[466] = _tmp165;
    result_value_ptr[467] = _tmp99;
    result_value_ptr[468] = -_tmp186;
    result_value_ptr[469] = _tmp101;
    result_value_ptr[470] = -_tmp187 - _tmp45 - _tmp57;
    result_value_ptr[471] = _tmp186;
    result_value_ptr[472] = -Scalar(2.0)*_tmp33 + _tmp34;
    result_value_ptr[473] = -_tmp186*_tmp52;
    result_value_ptr[474] = _tmp83;
    result_value_ptr[475] = _tmp188;
    result_value_ptr[476] = -_tmp137*_tmp29;
    result_value_ptr[477] = _tmp161 + _tmp188 + _tmp189;
    result_value_ptr[478] = -30;
    result_value_ptr[479] = -_tmp161;
    result_value_ptr[480] = _tmp188;
    result_value_ptr[481] = -2;
    result_value_ptr[482] = -4;
    result_value_ptr[483] = 2;
    result_value_ptr[484] = -4;
    result_value_ptr[485] = _tmp184;
    result_value_ptr[486] = _tmp190;
    result_value_ptr[487] = _tmp144;
    result_value_ptr[488] = _tmp122;
    result_value_ptr[489] = _tmp70 - 6;
    result_value_ptr[490] = _tmp143;
    result_value_ptr[491] = _tmp190;
    result_value_ptr[492] = _tmp142;
    result_value_ptr[493] = -_tmp82;
    result_value_ptr[494] = _tmp81;
    result_value_ptr[495] = -_tmp124;
    result_value_ptr[496] = _tmp77;
    result_value_ptr[497] = -_tmp185 - _tmp70;
    result_value_ptr[498] = x1 - 38;
    result_value_ptr[499] = -_tmp57 - Scalar(5.0)*x1 + Scalar(-2.0);
    result_value_ptr[500] = -_tmp52*_tmp82 + _tmp81;
    result_value_ptr[501] = -8;
    result_value_ptr[502] = 2;
    result_value_ptr[503] = _tmp179;
    result_value_ptr[504] = _tmp2;
    result_value_ptr[505] = -8;
    result_value_ptr[506] = _tmp27*_tmp82;
    result_value_ptr[507] = _tmp135 - 14;
    result_value_ptr[508] = _tmp181 + Scalar(-2.0);
    result_value_ptr[509] = _tmp179 + _tmp183 + _tmp99;
    result_value_ptr[510] = _tmp151;
    result_value_ptr[511] = _tmp82*(_tmp96 + 2);
    result_value_ptr[512] = _tmp169;
    result_value_ptr[513] = -_tmp28*_tmp67 - _tmp5*x0;
    result_value_ptr[514] = 12 - _tmp56;
    result_value_ptr[515] = 9;
    result_value_ptr[516] = _tmp2;
    result_value_ptr[517] = -2;
    result_value_ptr[518] = _tmp68;
    result_value_ptr[519] = -_tmp183 - _tmp37;
    result_value_ptr[520] = _tmp67*x0;
    result_value_ptr[521] = -_tmp119;
    result_value_ptr[522] = _tmp112;
    result_value_ptr[523] = _tmp80;
    result_value_ptr[524] = x0;
    result_value_ptr[525] = -_tmp191 - _tmp192 - 2;
    result_value_ptr[526] = -_tmp134*_tmp59;
    result_value_ptr[527] = 8;
    result_value_ptr[528] = _tmp17*_tmp60;
    result_value_ptr[529] = -_tmp13*_tmp17;
    result_value_ptr[530] = _tmp138;
    result_value_ptr[531] = _tmp68;
    result_value_ptr[532] = _tmp148;
    result_value_ptr[533] = 5;
    result_value_ptr[534] = _tmp41;
    result_value_ptr[535] = _tmp132;
    result_value_ptr[536] = _tmp173;
    result_value_ptr[537] = -8*_tmp9;
    result_value_ptr[538] = -_tmp0*_tmp31 + _tmp131;
    result_value_ptr[539] = _tmp159;
    result_value_ptr[540] = _tmp2;
    result_value_ptr[541] = _tmp37;
    result_value_ptr[542] = _tmp56;
    result_value_ptr[543] = _tmp37 - _tmp59*x0;
    result_value_ptr[544] = _tmp37;
    result_value_ptr[545] = _tmp94;
    result_value_ptr[546] = _tmp63*x1;
    result_value_ptr[547] = _tmp91;
    result_value_ptr[548] = (Scalar(1)/Scalar(2))*_tmp147;
    result_value_ptr[549] = 2;
    result_value_ptr[550] = -_tmp193 - _tmp9;
    result_value_ptr[551] = _tmp10;
    result_value_ptr[552] = 2*_tmp147;
    result_value_ptr[553] = _tmp7;
    result_value_ptr[554] = Scalar(2.0);
    result_value_ptr[555] = 8;
    result_value_ptr[556] = _tmp64;
    result_value_ptr[557] = Scalar(-2.0);
    result_value_ptr[558] = _tmp194 - Scalar(1.0)*_tmp9;
    result_value_ptr[559] = _tmp196;
    result_value_ptr[560] = x1;
    result_value_ptr[561] = -2;
    result_value_ptr[562] = _tmp196;
    result_value_ptr[563] = -2;
    result_value_ptr[564] = -_tmp195 - 4;
    result_value_ptr[565] = _tmp0*_tmp10 + _tmp31;
    result_value_ptr[566] = -_tmp10*_tmp63 - _tmp66;
    result_value_ptr[567] = _tmp184;
    result_value_ptr[568] = _tmp38;
    result_value_ptr[569] = 1;
    result_value_ptr[570] = _tmp184;
    result_value_ptr[571] = -1;
    result_value_ptr[572] = 2 - _tmp79;
    result_value_ptr[573] = _tmp161 + 2;
    result_value_ptr[574] = _tmp6 + _tmp96 + 9;
    result_value_ptr[575] = _tmp41;
    result_value_ptr[576] = _tmp197;
    result_value_ptr[577] = _tmp144;
    result_value_ptr[578] = _tmp197;
    result_value_ptr[579] = _tmp2;
    result_value_ptr[580] = _tmp197 + _tmp57;
    result_value_ptr[581] = -_tmp0*_tmp63 + _tmp170;
    result_value_ptr[582] = -_tmp198 - _tmp2 + std::pow(_tmp63, Scalar(2));
    result_value_ptr[583] = _tmp198;
    result_value_ptr[584] = _tmp8;
    result_value_ptr[585] = _tmp126;
    result_value_ptr[586] = _tmp1 + 6*_tmp12 + _tmp70 + 12;
    result_value_ptr[587] = _tmp131;
    result_value_ptr[588] = _tmp73;
    result_value_ptr[589] = _tmp121;
    result_value_ptr[590] = _tmp48;
    result_value_ptr[591] = _tmp79;
    result_value_ptr[592] = _tmp85 + 12;
    result_value_ptr[593] = 2;
    result_value_ptr[594] = 2;
    result_value_ptr[595] = -4;
    result_value_ptr[596] = -_tmp12;
    result_value_ptr[597] = _tmp199;
    result_value_ptr[598] = _tmp76;
    result_value_ptr[599] = _tmp12 + _tmp37;
    result_value_ptr[600] = -4;
    result_value_ptr[601] = _tmp200;
    result_value_ptr[602] = _tmp201;
    result_value_ptr[603] = 8;
    result_value_ptr[604] = _tmp41;
    result_value_ptr[605] = _tmp188;
    result_value_ptr[606] = -_tmp19 - _tmp40;
    result_value_ptr[607] = _tmp17;
    result_value_ptr[608] = _tmp89;
    result_value_ptr[609] = -4;
    result_value_ptr[610] = _tmp3;
    result_value_ptr[611] = _tmp37;
    result_value_ptr[612] = _tmp25*_tmp3 - _tmp7 - _tmp70;
    result_value_ptr[613] = -_tmp3*_tmp40;
    result_value_ptr[614] = _tmp48;
    result_value_ptr[615] = Scalar(-2.0);
    result_value_ptr[616] = -2;
    result_value_ptr[617] = _tmp8;
    result_value_ptr[618] = 2;
    result_value_ptr[619] = _tmp202;
    result_value_ptr[620] = _tmp7;
    result_value_ptr[621] = _tmp135;
    result_value_ptr[622] = _tmp8;
    result_value_ptr[623] = 8;
    result_value_ptr[624] = _tmp115;
    result_value_ptr[625] = _tmp26;
    result_value_ptr[626] = _tmp115 + x0 + Scalar(1.5);
    result_value_ptr[627] = -_tmp203;
    result_value_ptr[628] = _tmp203;
    result_value_ptr[629] = Scalar(1.0);
    result_value_ptr[630] = 3;
    result_value_ptr[631] = -_tmp11*_tmp31;
    result_value_ptr[632] = _tmp204;
    result_value_ptr[633] = _tmp177;
    result_value_ptr[634] = -7*x1 - 6;
    result_value_ptr[635] = 2;
    result_value_ptr[636] = x1;
    result_value_ptr[637] = -_tmp143;
    result_value_ptr[638] = -8;
    result_value_ptr[639] = _tmp0;
    result_value_ptr[640] = _tmp26 + std::pow(_tmp29, Scalar(2)) - 1;
    result_value_ptr[641] = x1 - 7;
    result_value_ptr[642] = 4;
    result_value_ptr[643] = _tmp29*_tmp56;
    result_value_ptr[644] = _tmp3;
    result_value_ptr[645] = _tmp26;
    result_value_ptr[646] = -4;
    result_value_ptr[647] = -_tmp44 - 4;
    result_value_ptr[648] = _tmp32;
    result_value_ptr[649] = -_tmp26 - _tmp89;
    result_value_ptr[650] = -_tmp58 - x1;
    result_value_ptr[651] = _tmp2 - 1;
    result_value_ptr[652] = -8;
    result_value_ptr[653] = _tmp205;
    result_value_ptr[654] = _tmp190*_tmp206;
    result_value_ptr[655] = _tmp208;
    result_value_ptr[656] = _tmp207;
    result_value_ptr[657] = _tmp208;
    result_value_ptr[658] = _tmp15*_tmp29 + _tmp167;
    result_value_ptr[659] = _tmp29*_tmp34;
    result_value_ptr[660] = _tmp196;
    result_value_ptr[661] = _tmp104*_tmp2;
    result_value_ptr[662] = _tmp10*_tmp13 - _tmp117*_tmp209 + _tmp2;
    result_value_ptr[663] = _tmp57;
    result_value_ptr[664] = _tmp120;
    result_value_ptr[665] = _tmp64;
    result_value_ptr[666] = _tmp50;
    result_value_ptr[667] = -2;
    result_value_ptr[668] = _tmp110;
    result_value_ptr[669] = _tmp8;
    result_value_ptr[670] = _tmp111;
    result_value_ptr[671] = _tmp210;
    result_value_ptr[672] = _tmp102;
    result_value_ptr[673] = _tmp8;
    result_value_ptr[674] = _tmp58;
    result_value_ptr[675] = -_tmp101 - _tmp11*_tmp2;
    result_value_ptr[676] = 1;
    result_value_ptr[677] = _tmp68;
    result_value_ptr[678] = _tmp140;
    result_value_ptr[679] = _tmp48;
    result_value_ptr[680] = -_tmp179;
    result_value_ptr[681] = _tmp31;
    result_value_ptr[682] = _tmp206*x0;
    result_value_ptr[683] = _tmp15;
    result_value_ptr[684] = _tmp11*_tmp129 - _tmp204 + _tmp34;
    result_value_ptr[685] = _tmp29*_tmp31;
    result_value_ptr[686] = _tmp121;
    result_value_ptr[687] = _tmp11;
    result_value_ptr[688] = _tmp101;
    result_value_ptr[689] = _tmp31;
    result_value_ptr[690] = _tmp75;
    result_value_ptr[691] = -_tmp173 - _tmp56;
    result_value_ptr[692] = _tmp194;
    result_value_ptr[693] = -8;
    result_value_ptr[694] = _tmp135 - 3;
    result_value_ptr[695] = -Scalar(1.5)*_tmp33;
    result_value_ptr[696] = _tmp127;
    result_value_ptr[697] = _tmp211*_tmp29 - 6*_tmp33 + 6;
    result_value_ptr[698] = -_tmp211*_tmp82;
    result_value_ptr[699] = _tmp33;
    result_value_ptr[700] = -_tmp180*_tmp33;
    result_value_ptr[701] = _tmp32;
    result_value_ptr[702] = -6;
    result_value_ptr[703] = _tmp108;
    result_value_ptr[704] = _tmp207;
    result_value_ptr[705] = -_tmp0*_tmp29 - 3;
    result_value_ptr[706] = _tmp162;
    result_value_ptr[707] = Scalar(3.0);
    result_value_ptr[708] = 4;
    result_value_ptr[709] = _tmp85*x1;
    result_value_ptr[710] = _tmp83;
    result_value_ptr[711] = _tmp154 + _tmp56 + x1 + 6;
    result_value_ptr[712] = -2;
    result_value_ptr[713] = _tmp15 + _tmp7;
    result_value_ptr[714] = _tmp125;
    result_value_ptr[715] = _tmp8;
    result_value_ptr[716] = _tmp23 + Scalar(-6.0);
    result_value_ptr[717] = _tmp165;
    result_value_ptr[718] = _tmp2 + _tmp31;
    result_value_ptr[719] = -_tmp189;
    result_value_ptr[720] = _tmp48 + std::pow(_tmp82, Scalar(2)) - 2;
    result_value_ptr[721] = 6 - _tmp31;
    result_value_ptr[722] = _tmp15*_tmp82 + 4;
    result_value_ptr[723] = _tmp208;
    result_value_ptr[724] = x1;
    result_value_ptr[725] = _tmp87;
    result_value_ptr[726] = _tmp202;
    result_value_ptr[727] = -_tmp85;
    result_value_ptr[728] = _tmp143;
    result_value_ptr[729] = _tmp205 + _tmp67;
    result_value_ptr[730] = _tmp7;
    result_value_ptr[731] = -_tmp192 - 10;
    result_value_ptr[732] = -4;
    result_value_ptr[733] = _tmp192*_tmp209;
    result_value_ptr[734] = _tmp201;
    result_value_ptr[735] = -_tmp15*_tmp5 + Scalar(-0.5);
    result_value_ptr[736] = _tmp156;
    result_value_ptr[737] = Scalar(0.5);
    result_value_ptr[738] = Scalar(2.0) - _tmp7;
    result_value_ptr[739] = 8 - _tmp44;
    result_value_ptr[740] = -_tmp58*x1;
    result_value_ptr[741] = _tmp212*x0 - _tmp58*x0;
    result_value_ptr[742] = -_tmp212;
    result_value_ptr[743] = _tmp199;
    result_value_ptr[744] = _tmp213;
    result_value_ptr[745] = _tmp213 + x1;
    result_value_ptr[746] = x0;
    result_value_ptr[747] = _tmp48;
    result_value_ptr[748] = -_tmp129;
    result_value_ptr[749] = _tmp64;
    result_value_ptr[750] = _tmp64;
    result_value_ptr[751] = -_tmp27*_tmp92 - _tmp48 - _tmp7*_tmp82;
    result_value_ptr[752] = _tmp2;
    result_value_ptr[753] = -2;
    result_value_ptr[754] = _tmp173;
    result_value_ptr[755] = -_tmp129*_tmp13;
    result_value_ptr[756] = _tmp106;
    result_value_ptr[757] = _tmp83;
    result_value_ptr[758] = -_tmp0*_tmp47;
    result_value_ptr[759] = _tmp8;
    result_value_ptr[760] = _tmp48;
    result_value_ptr[761] = _tmp61;
    result_value_ptr[762] = -_tmp34 + Scalar(-1.0);
    result_value_ptr[763] = _tmp176*x1;
    result_value_ptr[764] = _tmp64;
    result_value_ptr[765] = 6;
    result_value_ptr[766] = -2;
    result_value_ptr[767] = 3*_tmp9 - 6;
    result_value_ptr[768] = _tmp26;
    result_value_ptr[769] = _tmp8;
    result_value_ptr[770] = 2;
    result_value_ptr[771] = -4;
    result_value_ptr[772] = Scalar(6.0);
    result_value_ptr[773] = _tmp58;
    result_value_ptr[774] = _tmp200;
    result_value_ptr[775] = -_tmp0*_tmp23 - _tmp41 - 1;
    result_value_ptr[776] = _tmp67;
    result_value_ptr[777] = -4;
    result_value_ptr[778] = -_tmp117*x1;
    result_value_ptr[779] = _tmp8;
    result_value_ptr[780] = -_tmp117*x0 - _tmp31;
    result_value_ptr[781] = 4;
    result_value_ptr[782] = -8;
    result_value_ptr[783] = _tmp117*_tmp2;
    result_value_ptr[784] = _tmp89;
    result_value_ptr[785] = _tmp104;
    result_value_ptr[786] = x0;
    result_value_ptr[787] = _tmp163;
    result_value_ptr[788] = _tmp114;
    result_value_ptr[789] = -_tmp104 - _tmp41;
    result_value_ptr[790] = _tmp49;
    result_value_ptr[791] = -1;
    result_value_ptr[792] = _tmp68;
    result_value_ptr[793] = -2;
    result_value_ptr[794] = -2;
    result_value_ptr[795] = _tmp26;
    result_value_ptr[796] = _tmp8;
    result_value_ptr[797] = 2;
    result_value_ptr[798] = _tmp76;
    result_value_ptr[799] = _tmp57;
    result_value_ptr[800] = x1;
    result_value_ptr[801] = _tmp171;
    result_value_ptr[802] = Scalar(6.0) - x1;
    result_value_ptr[803] = -4;
    result_value_ptr[804] = -2;
    result_value_ptr[805] = -_tmp214;
    result_value_ptr[806] = _tmp171;
    result_value_ptr[807] = 2;
    result_value_ptr[808] = _tmp84 - 4;
    result_value_ptr[809] = _tmp84;
    result_value_ptr[810] = _tmp165;
    result_value_ptr[811] = _tmp215*x1;
    result_value_ptr[812] = _tmp215*x0;
    result_value_ptr[813] = -_tmp2*_tmp215 - _tmp26 - 1;
    result_value_ptr[814] = _tmp165;
    result_value_ptr[815] = _tmp48;
    result_value_ptr[816] = _tmp200;
    result_value_ptr[817] = _tmp200;
    result_value_ptr[818] = -_tmp209 - _tmp41;
    result_value_ptr[819] = _tmp144;
    result_value_ptr[820] = _tmp125;
    result_value_ptr[821] = x0;
    result_value_ptr[822] = _tmp55;
    result_value_ptr[823] = _tmp187 + _tmp31 + _tmp53;
    result_value_ptr[824] = Scalar(8.0);
    result_value_ptr[825] = _tmp8;
    result_value_ptr[826] = _tmp67;
    result_value_ptr[827] = x1;
    result_value_ptr[828] = _tmp171;
    result_value_ptr[829] = _tmp184;
    result_value_ptr[830] = 1;
    result_value_ptr[831] = 2;
    result_value_ptr[832] = _tmp86;
    result_value_ptr[833] = 1;
    result_value_ptr[834] = _tmp62;
    result_value_ptr[835] = _tmp17;
    result_value_ptr[836] = _tmp69 - 4;
    result_value_ptr[837] = 2 - _tmp55;
    result_value_ptr[838] = _tmp97;
    result_value_ptr[839] = Scalar(4.0) - _tmp55;
    result_value_ptr[840] = std::pow(_tmp67, Scalar(2));
    result_value_ptr[841] = x1;
    result_value_ptr[842] = -6;
    result_value_ptr[843] = _tmp49;
    result_value_ptr[844] = _tmp90;
    result_value_ptr[845] = _tmp82;
    result_value_ptr[846] = _tmp56 - _tmp67*_tmp79 + 1;
    result_value_ptr[847] = _tmp5 + x0;
    result_value_ptr[848] = _tmp86 - Scalar(3)/Scalar(2)*x1 + Scalar(1)/Scalar(2);
    result_value_ptr[849] = _tmp108;
    result_value_ptr[850] = _tmp139;
    result_value_ptr[851] = _tmp48;
    result_value_ptr[852] = _tmp123;
    result_value_ptr[853] = -6;
    result_value_ptr[854] = Scalar(4.0) - _tmp98;
    result_value_ptr[855] = -_tmp19 - Scalar(11.0)*x0 + Scalar(-2.0);
    result_value_ptr[856] = _tmp1 + Scalar(2.0);
    result_value_ptr[857] = -_tmp103*x0 - Scalar(4.0)*_tmp12 - _tmp210 + 6;
    result_value_ptr[858] = -_tmp110;
    result_value_ptr[859] = _tmp64;
    result_value_ptr[860] = -2;
    result_value_ptr[861] = -_tmp104*x1;
    result_value_ptr[862] = _tmp105;
    result_value_ptr[863] = _tmp31;
    result_value_ptr[864] = -_tmp77;
    result_value_ptr[865] = _tmp70*x1 - _tmp79 - 4;
    result_value_ptr[866] = -_tmp98 - 1;
    result_value_ptr[867] = -8*_tmp12 + _tmp34*x1 - Scalar(9)/Scalar(2)*x1 + Scalar(-1)/Scalar(2);
    result_value_ptr[868] = _tmp193;
    result_value_ptr[869] = -_tmp105*_tmp7;
    result_value_ptr[870] = _tmp136 + Scalar(-4.0);
    result_value_ptr[871] = _tmp150 + _tmp214;

    return result;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
