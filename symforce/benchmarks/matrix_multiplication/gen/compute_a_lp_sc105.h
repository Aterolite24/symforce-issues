// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     cpp_templates/function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once


#include <Eigen/Dense>
#include <Eigen/Sparse>



namespace sym {


/**
* This function was autogenerated. Do not modify by hand.
*
* Args:
*     x0: Scalar
*     x1: Scalar
*
* Outputs:
*     result: Matrix105_163
*
*/
template <typename Scalar>
Eigen::SparseMatrix<Scalar> ComputeALpSc105(const Scalar x0, const Scalar x1) {

    // Total ops: 84

    // Input arrays

    // Intermediate terms (43)
    const Scalar _tmp0 = x1 - 1;
    const Scalar _tmp1 = x1 + 1;
    const Scalar _tmp2 = x0 - 2;
    const Scalar _tmp3 = x0 - 1;
    const Scalar _tmp4 = -_tmp3;
    const Scalar _tmp5 = 2*x1;
    const Scalar _tmp6 = -_tmp0;
    const Scalar _tmp7 = std::pow(x0, Scalar(2));
    const Scalar _tmp8 = -_tmp7;
    const Scalar _tmp9 = std::pow(x1, Scalar(2));
    const Scalar _tmp10 = -_tmp9;
    const Scalar _tmp11 = x0 + 2;
    const Scalar _tmp12 = x1 + 2;
    const Scalar _tmp13 = -_tmp12;
    const Scalar _tmp14 = 2*x0;
    const Scalar _tmp15 = x0 + 3;
    const Scalar _tmp16 = (Scalar(1)/Scalar(2))*x1;
    const Scalar _tmp17 = -_tmp1;
    const Scalar _tmp18 = -x1;
    const Scalar _tmp19 = x0 + 1;
    const Scalar _tmp20 = -_tmp19;
    const Scalar _tmp21 = _tmp5 + 4;
    const Scalar _tmp22 = Scalar(1.0) / (x0);
    const Scalar _tmp23 = _tmp18 + x0;
    const Scalar _tmp24 = -_tmp23;
    const Scalar _tmp25 = -_tmp11;
    const Scalar _tmp26 = -_tmp22;
    const Scalar _tmp27 = -_tmp2;
    const Scalar _tmp28 = -_tmp14;
    const Scalar _tmp29 = Scalar(1.0) / (x1);
    const Scalar _tmp30 = -_tmp5;
    const Scalar _tmp31 = -x0*x1;
    const Scalar _tmp32 = -_tmp14 - _tmp5;
    const Scalar _tmp33 = 4*x1;
    const Scalar _tmp34 = x1 - 2;
    const Scalar _tmp35 = -_tmp34;
    const Scalar _tmp36 = _tmp0 + x0;
    const Scalar _tmp37 = 2*_tmp29;
    const Scalar _tmp38 = -x0;
    const Scalar _tmp39 = -_tmp37;
    const Scalar _tmp40 = 4*x0;
    const Scalar _tmp41 = 3*x0;
    const Scalar _tmp42 = -2*_tmp22;

    // Output terms (1)
    static constexpr int kRows_result = 105;
    static constexpr int kCols_result = 163;
    static constexpr int kNumNonZero_result = 318;
    static constexpr int kColPtrs_result[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 66, 69, 71, 74, 77, 80, 83, 84, 86, 88, 90, 93, 96, 99, 102, 105, 108, 111, 113, 115, 116, 119, 122, 125, 127, 130, 133, 136, 139, 141, 143, 144, 147, 149, 151, 154, 157, 160, 163, 166, 168, 170, 172, 174, 177, 180, 182, 185, 188, 191, 193, 195, 197, 199, 202, 205, 208, 211, 214, 216, 219, 222, 224, 226, 228, 231, 234, 237, 240, 243, 246, 249, 252, 253, 255, 257, 260, 262, 265, 268, 271, 274, 277, 279, 280, 281, 283, 285, 287, 289, 292, 294, 296, 298, 300, 302, 304, 306, 309, 312, 316, 318};
    static constexpr int kRowIndices_result[] = {0, 1, 2, 7, 8, 9, 10, 11, 12, 18, 19, 20, 21, 22, 23, 29, 30, 31, 32, 33, 34, 40, 41, 42, 43, 44, 45, 51, 52, 53, 54, 55, 56, 62, 63, 64, 65, 66, 67, 73, 74, 75, 76, 77, 78, 84, 85, 86, 87, 88, 89, 95, 96, 97, 98, 99, 100, 102, 103, 104, 0, 1, 4, 0, 1, 5, 0, 1, 6, 3, 13, 3, 12, 14, 4, 7, 15, 5, 8, 16, 6, 9, 17, 10, 8, 11, 9, 12, 10, 15, 10, 11, 16, 10, 11, 17, 13, 14, 24, 14, 23, 25, 15, 18, 26, 16, 19, 27, 17, 20, 28, 18, 21, 19, 22, 20, 21, 22, 26, 21, 22, 27, 21, 22, 28, 25, 35, 25, 34, 36, 26, 29, 37, 27, 30, 38, 28, 31, 39, 29, 32, 30, 33, 31, 32, 33, 37, 32, 33, 32, 33, 35, 36, 46, 36, 45, 47, 37, 40, 48, 38, 41, 49, 39, 42, 50, 40, 43, 41, 44, 42, 45, 43, 44, 43, 44, 49, 43, 44, 50, 47, 57, 47, 56, 58, 48, 51, 59, 49, 52, 60, 50, 53, 51, 54, 52, 55, 53, 56, 54, 55, 59, 54, 55, 60, 54, 55, 61, 57, 58, 68, 58, 67, 69, 62, 70, 60, 63, 71, 61, 64, 72, 62, 65, 63, 66, 64, 67, 65, 66, 70, 65, 66, 71, 65, 66, 72, 68, 69, 79, 69, 78, 80, 70, 73, 81, 71, 74, 82, 72, 75, 83, 76, 74, 77, 75, 78, 76, 77, 81, 77, 82, 76, 77, 83, 79, 80, 90, 80, 89, 91, 81, 84, 92, 82, 85, 93, 83, 94, 84, 88, 86, 89, 88, 92, 88, 93, 88, 94, 90, 91, 101, 91, 100, 92, 95, 93, 96, 94, 97, 95, 98, 96, 99, 97, 100, 98, 99, 102, 98, 102, 103, 98, 99, 102, 103, 101, 104};
    Scalar result_empty_value_ptr[318];
    Eigen::SparseMatrix<Scalar> result = Eigen::Map<const Eigen::SparseMatrix<Scalar>>(
        kRows_result,
        kCols_result,
        kNumNonZero_result,
        kColPtrs_result,
        kRowIndices_result,
        result_empty_value_ptr
    );
    Scalar* result_value_ptr = result.valuePtr();


    result_value_ptr[0] = _tmp0;
    result_value_ptr[1] = -3;
    result_value_ptr[2] = _tmp1;
    result_value_ptr[3] = -2;
    result_value_ptr[4] = -1;
    result_value_ptr[5] = _tmp2 + x1;
    result_value_ptr[6] = _tmp2;
    result_value_ptr[7] = Scalar(-3.0);
    result_value_ptr[8] = 2;
    result_value_ptr[9] = _tmp4;
    result_value_ptr[10] = _tmp5;
    result_value_ptr[11] = _tmp6;
    result_value_ptr[12] = _tmp8;
    result_value_ptr[13] = _tmp10;
    result_value_ptr[14] = _tmp11*x0;
    result_value_ptr[15] = _tmp6;
    result_value_ptr[16] = _tmp13;
    result_value_ptr[17] = -4;
    result_value_ptr[18] = -8;
    result_value_ptr[19] = _tmp14;
    result_value_ptr[20] = x0;
    result_value_ptr[21] = x1;
    result_value_ptr[22] = 1;
    result_value_ptr[23] = 1;
    result_value_ptr[24] = -1;
    result_value_ptr[25] = x0;
    result_value_ptr[26] = -4;
    result_value_ptr[27] = 2;
    result_value_ptr[28] = -_tmp15;
    result_value_ptr[29] = 2;
    result_value_ptr[30] = x0;
    result_value_ptr[31] = -_tmp16;
    result_value_ptr[32] = 2;
    result_value_ptr[33] = 1;
    result_value_ptr[34] = -8;
    result_value_ptr[35] = 1;
    result_value_ptr[36] = 1;
    result_value_ptr[37] = x1;
    result_value_ptr[38] = _tmp17;
    result_value_ptr[39] = _tmp14;
    result_value_ptr[40] = 1 - _tmp5;
    result_value_ptr[41] = -1;
    result_value_ptr[42] = _tmp18;
    result_value_ptr[43] = Scalar(-3.0);
    result_value_ptr[44] = 2;
    result_value_ptr[45] = _tmp15;
    result_value_ptr[46] = 2;
    result_value_ptr[47] = -2;
    result_value_ptr[48] = _tmp20;
    result_value_ptr[49] = 2;
    result_value_ptr[50] = -2;
    result_value_ptr[51] = -2;
    result_value_ptr[52] = 2;
    result_value_ptr[53] = _tmp11;
    result_value_ptr[54] = _tmp20;
    result_value_ptr[55] = _tmp18;
    result_value_ptr[56] = 4;
    result_value_ptr[57] = 2;
    result_value_ptr[58] = -_tmp21;
    result_value_ptr[59] = _tmp9 + 2;
    result_value_ptr[60] = _tmp14 + 1;
    result_value_ptr[61] = -2;
    result_value_ptr[62] = -2;
    result_value_ptr[63] = 2;
    result_value_ptr[64] = 2;
    result_value_ptr[65] = -1;
    result_value_ptr[66] = 1;
    result_value_ptr[67] = _tmp5;
    result_value_ptr[68] = 3;
    result_value_ptr[69] = -1;
    result_value_ptr[70] = -1;
    result_value_ptr[71] = -3;
    result_value_ptr[72] = -1;
    result_value_ptr[73] = 2;
    result_value_ptr[74] = -2;
    result_value_ptr[75] = -_tmp22*x1;
    result_value_ptr[76] = 1;
    result_value_ptr[77] = 2;
    result_value_ptr[78] = 3;
    result_value_ptr[79] = _tmp5 + 1;
    result_value_ptr[80] = _tmp24;
    result_value_ptr[81] = _tmp16;
    result_value_ptr[82] = _tmp18;
    result_value_ptr[83] = _tmp25;
    result_value_ptr[84] = _tmp26;
    result_value_ptr[85] = _tmp23;
    result_value_ptr[86] = 2;
    result_value_ptr[87] = _tmp27;
    result_value_ptr[88] = 1;
    result_value_ptr[89] = _tmp6;
    result_value_ptr[90] = _tmp28;
    result_value_ptr[91] = -1;
    result_value_ptr[92] = 2;
    result_value_ptr[93] = _tmp1;
    result_value_ptr[94] = 1;
    result_value_ptr[95] = _tmp3;
    result_value_ptr[96] = -2;
    result_value_ptr[97] = -2;
    result_value_ptr[98] = x0;
    result_value_ptr[99] = Scalar(-2.0);
    result_value_ptr[100] = -_tmp29;
    result_value_ptr[101] = _tmp18;
    result_value_ptr[102] = 2;
    result_value_ptr[103] = _tmp24;
    result_value_ptr[104] = 2;
    result_value_ptr[105] = _tmp30;
    result_value_ptr[106] = _tmp11;
    result_value_ptr[107] = _tmp14 + 2;
    result_value_ptr[108] = x0;
    result_value_ptr[109] = x0;
    result_value_ptr[110] = _tmp31;
    result_value_ptr[111] = _tmp32;
    result_value_ptr[112] = _tmp2*_tmp29;
    result_value_ptr[113] = _tmp14;
    result_value_ptr[114] = _tmp20;
    result_value_ptr[115] = _tmp18;
    result_value_ptr[116] = -1;
    result_value_ptr[117] = _tmp32;
    result_value_ptr[118] = _tmp20;
    result_value_ptr[119] = Scalar(-0.5);
    result_value_ptr[120] = _tmp25;
    result_value_ptr[121] = -1;
    result_value_ptr[122] = -1;
    result_value_ptr[123] = _tmp20;
    result_value_ptr[124] = _tmp1;
    result_value_ptr[125] = 2;
    result_value_ptr[126] = x1;
    result_value_ptr[127] = _tmp13;
    result_value_ptr[128] = Scalar(1.0);
    result_value_ptr[129] = _tmp20;
    result_value_ptr[130] = _tmp19;
    result_value_ptr[131] = x0;
    result_value_ptr[132] = 4 - _tmp5;
    result_value_ptr[133] = -2;
    result_value_ptr[134] = -1;
    result_value_ptr[135] = x0;
    result_value_ptr[136] = _tmp30;
    result_value_ptr[137] = -2;
    result_value_ptr[138] = -3;
    result_value_ptr[139] = _tmp0;
    result_value_ptr[140] = -2;
    result_value_ptr[141] = -_tmp33;
    result_value_ptr[142] = _tmp27;
    result_value_ptr[143] = x0;
    result_value_ptr[144] = _tmp35;
    result_value_ptr[145] = Scalar(-3.0);
    result_value_ptr[146] = -2;
    result_value_ptr[147] = (Scalar(1)/Scalar(2))*x0;
    result_value_ptr[148] = _tmp36;
    result_value_ptr[149] = _tmp35;
    result_value_ptr[150] = x1;
    result_value_ptr[151] = 2;
    result_value_ptr[152] = _tmp5;
    result_value_ptr[153] = _tmp37 + 2;
    result_value_ptr[154] = _tmp18;
    result_value_ptr[155] = 2;
    result_value_ptr[156] = -2;
    result_value_ptr[157] = 1;
    result_value_ptr[158] = 4;
    result_value_ptr[159] = 1;
    result_value_ptr[160] = -1;
    result_value_ptr[161] = x1 + 3;
    result_value_ptr[162] = _tmp27;
    result_value_ptr[163] = _tmp11;
    result_value_ptr[164] = 2;
    result_value_ptr[165] = -2;
    result_value_ptr[166] = _tmp33;
    result_value_ptr[167] = 4;
    result_value_ptr[168] = _tmp35;
    result_value_ptr[169] = _tmp23;
    result_value_ptr[170] = _tmp14;
    result_value_ptr[171] = x0;
    result_value_ptr[172] = 1;
    result_value_ptr[173] = 6;
    result_value_ptr[174] = Scalar(1.0);
    result_value_ptr[175] = x1;
    result_value_ptr[176] = x0;
    result_value_ptr[177] = -_tmp12 - _tmp38;
    result_value_ptr[178] = x0;
    result_value_ptr[179] = _tmp5;
    result_value_ptr[180] = _tmp20;
    result_value_ptr[181] = _tmp31;
    result_value_ptr[182] = -4;
    result_value_ptr[183] = _tmp18;
    result_value_ptr[184] = -2;
    result_value_ptr[185] = _tmp31;
    result_value_ptr[186] = 4;
    result_value_ptr[187] = -1;
    result_value_ptr[188] = -2;
    result_value_ptr[189] = -1;
    result_value_ptr[190] = -1;
    result_value_ptr[191] = _tmp0;
    result_value_ptr[192] = -2;
    result_value_ptr[193] = -_tmp30 - x0;
    result_value_ptr[194] = x0;
    result_value_ptr[195] = _tmp26;
    result_value_ptr[196] = 1;
    result_value_ptr[197] = _tmp10;
    result_value_ptr[198] = _tmp19;
    result_value_ptr[199] = x0;
    result_value_ptr[200] = -2;
    result_value_ptr[201] = -4;
    result_value_ptr[202] = _tmp6;
    result_value_ptr[203] = _tmp30;
    result_value_ptr[204] = -5;
    result_value_ptr[205] = x1 - 3;
    result_value_ptr[206] = _tmp39;
    result_value_ptr[207] = -1;
    result_value_ptr[208] = 3;
    result_value_ptr[209] = 3;
    result_value_ptr[210] = x0;
    result_value_ptr[211] = 1;
    result_value_ptr[212] = _tmp34;
    result_value_ptr[213] = _tmp21;
    result_value_ptr[214] = -1;
    result_value_ptr[215] = x1;
    result_value_ptr[216] = x0;
    result_value_ptr[217] = x1;
    result_value_ptr[218] = -1;
    result_value_ptr[219] = _tmp37;
    result_value_ptr[220] = _tmp36;
    result_value_ptr[221] = _tmp14 + x1;
    result_value_ptr[222] = _tmp40;
    result_value_ptr[223] = -4;
    result_value_ptr[224] = _tmp25;
    result_value_ptr[225] = _tmp0;
    result_value_ptr[226] = _tmp13;
    result_value_ptr[227] = -1;
    result_value_ptr[228] = -1;
    result_value_ptr[229] = _tmp6;
    result_value_ptr[230] = _tmp4;
    result_value_ptr[231] = -3;
    result_value_ptr[232] = _tmp0;
    result_value_ptr[233] = _tmp19;
    result_value_ptr[234] = 1;
    result_value_ptr[235] = 2;
    result_value_ptr[236] = x0;
    result_value_ptr[237] = _tmp27;
    result_value_ptr[238] = 1;
    result_value_ptr[239] = _tmp7 + 1;
    result_value_ptr[240] = -2;
    result_value_ptr[241] = _tmp20;
    result_value_ptr[242] = 4;
    result_value_ptr[243] = -_tmp40;
    result_value_ptr[244] = _tmp17;
    result_value_ptr[245] = 1;
    result_value_ptr[246] = -2;
    result_value_ptr[247] = _tmp41;
    result_value_ptr[248] = -2;
    result_value_ptr[249] = Scalar(1.0);
    result_value_ptr[250] = _tmp34;
    result_value_ptr[251] = -_tmp14 - _tmp30;
    result_value_ptr[252] = _tmp5 + x0;
    result_value_ptr[253] = -_tmp39 - 2;
    result_value_ptr[254] = _tmp3;
    result_value_ptr[255] = _tmp4;
    result_value_ptr[256] = 1;
    result_value_ptr[257] = _tmp20;
    result_value_ptr[258] = _tmp35;
    result_value_ptr[259] = _tmp11;
    result_value_ptr[260] = 2;
    result_value_ptr[261] = -2;
    result_value_ptr[262] = 2;
    result_value_ptr[263] = _tmp8;
    result_value_ptr[264] = -2;
    result_value_ptr[265] = -2;
    result_value_ptr[266] = x1;
    result_value_ptr[267] = 1;
    result_value_ptr[268] = x0;
    result_value_ptr[269] = x0;
    result_value_ptr[270] = _tmp1;
    result_value_ptr[271] = _tmp11;
    result_value_ptr[272] = x0 + x1;
    result_value_ptr[273] = x1;
    result_value_ptr[274] = _tmp35;
    result_value_ptr[275] = _tmp9 - 2;
    result_value_ptr[276] = x0;
    result_value_ptr[277] = -1;
    result_value_ptr[278] = -1;
    result_value_ptr[279] = -4;
    result_value_ptr[280] = x1;
    result_value_ptr[281] = _tmp0*x1;
    result_value_ptr[282] = -1;
    result_value_ptr[283] = _tmp5;
    result_value_ptr[284] = x0;
    result_value_ptr[285] = -2;
    result_value_ptr[286] = x0;
    result_value_ptr[287] = 4;
    result_value_ptr[288] = _tmp30;
    result_value_ptr[289] = -1;
    result_value_ptr[290] = -1;
    result_value_ptr[291] = Scalar(-2.0);
    result_value_ptr[292] = 2;
    result_value_ptr[293] = -2;
    result_value_ptr[294] = _tmp28;
    result_value_ptr[295] = 1;
    result_value_ptr[296] = -1;
    result_value_ptr[297] = x0;
    result_value_ptr[298] = _tmp28;
    result_value_ptr[299] = _tmp37 + x1;
    result_value_ptr[300] = -2;
    result_value_ptr[301] = 2;
    result_value_ptr[302] = x1;
    result_value_ptr[303] = _tmp35;
    result_value_ptr[304] = Scalar(2.0);
    result_value_ptr[305] = -2;
    result_value_ptr[306] = _tmp41;
    result_value_ptr[307] = _tmp20;
    result_value_ptr[308] = _tmp38;
    result_value_ptr[309] = -1;
    result_value_ptr[310] = _tmp6;
    result_value_ptr[311] = Scalar(-1.0);
    result_value_ptr[312] = -2;
    result_value_ptr[313] = _tmp42;
    result_value_ptr[314] = _tmp16 + Scalar(1)/Scalar(2);
    result_value_ptr[315] = Scalar(1.0)*x0;
    result_value_ptr[316] = 1;
    result_value_ptr[317] = _tmp42;

    return result;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
