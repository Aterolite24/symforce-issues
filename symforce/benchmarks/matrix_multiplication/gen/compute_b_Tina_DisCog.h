// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     cpp_templates/function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once


#include <Eigen/Dense>
#include <Eigen/Sparse>



namespace sym {


/**
* This function was autogenerated. Do not modify by hand.
*
* Args:
*     x0: Scalar
*     x1: Scalar
*
* Outputs:
*     result: Matrix11_11
*
*/
template <typename Scalar>
Eigen::SparseMatrix<Scalar> ComputeBTinaDiscog(const Scalar x0, const Scalar x1) {

    // Total ops: 26

    // Input arrays

    // Intermediate terms (7)
    const Scalar _tmp0 = -x1 - 1;
    const Scalar _tmp1 = 2*x0;
    const Scalar _tmp2 = _tmp1*x1;
    const Scalar _tmp3 = x0 + 2;
    const Scalar _tmp4 = (Scalar(1)/Scalar(2))*x1;
    const Scalar _tmp5 = Scalar(1.0) / (x1);
    const Scalar _tmp6 = x1 - 2;

    // Output terms (1)
    static constexpr int kRows_result = 11;
    static constexpr int kCols_result = 11;
    static constexpr int kNumNonZero_result = 44;
    static constexpr int kColPtrs_result[] = {0, 2, 9, 12, 18, 21, 26, 31, 38, 39, 41, 44};
    static constexpr int kRowIndices_result[] = {2, 9, 0, 2, 4, 5, 7, 8, 9, 0, 8, 9, 2, 4, 5, 6, 7, 10, 2, 5, 9, 0, 1, 2, 4, 10, 2, 3, 5, 7, 8, 1, 2, 3, 4, 5, 6, 10, 6, 0, 2, 6, 7, 8};
    Scalar result_empty_value_ptr[44];
    Eigen::SparseMatrix<Scalar> result = Eigen::Map<const Eigen::SparseMatrix<Scalar>>(
        kRows_result,
        kCols_result,
        kNumNonZero_result,
        kColPtrs_result,
        kRowIndices_result,
        result_empty_value_ptr
    );
    Scalar* result_value_ptr = result.valuePtr();


    result_value_ptr[0] = x1 - 4;
    result_value_ptr[1] = x1;
    result_value_ptr[2] = 1;
    result_value_ptr[3] = _tmp0;
    result_value_ptr[4] = 2;
    result_value_ptr[5] = _tmp2;
    result_value_ptr[6] = -_tmp1;
    result_value_ptr[7] = -_tmp3;
    result_value_ptr[8] = -2;
    result_value_ptr[9] = 1;
    result_value_ptr[10] = Scalar(-0.5);
    result_value_ptr[11] = Scalar(1.0)*x1;
    result_value_ptr[12] = 2;
    result_value_ptr[13] = x0;
    result_value_ptr[14] = -1;
    result_value_ptr[15] = _tmp1;
    result_value_ptr[16] = 1;
    result_value_ptr[17] = -1;
    result_value_ptr[18] = -1;
    result_value_ptr[19] = -2;
    result_value_ptr[20] = x0;
    result_value_ptr[21] = 3 - x1;
    result_value_ptr[22] = 3;
    result_value_ptr[23] = 3;
    result_value_ptr[24] = 2;
    result_value_ptr[25] = -_tmp4*x0;
    result_value_ptr[26] = _tmp0;
    result_value_ptr[27] = 3;
    result_value_ptr[28] = -_tmp2;
    result_value_ptr[29] = -1;
    result_value_ptr[30] = x0;
    result_value_ptr[31] = 2;
    result_value_ptr[32] = 2 - x0;
    result_value_ptr[33] = -6;
    result_value_ptr[34] = x1;
    result_value_ptr[35] = -_tmp5;
    result_value_ptr[36] = _tmp4;
    result_value_ptr[37] = -1/x0;
    result_value_ptr[38] = -2/_tmp6;
    result_value_ptr[39] = _tmp5*(x0 + x1);
    result_value_ptr[40] = _tmp6;
    result_value_ptr[41] = _tmp3;
    result_value_ptr[42] = 2*x1 + 1;
    result_value_ptr[43] = -2;

    return result;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
