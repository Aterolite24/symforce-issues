// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     cpp_templates/function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once


#include <Eigen/Dense>



namespace sym {


/**
* This function was autogenerated. Do not modify by hand.
*
* Args:
*     x0: Scalar
*     x1: Scalar
*
* Outputs:
*     result: Matrix20_15
*/
template <typename Scalar>
Eigen::Matrix<Scalar, 20, 15> ComputeBDenseN3C4B2(const Scalar x0, const Scalar x1) {

    // Total ops: 29

    // Input arrays

    // Intermediate terms (9)
    const Scalar _tmp0 = x1 + 2;
    const Scalar _tmp1 = 2*x0;
    const Scalar _tmp2 = -_tmp1;
    const Scalar _tmp3 = (Scalar(1)/Scalar(2))*x0;
    const Scalar _tmp4 = x1 + 1;
    const Scalar _tmp5 = x0 + 2;
    const Scalar _tmp6 = -_tmp5;
    const Scalar _tmp7 = Scalar(1.0) / (x0);
    const Scalar _tmp8 = x1 - 1;

    // Output terms (1)
    Eigen::Matrix<Scalar, 20, 15> _result;

    _result.setZero();

    _result(0, 9) = -_tmp0;
    _result(0, 13) = -_tmp1 - x1;
    _result(0, 14) = x0;
    _result(1, 8) = _tmp2;
    _result(1, 12) = -4;
    _result(1, 14) = Scalar(2.0);
    _result(2, 7) = -2;
    _result(2, 14) = x1;
    _result(3, 6) = _tmp3;
    _result(3, 10) = 1;
    _result(3, 14) = -2;
    _result(4, 5) = -4*x1;
    _result(4, 12) = _tmp4;
    _result(4, 13) = 1;
    _result(5, 4) = _tmp0;
    _result(5, 11) = 2*x1;
    _result(5, 13) = _tmp6;
    _result(6, 3) = 2;
    _result(6, 10) = 2;
    _result(6, 13) = 2;
    _result(7, 2) = -_tmp7;
    _result(7, 11) = -2;
    _result(7, 12) = -1;
    _result(8, 1) = x1;
    _result(8, 10) = _tmp8;
    _result(8, 12) = _tmp2;
    _result(9, 0) = -_tmp8;
    _result(9, 10) = 8;
    _result(9, 11) = -1;
    _result(10, 5) = _tmp3 + Scalar(1)/Scalar(2);
    _result(10, 8) = 2 - x0;
    _result(10, 9) = _tmp4 + x0;
    _result(11, 4) = x0;
    _result(11, 7) = _tmp1;
    _result(11, 9) = 3*x1;
    _result(12, 6) = _tmp6;
    _result(12, 9) = x0 - 1;
    _result(13, 2) = -4;
    _result(13, 7) = -1;
    _result(13, 8) = _tmp1;
    _result(14, 1) = x1;
    _result(14, 6) = 4;
    _result(15, 0) = x0 - x1;
    _result(15, 6) = _tmp1 + 2;
    _result(15, 7) = _tmp5;
    _result(16, 2) = -4;
    _result(16, 4) = 2;
    _result(16, 5) = _tmp1;
    _result(17, 1) = 2;
    _result(17, 3) = -_tmp7*x1;
    _result(17, 5) = _tmp2;
    _result(18, 0) = _tmp2;
    _result(18, 4) = 1;
    _result(19, 0) = -1/(x1 - 2);
    _result(19, 1) = 2;
    _result(19, 2) = Scalar(1.0);

    return _result;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
