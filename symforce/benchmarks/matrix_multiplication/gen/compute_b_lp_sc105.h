// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     cpp_templates/function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once


#include <Eigen/Dense>
#include <Eigen/Sparse>



namespace sym {


/**
* This function was autogenerated. Do not modify by hand.
*
* Args:
*     x0: Scalar
*     x1: Scalar
*
* Outputs:
*     result: Matrix105_163
*/
template <typename Scalar>
Eigen::SparseMatrix<Scalar> ComputeBLpSc105(const Scalar x0, const Scalar x1) {

    // Total ops: 87

    // Input arrays

    // Intermediate terms (45)
    const Scalar _tmp0 = x0 + 1;
    const Scalar _tmp1 = std::pow(x0, Scalar(2));
    const Scalar _tmp2 = -_tmp1;
    const Scalar _tmp3 = x0 - 1;
    const Scalar _tmp4 = x0 - 3;
    const Scalar _tmp5 = 2*_tmp1;
    const Scalar _tmp6 = 2*x0;
    const Scalar _tmp7 = -_tmp6;
    const Scalar _tmp8 = Scalar(1.0) / (x0);
    const Scalar _tmp9 = _tmp8*x1;
    const Scalar _tmp10 = 4*x1;
    const Scalar _tmp11 = -_tmp10;
    const Scalar _tmp12 = x1 + 2;
    const Scalar _tmp13 = -_tmp12;
    const Scalar _tmp14 = -x1;
    const Scalar _tmp15 = x0 - 2;
    const Scalar _tmp16 = 3*x0;
    const Scalar _tmp17 = 2*_tmp8;
    const Scalar _tmp18 = std::pow(x1, Scalar(2));
    const Scalar _tmp19 = x1 - 2;
    const Scalar _tmp20 = 4*x0;
    const Scalar _tmp21 = _tmp14 + x0;
    const Scalar _tmp22 = 2*x1;
    const Scalar _tmp23 = _tmp22 - 2;
    const Scalar _tmp24 = x1 + 1;
    const Scalar _tmp25 = -_tmp24;
    const Scalar _tmp26 = -_tmp3;
    const Scalar _tmp27 = -_tmp22;
    const Scalar _tmp28 = x1 - 1;
    const Scalar _tmp29 = x1 + 3;
    const Scalar _tmp30 = _tmp1*x1;
    const Scalar _tmp31 = -_tmp28;
    const Scalar _tmp32 = -_tmp18;
    const Scalar _tmp33 = x1 + 4;
    const Scalar _tmp34 = Scalar(1.0) / (x1);
    const Scalar _tmp35 = -x0;
    const Scalar _tmp36 = -_tmp19;
    const Scalar _tmp37 = x0*x1;
    const Scalar _tmp38 = -_tmp37;
    const Scalar _tmp39 = -_tmp21;
    const Scalar _tmp40 = x0 + 2;
    const Scalar _tmp41 = -_tmp40;
    const Scalar _tmp42 = -2*_tmp18;
    const Scalar _tmp43 = _tmp6 + 1;
    const Scalar _tmp44 = -_tmp23;

    // Output terms (1)
    static constexpr int kRows_result = 105;
    static constexpr int kCols_result = 163;
    static constexpr int kNumNonZero_result = 328;
    static constexpr int kColPtrs_result[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 64, 67, 68, 71, 74, 77, 80, 82, 84, 86, 89, 92, 95, 98, 101, 104, 107, 110, 112, 114, 116, 119, 122, 125, 128, 131, 134, 137, 140, 142, 144, 146, 148, 151, 154, 157, 160, 163, 166, 169, 171, 173, 175, 177, 180, 183, 186, 189, 192, 195, 197, 199, 201, 203, 206, 209, 212, 215, 218, 221, 224, 227, 229, 231, 233, 236, 239, 241, 244, 247, 249, 251, 254, 256, 258, 260, 263, 266, 269, 272, 274, 276, 279, 282, 284, 286, 288, 291, 294, 297, 300, 302, 304, 306, 308, 310, 311, 313, 317, 321, 326, 328};
    static constexpr int kRowIndices_result[] = {0, 1, 2, 7, 8, 9, 10, 11, 18, 19, 20, 21, 22, 23, 29, 30, 31, 32, 33, 34, 40, 41, 42, 43, 44, 45, 51, 52, 53, 54, 55, 56, 62, 63, 64, 65, 66, 67, 73, 74, 75, 76, 77, 78, 84, 85, 86, 87, 88, 89, 95, 96, 97, 98, 99, 100, 102, 103, 104, 1, 4, 0, 1, 5, 0, 1, 6, 13, 3, 12, 14, 4, 7, 15, 5, 8, 16, 6, 9, 17, 7, 10, 8, 11, 9, 12, 10, 11, 15, 10, 11, 16, 10, 11, 17, 13, 14, 24, 14, 23, 25, 15, 18, 26, 16, 19, 27, 17, 20, 28, 18, 21, 19, 22, 20, 23, 21, 22, 26, 21, 22, 27, 21, 22, 28, 24, 25, 35, 25, 34, 36, 26, 29, 37, 27, 30, 38, 28, 31, 39, 29, 32, 30, 33, 31, 34, 32, 33, 32, 33, 38, 32, 33, 39, 35, 36, 46, 36, 45, 47, 37, 40, 48, 38, 41, 49, 39, 42, 50, 40, 43, 41, 44, 42, 45, 44, 48, 43, 44, 49, 43, 44, 50, 46, 47, 57, 47, 56, 58, 48, 51, 59, 49, 52, 60, 50, 53, 51, 54, 52, 55, 53, 56, 54, 55, 59, 54, 55, 60, 54, 55, 61, 57, 58, 68, 58, 67, 69, 59, 62, 70, 60, 63, 71, 61, 64, 72, 62, 65, 63, 66, 64, 67, 65, 66, 70, 65, 66, 71, 66, 72, 68, 69, 79, 69, 78, 80, 70, 73, 71, 82, 72, 75, 83, 73, 76, 74, 77, 75, 78, 76, 77, 81, 76, 77, 82, 76, 77, 83, 79, 80, 90, 80, 89, 81, 92, 82, 85, 93, 83, 86, 94, 84, 87, 85, 88, 86, 89, 87, 88, 92, 87, 88, 93, 87, 88, 94, 90, 91, 101, 91, 100, 92, 95, 93, 96, 94, 97, 95, 98, 96, 97, 100, 98, 99, 102, 103, 98, 99, 102, 103, 98, 99, 102, 103, 104, 101, 104};
    Scalar result_empty_value_ptr[328];
    Eigen::SparseMatrix<Scalar> result = Eigen::Map<const Eigen::SparseMatrix<Scalar>>(
        kRows_result,
        kCols_result,
        kNumNonZero_result,
        kColPtrs_result,
        kRowIndices_result,
        result_empty_value_ptr
    );
    Scalar* result_value_ptr = result.valuePtr();


    result_value_ptr[0] = x0;
    result_value_ptr[1] = x1;
    result_value_ptr[2] = _tmp0 + x1;
    result_value_ptr[3] = x1;
    result_value_ptr[4] = -1;
    result_value_ptr[5] = x1;
    result_value_ptr[6] = _tmp2;
    result_value_ptr[7] = _tmp3 + x1;
    result_value_ptr[8] = _tmp4;
    result_value_ptr[9] = -_tmp5;
    result_value_ptr[10] = 1;
    result_value_ptr[11] = _tmp7;
    result_value_ptr[12] = Scalar(-1.5);
    result_value_ptr[13] = x1;
    result_value_ptr[14] = (Scalar(1)/Scalar(2))*_tmp9;
    result_value_ptr[15] = -1;
    result_value_ptr[16] = -1;
    result_value_ptr[17] = 2;
    result_value_ptr[18] = _tmp11;
    result_value_ptr[19] = -1;
    result_value_ptr[20] = 4;
    result_value_ptr[21] = -2;
    result_value_ptr[22] = -1;
    result_value_ptr[23] = _tmp13;
    result_value_ptr[24] = _tmp6;
    result_value_ptr[25] = x0;
    result_value_ptr[26] = _tmp3;
    result_value_ptr[27] = _tmp14;
    result_value_ptr[28] = -2;
    result_value_ptr[29] = -1;
    result_value_ptr[30] = 2;
    result_value_ptr[31] = -1;
    result_value_ptr[32] = x1;
    result_value_ptr[33] = 1;
    result_value_ptr[34] = _tmp11;
    result_value_ptr[35] = _tmp7;
    result_value_ptr[36] = _tmp15;
    result_value_ptr[37] = 4;
    result_value_ptr[38] = -_tmp16;
    result_value_ptr[39] = -2;
    result_value_ptr[40] = 1;
    result_value_ptr[41] = -_tmp17;
    result_value_ptr[42] = -_tmp14 - _tmp18;
    result_value_ptr[43] = 2;
    result_value_ptr[44] = 2;
    result_value_ptr[45] = x1;
    result_value_ptr[46] = -1;
    result_value_ptr[47] = _tmp19;
    result_value_ptr[48] = x0;
    result_value_ptr[49] = -1;
    result_value_ptr[50] = 3;
    result_value_ptr[51] = x0;
    result_value_ptr[52] = x1;
    result_value_ptr[53] = 1;
    result_value_ptr[54] = _tmp6;
    result_value_ptr[55] = _tmp20;
    result_value_ptr[56] = _tmp5;
    result_value_ptr[57] = _tmp19;
    result_value_ptr[58] = _tmp3;
    result_value_ptr[59] = 2;
    result_value_ptr[60] = _tmp15;
    result_value_ptr[61] = _tmp7;
    result_value_ptr[62] = Scalar(-1.0);
    result_value_ptr[63] = _tmp14;
    result_value_ptr[64] = _tmp16;
    result_value_ptr[65] = _tmp0;
    result_value_ptr[66] = Scalar(-1.0);
    result_value_ptr[67] = -1;
    result_value_ptr[68] = _tmp21;
    result_value_ptr[69] = _tmp3;
    result_value_ptr[70] = -_tmp20;
    result_value_ptr[71] = _tmp12*x1;
    result_value_ptr[72] = -Scalar(0.5)*x0;
    result_value_ptr[73] = _tmp7;
    result_value_ptr[74] = _tmp2;
    result_value_ptr[75] = _tmp6;
    result_value_ptr[76] = -2;
    result_value_ptr[77] = 3;
    result_value_ptr[78] = _tmp23;
    result_value_ptr[79] = _tmp9 + 2;
    result_value_ptr[80] = _tmp25;
    result_value_ptr[81] = x1;
    result_value_ptr[82] = _tmp5;
    result_value_ptr[83] = _tmp26;
    result_value_ptr[84] = -1;
    result_value_ptr[85] = _tmp13;
    result_value_ptr[86] = 4;
    result_value_ptr[87] = x0;
    result_value_ptr[88] = x0;
    result_value_ptr[89] = 3;
    result_value_ptr[90] = 2;
    result_value_ptr[91] = _tmp27;
    result_value_ptr[92] = 2;
    result_value_ptr[93] = _tmp0;
    result_value_ptr[94] = 4;
    result_value_ptr[95] = _tmp28;
    result_value_ptr[96] = _tmp22 + 4;
    result_value_ptr[97] = 1;
    result_value_ptr[98] = _tmp14;
    result_value_ptr[99] = _tmp29;
    result_value_ptr[100] = _tmp6;
    result_value_ptr[101] = -1;
    result_value_ptr[102] = 2;
    result_value_ptr[103] = -2;
    result_value_ptr[104] = Scalar(-2.0);
    result_value_ptr[105] = _tmp6 - 4;
    result_value_ptr[106] = -4;
    result_value_ptr[107] = _tmp30;
    result_value_ptr[108] = _tmp1 - 2;
    result_value_ptr[109] = 1;
    result_value_ptr[110] = _tmp15;
    result_value_ptr[111] = _tmp15;
    result_value_ptr[112] = -_tmp28*_tmp8;
    result_value_ptr[113] = 3*x1;
    result_value_ptr[114] = _tmp31;
    result_value_ptr[115] = -2;
    result_value_ptr[116] = -2;
    result_value_ptr[117] = x1;
    result_value_ptr[118] = -3;
    result_value_ptr[119] = x0;
    result_value_ptr[120] = _tmp32;
    result_value_ptr[121] = x1;
    result_value_ptr[122] = -2;
    result_value_ptr[123] = _tmp14;
    result_value_ptr[124] = _tmp33;
    result_value_ptr[125] = _tmp34;
    result_value_ptr[126] = _tmp22 + 2;
    result_value_ptr[127] = 1;
    result_value_ptr[128] = x1;
    result_value_ptr[129] = _tmp6 + 2;
    result_value_ptr[130] = x1;
    result_value_ptr[131] = _tmp31;
    result_value_ptr[132] = _tmp22;
    result_value_ptr[133] = 1;
    result_value_ptr[134] = -3;
    result_value_ptr[135] = x0;
    result_value_ptr[136] = -1;
    result_value_ptr[137] = -2;
    result_value_ptr[138] = _tmp25;
    result_value_ptr[139] = _tmp35;
    result_value_ptr[140] = _tmp13;
    result_value_ptr[141] = _tmp29;
    result_value_ptr[142] = -x0 - x1;
    result_value_ptr[143] = -3;
    result_value_ptr[144] = -2;
    result_value_ptr[145] = _tmp27;
    result_value_ptr[146] = x0;
    result_value_ptr[147] = _tmp36;
    result_value_ptr[148] = -_tmp15;
    result_value_ptr[149] = _tmp0*x1;
    result_value_ptr[150] = 1;
    result_value_ptr[151] = -Scalar(1)/Scalar(2)*x1;
    result_value_ptr[152] = _tmp22;
    result_value_ptr[153] = 2;
    result_value_ptr[154] = x0;
    result_value_ptr[155] = -1;
    result_value_ptr[156] = -2;
    result_value_ptr[157] = -2;
    result_value_ptr[158] = -2;
    result_value_ptr[159] = Scalar(-3.0);
    result_value_ptr[160] = _tmp25;
    result_value_ptr[161] = x1;
    result_value_ptr[162] = x1;
    result_value_ptr[163] = _tmp4;
    result_value_ptr[164] = _tmp33;
    result_value_ptr[165] = 2;
    result_value_ptr[166] = _tmp22;
    result_value_ptr[167] = _tmp22;
    result_value_ptr[168] = -2;
    result_value_ptr[169] = _tmp7;
    result_value_ptr[170] = -2*_tmp34 + x0;
    result_value_ptr[171] = _tmp26;
    result_value_ptr[172] = -5;
    result_value_ptr[173] = -2;
    result_value_ptr[174] = 1;
    result_value_ptr[175] = _tmp3;
    result_value_ptr[176] = _tmp38;
    result_value_ptr[177] = _tmp19;
    result_value_ptr[178] = -6;
    result_value_ptr[179] = 4;
    result_value_ptr[180] = -2;
    result_value_ptr[181] = _tmp19;
    result_value_ptr[182] = _tmp35;
    result_value_ptr[183] = _tmp19;
    result_value_ptr[184] = _tmp4;
    result_value_ptr[185] = 3;
    result_value_ptr[186] = 1;
    result_value_ptr[187] = x0;
    result_value_ptr[188] = _tmp39;
    result_value_ptr[189] = x0;
    result_value_ptr[190] = _tmp22 - 1;
    result_value_ptr[191] = -2;
    result_value_ptr[192] = _tmp40;
    result_value_ptr[193] = _tmp41;
    result_value_ptr[194] = -1;
    result_value_ptr[195] = _tmp11;
    result_value_ptr[196] = _tmp41;
    result_value_ptr[197] = x0;
    result_value_ptr[198] = x1;
    result_value_ptr[199] = -2;
    result_value_ptr[200] = _tmp32;
    result_value_ptr[201] = Scalar(1.0);
    result_value_ptr[202] = 4;
    result_value_ptr[203] = _tmp42;
    result_value_ptr[204] = -2;
    result_value_ptr[205] = 2;
    result_value_ptr[206] = -3;
    result_value_ptr[207] = -1;
    result_value_ptr[208] = -1;
    result_value_ptr[209] = x1 - 3;
    result_value_ptr[210] = _tmp6;
    result_value_ptr[211] = _tmp6;
    result_value_ptr[212] = _tmp17;
    result_value_ptr[213] = _tmp6 + 4;
    result_value_ptr[214] = _tmp28;
    result_value_ptr[215] = x0;
    result_value_ptr[216] = -2;
    result_value_ptr[217] = 2;
    result_value_ptr[218] = _tmp24;
    result_value_ptr[219] = -_tmp8;
    result_value_ptr[220] = x0;
    result_value_ptr[221] = x0;
    result_value_ptr[222] = -1;
    result_value_ptr[223] = 2;
    result_value_ptr[224] = _tmp38;
    result_value_ptr[225] = _tmp43;
    result_value_ptr[226] = -2;
    result_value_ptr[227] = -2;
    result_value_ptr[228] = _tmp27;
    result_value_ptr[229] = -1;
    result_value_ptr[230] = Scalar(0.5);
    result_value_ptr[231] = 3;
    result_value_ptr[232] = _tmp10;
    result_value_ptr[233] = 2;
    result_value_ptr[234] = 1;
    result_value_ptr[235] = _tmp26;
    result_value_ptr[236] = _tmp43;
    result_value_ptr[237] = -1;
    result_value_ptr[238] = 4;
    result_value_ptr[239] = _tmp36;
    result_value_ptr[240] = _tmp3*x0;
    result_value_ptr[241] = _tmp42;
    result_value_ptr[242] = _tmp6;
    result_value_ptr[243] = _tmp44;
    result_value_ptr[244] = -2;
    result_value_ptr[245] = _tmp27;
    result_value_ptr[246] = Scalar(-1.0);
    result_value_ptr[247] = -2;
    result_value_ptr[248] = _tmp6;
    result_value_ptr[249] = -1;
    result_value_ptr[250] = x0;
    result_value_ptr[251] = x0;
    result_value_ptr[252] = _tmp11;
    result_value_ptr[253] = _tmp25;
    result_value_ptr[254] = -4;
    result_value_ptr[255] = -4;
    result_value_ptr[256] = -3;
    result_value_ptr[257] = (Scalar(1)/Scalar(2))*_tmp34;
    result_value_ptr[258] = _tmp28;
    result_value_ptr[259] = -3;
    result_value_ptr[260] = x1;
    result_value_ptr[261] = -1;
    result_value_ptr[262] = 4;
    result_value_ptr[263] = 2;
    result_value_ptr[264] = _tmp36;
    result_value_ptr[265] = _tmp28;
    result_value_ptr[266] = -1;
    result_value_ptr[267] = x1;
    result_value_ptr[268] = 4;
    result_value_ptr[269] = _tmp30;
    result_value_ptr[270] = _tmp2;
    result_value_ptr[271] = Scalar(-0.5);
    result_value_ptr[272] = 2 - _tmp6;
    result_value_ptr[273] = x1 + Scalar(-1.0);
    result_value_ptr[274] = _tmp25;
    result_value_ptr[275] = 1;
    result_value_ptr[276] = _tmp22;
    result_value_ptr[277] = _tmp39;
    result_value_ptr[278] = 2;
    result_value_ptr[279] = _tmp15;
    result_value_ptr[280] = _tmp11;
    result_value_ptr[281] = 1;
    result_value_ptr[282] = x1;
    result_value_ptr[283] = Scalar(1.0);
    result_value_ptr[284] = 3;
    result_value_ptr[285] = -1;
    result_value_ptr[286] = Scalar(-3.0);
    result_value_ptr[287] = _tmp26;
    result_value_ptr[288] = -1;
    result_value_ptr[289] = -2;
    result_value_ptr[290] = _tmp44;
    result_value_ptr[291] = -2;
    result_value_ptr[292] = _tmp12;
    result_value_ptr[293] = 1;
    result_value_ptr[294] = 1;
    result_value_ptr[295] = -1;
    result_value_ptr[296] = 2;
    result_value_ptr[297] = x1;
    result_value_ptr[298] = -2;
    result_value_ptr[299] = -2;
    result_value_ptr[300] = -2;
    result_value_ptr[301] = -_tmp9;
    result_value_ptr[302] = _tmp17 + x1;
    result_value_ptr[303] = _tmp28;
    result_value_ptr[304] = _tmp26;
    result_value_ptr[305] = _tmp35;
    result_value_ptr[306] = _tmp35;
    result_value_ptr[307] = 4;
    result_value_ptr[308] = x1;
    result_value_ptr[309] = -1;
    result_value_ptr[310] = _tmp8;
    result_value_ptr[311] = 1;
    result_value_ptr[312] = _tmp37 - 1;
    result_value_ptr[313] = -_tmp0;
    result_value_ptr[314] = -1;
    result_value_ptr[315] = -3;
    result_value_ptr[316] = -2;
    result_value_ptr[317] = -3;
    result_value_ptr[318] = Scalar(2.0);
    result_value_ptr[319] = _tmp35;
    result_value_ptr[320] = 1;
    result_value_ptr[321] = _tmp22;
    result_value_ptr[322] = 4;
    result_value_ptr[323] = -1;
    result_value_ptr[324] = x1;
    result_value_ptr[325] = 1;
    result_value_ptr[326] = _tmp44;
    result_value_ptr[327] = _tmp27;

    return result;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
