{# ------------------------------------------------------------------------- #}
{# Utilities for LCM type generation template                                #}
{# ------------------------------------------------------------------------- #}

{# ------------------------------------------------------------------------- #}

{# Retruns declaration of an eigen lcm type
 #
 # Args:
 #     scalar_type (str): double or float
 #     dim (int): storage dimension
 #}
{%- macro eigen_lcm_type(scalar_type, dim) -%}
{%- if scalar_type == "float" -%}
eigen_lcm.Vector{{ dim }}f
{%- else -%}
eigen_lcm.Vector{{ dim }}d
{%- endif -%}
{%- endmacro -%}

{# ------------------------------------------------------------------------- #}

{# Returns declaration of base element of a list (e.g. a type, double/float, or eigen vector)
 #
 # Args:
 #     scalar_type (str): double or float
 #     index: Index of a list
 #}
{% macro get_list_type(scalar_type, index) -%}
{% set index_element = (index.values() | list)[0] -%}
{% set type = index_element.datatype -%}
{% if type == 'List' -%}
    {% set sub_index = index_element.item_index -%}
{{ get_list_type(scalar_type, sub_index) -}}
{% elif type == 'Scalar' -%}
{{ scalar_type -}}
{% else -%}
    {% if use_eigen_types -%}
{{ eigen_lcm_type(scalar_type, index_element.storage_dim) -}}
    {% else -%}
{{ scalar_type -}}
    {% endif -%}
{% endif -%}
{% endmacro -%}

{# ------------------------------------------------------------------------- #}

{# Appends the number of subelements or the storage dim of the given index
 #
 # Args:
 #     index: Index of a list
 #}
{%- macro get_list_dims(index) -%}
[{{- index | length -}}]
    {%- set index_element = (index.values() | list)[0] -%}
    {%- set type = index_element.datatype -%}
{%- if type == 'List' -%}
    {%- set sub_index = index_element.item_index -%}
{{- get_list_dims(sub_index) -}}
{%- elif type != 'Values' and type != 'Scalar' and not use_eigen_types -%}
    {# if using eigen types, the dimension of the base element is given by the eigen vector dim,
     # so we should return nothing #}
[{{- index_element.storage_dim -}}]
{%- endif -%}
{%- endmacro -%}
