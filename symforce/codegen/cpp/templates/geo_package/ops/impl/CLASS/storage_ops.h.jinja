//  -----------------------------------------------------------------------------
// This file was autogenerated by symforce. Do NOT modify by hand.
// -----------------------------------------------------------------------------
#pragma once

#include <vector>
#include <Eigen/Dense>

#include <geo/{{ cls.__name__ | lower }}.h>

namespace geo {
namespace {{ cls.__name__ | lower }} {

/**
 * C++ StorageOps implementation for {{ cls }}.
 */
template <typename Scalar>
struct StorageOps {
  static constexpr int32_t StorageDim() {
    return {{ ops.StorageOps.storage_dim(cls) }};
  }

  static void ToStorage(const geo::{{ cls.__name__ }}<Scalar>& a, std::vector<Scalar>* vec);
  static geo::{{ cls.__name__ }}<Scalar> FromStorage(const std::vector<Scalar>& vec);
};

}  // namespace {{ cls.__name__ | lower }}

// Wrapper to specialize the public concept

{% for Scalar in scalar_types %}
template <>
struct StorageOps<{{ cls.__name__ }}<{{ Scalar }}>> : public {{ cls.__name__ | lower }}::StorageOps<{{ Scalar }}> {};
{% endfor %}

}  // namespace geo
