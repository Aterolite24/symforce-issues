// ----------------------------------------------------------------------------
// This file was autogenerated by symforce. Do NOT modify by hand.
// ----------------------------------------------------------------------------
#pragma once

#include <cassert>
#include <vector>

namespace {{ spec.name }} {
namespace StorageOps {

{% set keys = spec.types[typename]['keys_recursive'] -%}

template<>
inline size_t StorageDim<{{ typename }}>() {
  return {{ keys|length }};
};

template<>
inline void ToStorage<{{ typename }}>(const {{ typename }}& value, std::vector<{{ spec.scalar_type }}>* vec) {
  assert(vec != nullptr);
  std::vector<{{ spec.scalar_type }}>& v = (*vec);
  v.resize({{ keys | length }});

  {% for key in keys %}
  v[{{ loop.index - 1}}] = value.{{ key }};
  {% endfor %}
}

template<typename Container>
void FromStorage(const Container& elements, {{ typename }}* out) {
  assert(out != nullptr);
  {% for key in keys %}
  out->{{ key }} = elements[{{ loop.index - 1 }}];
  {% endfor %}
}

}  // namespace StorageOps
}  // namespace {{ spec.name }}
