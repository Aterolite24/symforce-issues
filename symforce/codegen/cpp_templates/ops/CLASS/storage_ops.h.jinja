#pragma once

#include <sym/{{ camelcase_to_snakecase(cls.__name__) }}.h>
{% if "geo" in cls.__module__ %}
#include {{ lcm_type_t_include_dir }}
{% endif %}

namespace sym {

/**
 * C++ StorageOps implementation for {{ cls }}.
 */
template <typename ScalarType>
struct StorageOps<{{ cls.__name__ }}<ScalarType>> {
  using T = {{ cls.__name__ }}<ScalarType>;
  using Scalar = typename {{ cls.__name__ }}<ScalarType>::Scalar;

  static constexpr int32_t StorageDim() {
    return {{ ops.StorageOps.storage_dim(cls) }};
  }

  static void ToStorage(const T& a, ScalarType* out);
  static T FromStorage(const ScalarType* data);

  {% if "geo" in cls.__module__ %}
  static constexpr type_t TypeEnum() {
    return type_t::{{ cls.__name__.upper() }};
  }

  template <typename Generator>
  static T Random(Generator& gen) {
    return T::Random(gen);
  }
  {% endif %}
};

}  // namespace sym

// Explicit instantiation
{% for Scalar in scalar_types %}
extern template struct sym::StorageOps<sym::{{ cls.__name__ }}<{{ Scalar }}>>;
{% endfor %}
