{%- import "../util/util.jinja" as util with context -%}

//  -----------------------------------------------------------------------------
// This file was autogenerated by symforce. Do NOT modify by hand.
// -----------------------------------------------------------------------------

#include "./{{ camelcase_to_snakecase(cls.__name__) }}.h"

// Explicit instantiation
{% for scalar in scalar_types %}
template class geo::{{ cls.__name__ }}<{{ scalar }}>;
{% endfor %}

// Print implementations
{% for scalar in scalar_types %}
std::ostream& operator<<(std::ostream& os, const geo::{{ cls.__name__ }}{{ scalar[0] }}& a) {
  const Eigen::IOFormat fmt(Eigen::StreamPrecision, Eigen::DontAlignCols, ", ", "\n", "[", "]");
  os << "<{{ cls.__name__ }}{{ scalar[0] }} " << a.Data().transpose().format(fmt) << ">";
  return os;
}
{% endfor %}

{% if custom_generated_methods %}
// --------------------------------------------------------------------------
// Custom generated methods
// --------------------------------------------------------------------------

{% endif %}
{% for spec in custom_generated_methods %}
template <typename Scalar>
{{ util.function_declaration_custom_namespace(spec, namespace="geo::{}<Scalar>".format(cls.__name__)) }} const {
  {{ util.expr_code(spec) }}
}
{% endfor %}


{# {% for scalar in scalar_types %}
extern template struct geo::{{ camelcase_to_snakecase(cls.__name__) }}::StorageOps<{{ scalar }}>;
extern template struct geo::{{ camelcase_to_snakecase(cls.__name__) }}::GroupOps<{{ scalar }}>;
extern template struct geo::{{ camelcase_to_snakecase(cls.__name__) }}::LieGroupOps<{{ scalar }}>;
extern template struct geo::StorageOps<{{ scalar }}>;
extern template struct geo::GroupOps<{{ scalar }}>;
extern template struct geo::LieGroupOps<{{ scalar }}>;
{% endfor %} #}
