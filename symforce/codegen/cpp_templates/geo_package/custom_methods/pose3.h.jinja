  // --------------------------------------------------------------------------
  // Handwritten methods for Pose3
  // --------------------------------------------------------------------------

  template <typename Derived>
  Pose3(const Rot3<Scalar>& rotation, const Eigen::MatrixBase<Derived>& position) {
    static_assert(Derived::RowsAtCompileTime == 3, "Position must be a 3x1 vector");
    static_assert(Derived::ColsAtCompileTime == 1, "Position must be a 3x1 vector");
    data_.template head<4>() = rotation.Data();
    data_.template tail<3>() = position;
  }

  Rot3<Scalar> Rotation() const {
      return Rot3<Scalar>(data_.template head<4>());
  }

  Vector3 Position() const {
      return data_.template tail<3>();
  }

  // TODO(hayk): Could codegen this.
  Vector3 Compose(const Vector3& point) const {
      return Rotation() * point + Position();
  }

  // Generate a random element, with normally distributed position
  template <typename Generator>
  static Pose3 Random(Generator& gen) {
    return Pose3(Rot3<Scalar>::Random(gen), sym::StorageOps<Vector3>::Random(gen));
  }
