//  -----------------------------------------------------------------------------
// This file was autogenerated by symforce. Do NOT modify by hand.
// -----------------------------------------------------------------------------
/**
C++ StorageOps concept. This template class is specialized per type.

See `symforce.ops.group_ops` for details.
*/
#pragma once

namespace geo {

template <typename T>
struct GroupOps {
  static T Identity();
  static T Inverse(const T& a);
  static T Compose(const T& a, const T& b);
  static T Between(const T& a, const T& b);
};

// Template specializations for scalars
template <typename T>
struct ScalarGroupOps {
  using Scalar = T;
  static_assert(std::is_floating_point<T>::value, "");

  static T Identity() {
    return 0.0;
  }

  static T Inverse(const T& a) {
    return -a;
  }

  static T Compose(const T& a, const T& b) {
    return b + a;
  }

  static T Between(const T& a, const T& b) {
    return b - a;
  }
};

{% for scalar in scalar_types %}
template<>
struct GroupOps<{{ scalar }}> : public ScalarGroupOps<{{ scalar }}> {};
{% endfor %}


// Template specialization for fixed size matrices
template <typename ScalarType, int Rows, int Cols>
struct MatrixGroupOps {
  using Scalar = ScalarType;
  using T = Eigen::Matrix<Scalar, Rows, Cols>;
  static_assert(std::is_floating_point<ScalarType>::value, "");

  static T Identity() {
    return T::Zero();
  }

  static T Inverse(const T& a) {
    return -a;
  }

  static T Compose(const T& a, const T& b) {
    return b + a;
  }

  static T Between(const T& a, const T& b) {
    return b - a;
  }
};

{% for scalar in scalar_types %}
{% for i in range(1, 10) %}
template<>
struct GroupOps<Eigen::Matrix<{{ scalar }}, {{ i }}, 1>> : public MatrixGroupOps<{{ scalar }}, {{ i }}, 1> {};
{% endfor %}
{% endfor %}

}  // namespace geo
