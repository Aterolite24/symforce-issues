{%- import "../../../util/util.jinja" as util with context -%}

//  ----------------------------------------------------------------------------
// This file was autogenerated by symforce. Do NOT modify by hand.
// -----------------------------------------------------------------------------

#include "./storage_ops.h"

namespace sym {

template <typename ScalarType>
void StorageOps<{{ cls.__name__ }}<ScalarType>>::ToStorage(const {{ cls.__name__ }}<ScalarType>& a, ScalarType* out) {
  assert(out != nullptr);
  std::copy_n(a.Data().data(), a.StorageDim(), out);
}

template <typename ScalarType>
{{ cls.__name__ }}<ScalarType> StorageOps<{{ cls.__name__ }}<ScalarType>>::FromStorage(const ScalarType* data) {
  assert(data != nullptr);
  return {{ cls.__name__ }}<ScalarType>(
    Eigen::Map<const typename {{ cls.__name__ }}<ScalarType>::DataVec>(data));
}

}  // namespace sym

// Explicit instantiation
{% for Scalar in scalar_types %}
template struct sym::StorageOps<sym::{{ cls.__name__ }}<{{ Scalar }}>>;
{% endfor %}
