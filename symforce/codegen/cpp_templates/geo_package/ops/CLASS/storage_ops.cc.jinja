{%- import "../../../util/util.jinja" as util with context -%}

//  ----------------------------------------------------------------------------
// This file was autogenerated by symforce. Do NOT modify by hand.
// -----------------------------------------------------------------------------

#include "./storage_ops.h"

namespace geo {
namespace {{ camelcase_to_snakecase(cls.__name__) }} {

template <typename Scalar>
void StorageOps<Scalar>::ToStorage(const geo::{{ cls.__name__ }}<Scalar>& a, std::vector<Scalar>* vec) {
  assert(vec != nullptr);
  const typename geo::{{ cls.__name__ }}<Scalar>::DataVec& data = a.Data();
  vec->resize(data.size());
  std::copy_n(data.data(), data.size(), vec->begin());
}

template <typename Scalar>
geo::{{ cls.__name__ }}<Scalar> StorageOps<Scalar>::FromStorage(const std::vector<Scalar>& vec) {
  assert(vec.size() == StorageOps<Scalar>::StorageDim());
  return geo::{{ cls.__name__ }}<Scalar>(
    Eigen::Map<const typename geo::{{ cls.__name__ }}<Scalar>::DataVec>(vec.data()));
}

}  // namespace {{ camelcase_to_snakecase(cls.__name__) }}
}  // namespace geo


// Explicit instantiation
{% for Scalar in scalar_types %}
template struct geo::{{ camelcase_to_snakecase(cls.__name__) }}::StorageOps<{{ Scalar }}>;
{% endfor %}
