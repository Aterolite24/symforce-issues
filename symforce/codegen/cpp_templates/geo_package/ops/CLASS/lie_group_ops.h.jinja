{%- import "../../../util/util.jinja" as util with context -%}

//  -----------------------------------------------------------------------------
// This file was autogenerated by symforce. Do NOT modify by hand.
// -----------------------------------------------------------------------------
#pragma once

#include <Eigen/Dense>

#include <geo/{{ camelcase_to_snakecase(cls.__name__) }}.h>

namespace geo {
namespace {{ camelcase_to_snakecase(cls.__name__) }} {

/**
 * C++ LieGroupOps implementation for {{ cls }}.
 */
template <typename {{ util.format_typename(Symbol) }}>
struct LieGroupOps {
  static constexpr int32_t TangentDim() {
      return {{ ops.LieGroupOps.tangent_dim(cls) }};
  }

  {% for spec in specs['LieGroupOps'] %}
  static {{ util.function_declaration(spec) -}};
  {% endfor %}
};

}  // namespace {{ camelcase_to_snakecase(cls.__name__) }}

// Specialization into the top level concept
{% for Scalar in scalar_types %}
template <>
struct LieGroupOps<{{ cls.__name__ }}<{{ Scalar }}>> : public {{ camelcase_to_snakecase(cls.__name__) }}::LieGroupOps<{{ Scalar }}> {};
{% endfor %}

}  // namespace geo
