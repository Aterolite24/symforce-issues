//  -----------------------------------------------------------------------------
// This file was autogenerated by symforce. Do NOT modify by hand.
// -----------------------------------------------------------------------------
#pragma once

#include <Eigen/Dense>

#include "../lie_group_ops.h"

namespace sym {
namespace matrix {

/**
 * C++ LieGroupOps implementation for matrices.
 */
template <typename ScalarType, int Rows, int Cols>
struct LieGroupOps {
  using Scalar = ScalarType;
  using T = Eigen::Matrix<Scalar, Rows, Cols>;
  static_assert(std::is_floating_point<ScalarType>::value, "");

  static constexpr int32_t TangentDim() {
    if (Rows == Eigen::Dynamic) {
      return Eigen::Dynamic;
    }

    if (Cols == Eigen::Dynamic) {
      return Eigen::Dynamic;
    }

    return Rows * Cols;
  }

  using TangentVec = Eigen::Matrix<Scalar, TangentDim(), 1>;
  static T FromTangent(const TangentVec& vec, const Scalar epsilon) {
    return Eigen::Map<const T>(vec.data(), Rows, Cols);
  }
  static TangentVec ToTangent(const T& a, const Scalar epsilon) {
    return Eigen::Map<const TangentVec>(a.data(), a.size());
  }
  static T Retract(const T& a, const TangentVec& vec, const Scalar epsilon) {
    return a + Eigen::Map<const T>(vec.data(), a.rows(), a.cols());
  }
  static TangentVec LocalCoordinates(const T& a, const T& b, const Scalar epsilon) {
    return (Eigen::Map<const TangentVec>(b.data(), b.size()) -
            Eigen::Map<const TangentVec>(a.data(), a.size()));
  }
};

}  // namespace matrix

{% for scalar in scalar_types %}
{% for i in range(1, 10) %}
template<>
struct LieGroupOps<Eigen::Matrix<{{ scalar }}, {{ i }}, 1>> : public matrix::LieGroupOps<{{ scalar }}, {{ i }}, 1> {};
{% endfor %}
{% for i in range(2, 10) %}
template<>
struct LieGroupOps<Eigen::Matrix<{{ scalar }}, {{ i }}, {{ i }}>> : public matrix::LieGroupOps<{{ scalar }}, {{ i }}, {{ i }}> {};
{% endfor %}
template<int Rows, int Cols>
struct LieGroupOps<Eigen::Matrix<{{ scalar }}, Rows, Cols>> : public matrix::LieGroupOps<{{ scalar }}, Rows, Cols> {};
{% endfor %}

}  // namespace sym
