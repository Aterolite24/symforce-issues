//  -----------------------------------------------------------------------------
// This file was autogenerated by symforce. Do NOT modify by hand.
// -----------------------------------------------------------------------------
#pragma once

#include <Eigen/Dense>

#include "../lie_group_ops.h"

namespace geo {
namespace matrix {

/**
 * C++ LieGroupOps implementation for matrices.
 */
template <typename ScalarType, int Rows, int Cols>
struct LieGroupOps {
  using Scalar = ScalarType;
  using T = Eigen::Matrix<Scalar, Rows, Cols>;
  static_assert(std::is_floating_point<ScalarType>::value, "");

  static constexpr int32_t TangentDim() {
    return Rows * Cols;
  }
  using TangentVec = T;
  static T FromTangent(const TangentVec& vec, const Scalar epsilon) {
    return vec;
  }
  static TangentVec ToTangent(const T& a, const Scalar epsilon) {
    return a;
  }
  static T Retract(const T& a, const TangentVec& vec, const Scalar epsilon) {
    return a + vec;
  }
  static TangentVec LocalCoordinates(const T& a, const T& b, const Scalar epsilon) {
    return b - a;
  }
};

}  // namespace matrix

{% for scalar in scalar_types %}
{% for i in range(1, 10) %}
template<>
struct LieGroupOps<Eigen::Matrix<{{ scalar }}, {{ i }}, 1>> : public matrix::LieGroupOps<{{ scalar }}, {{ i }}, 1> {};
{% endfor %}
{% endfor %}

}  // namespace geo
