//  -----------------------------------------------------------------------------
// This file was autogenerated by symforce. Do NOT modify by hand.
// -----------------------------------------------------------------------------
#pragma once

#include <Eigen/Dense>

#include "../storage_ops.h"
#include {{ lcm_type_t_include_dir }}

namespace sym {
namespace matrix {

/**
 * C++ StorageOps implementation for fixed size matrices.
 */
template <typename ScalarType, int Rows, int Cols>
struct StorageOps {
  using Scalar = ScalarType;
  using T = Eigen::Matrix<Scalar, Rows, Cols>;
  static_assert(std::is_floating_point<ScalarType>::value, "");

  static constexpr int32_t StorageDim() {
    return Rows * Cols;
  }

  static void ToStorage(const T& a, ScalarType* out) {
    assert(out != nullptr);
    std::copy_n(a.data(), a.size(), out);
  }

  static T FromStorage(const ScalarType* data) {
    assert(data != nullptr);
    return Eigen::Map<const T>(data);
  }

  static symforce::type_t TypeEnum() {
    {% for i in range(1, 10) %}
    {% if i != 1 %}} else {% endif %}if (Rows == {{ i }} && Cols == 1) {
      return symforce::type_t::VECTOR{{ i }};
    {% endfor %}
    {% for i in range(1, 10) %}
    {% for j in range(2, 10) %}
    } else if (Rows == {{ i }} && Cols == {{ j }}) {
      return symforce::type_t::MATRIX{{ i }}{{ j }};
    {% endfor %}
    {% endfor %}
    } else {
      return symforce::type_t::INVALID;
    }
  }

  template <typename Generator>
  static T Random(Generator& gen) {
    std::normal_distribution<Scalar> distribution{};
    return T::NullaryExpr([&]() { return distribution(gen); });
  }
};

}  // namespace matrix

{% for scalar in scalar_types %}
{% for i in range(1, 10) %}
template<>
struct StorageOps<Eigen::Matrix<{{ scalar }}, {{ i }}, 1>> : public matrix::StorageOps<{{ scalar }}, {{ i }}, 1> {};
{% endfor %}
{% for i in range(2, 10) %}
template<>
struct StorageOps<Eigen::Matrix<{{ scalar }}, {{ i }}, {{ i }}>> : public matrix::StorageOps<{{ scalar }}, {{ i }}, {{ i }}> {};
{% endfor %}
template<int Rows, int Cols>
struct StorageOps<Eigen::Matrix<{{ scalar }}, Rows, Cols>> : public matrix::StorageOps<{{ scalar }}, Rows, Cols> {};
{% endfor %}

}  // namespace sym
