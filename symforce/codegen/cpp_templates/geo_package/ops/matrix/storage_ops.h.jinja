//  -----------------------------------------------------------------------------
// This file was autogenerated by symforce. Do NOT modify by hand.
// -----------------------------------------------------------------------------
#pragma once

#include <Eigen/Dense>

#include "../storage_ops.h"

namespace geo {
namespace matrix {

/**
 * C++ StorageOps implementation for fixed size matrices.
 */
template <typename ScalarType, int Rows, int Cols>
struct StorageOps {
  using Scalar = ScalarType;
  using T = Eigen::Matrix<Scalar, Rows, Cols>;
  static_assert(std::is_floating_point<ScalarType>::value, "");

  static constexpr int32_t StorageDim() {
    return Rows * Cols;
  }

  static void ToStorage(const T& a, ScalarType* out) {
    assert(out != nullptr);
    std::copy_n(a.data(), a.size(), out);
  }

  static T FromStorage(const ScalarType* data) {
    assert(data != nullptr);
    return Eigen::Map<const T>(data);
  }
};

}  // namespace matrix

{% for scalar in scalar_types %}
{% for i in range(1, 10) %}
template<>
struct StorageOps<Eigen::Matrix<{{ scalar }}, {{ i }}, 1>> : public matrix::StorageOps<{{ scalar }}, {{ i }}, 1> {};
{% endfor %}
template<int Rows, int Cols>
struct StorageOps<Eigen::Matrix<{{ scalar }}, Rows, Cols>> : public matrix::StorageOps<{{ scalar }}, Rows, Cols> {};
{% endfor %}

}  // namespace geo
