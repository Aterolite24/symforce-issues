//  -----------------------------------------------------------------------------
// This file was autogenerated by symforce. Do NOT modify by hand.
// -----------------------------------------------------------------------------
#pragma once

#include <vector>
#include <Eigen/Dense>

#include <cam/{{ camelcase_to_snakecase(cls.__name__) }}.h>

namespace cam {
namespace {{ camelcase_to_snakecase(cls.__name__) }} {

/**
 * C++ StorageOps implementation for {{ cls }}.
 */
template <typename Scalar>
struct StorageOps {
  static constexpr int32_t StorageDim() {
    return {{ ops.StorageOps.storage_dim(cls) }};
  }

  static void ToStorage(const cam::{{ cls.__name__ }}<Scalar>& a, std::vector<Scalar>* vec);
  static cam::{{ cls.__name__ }}<Scalar> FromStorage(const std::vector<Scalar>& vec);
};

}  // namespace {{ camelcase_to_snakecase(cls.__name__) }}
}  // namespace cam

// Wrapper to specialize the public concept
namespace geo {

{% for Scalar in scalar_types %}
template <>
struct StorageOps<cam::{{ cls.__name__ }}<{{ Scalar }}>> : public cam::{{ camelcase_to_snakecase(cls.__name__) }}::StorageOps<{{ Scalar }}> {};
{% endfor %}

}  // namespace geo
