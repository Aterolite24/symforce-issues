{%- import "../../../util/util.jinja" as util with context -%}

#include "./storage_ops.h"

namespace sym {
namespace {{ camelcase_to_snakecase(cls.__name__) }} {

template <typename Scalar>
void StorageOps<Scalar>::ToStorage(const {{ cls.__name__ }}<Scalar>& a, Scalar* const vec) {
  assert(vec != nullptr);
  std::copy_n(a.Data().data(), a.StorageDim(), vec);
}

template <typename Scalar>
{{ cls.__name__ }}<Scalar> StorageOps<Scalar>::FromStorage(const Scalar* const vec) {
  assert(vec != nullptr);
  return {{ cls.__name__ }}<Scalar>(
    Eigen::Map<const typename {{ cls.__name__ }}<Scalar>::DataVec>(vec));
}

}  // namespace {{ camelcase_to_snakecase(cls.__name__) }}
}  // namespace sym


// Explicit instantiation
{% for Scalar in scalar_types %}
template struct sym::{{ camelcase_to_snakecase(cls.__name__) }}::StorageOps<{{ Scalar }}>;
{% endfor %}
