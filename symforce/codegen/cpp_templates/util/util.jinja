{# ------------------------------------------------------------------------- #}
{# Utilities for C++ code generation templates.                              #}
{# ------------------------------------------------------------------------- #}

{# Vector type of a given dimension
 #
 # Args:
 #     dim (int):
 #}
{%- macro vector_type(dim) -%}
Eigen::Matrix<Scalar, {{ dim }}, 1>
{%- endmacro -%}

{# ------------------------------------------------------------------------- #}

{# Matrix type of a given dimension
 #
 # Args:
 #     rows (int):
 #     cols (int):
 #}
{%- macro matrix_type(rows, cols) -%}
Eigen::Matrix<Scalar, {{ rows }}, {{ cols }}>
{%- endmacro -%}

{# ------------------------------------------------------------------------- #}

{# Convert a class to the emitted string
 #
 # Args:
 #     T_or_value (type or Element):
 #     name (str): Optional name in case type is a generated struct
 #}
{%- macro format_typename(T_or_value, name) %}
    {%- set T = python_util.get_type(T_or_value) -%}
    {%- if T.__name__ == 'Symbol' or is_symbolic(T_or_value) -%}
        Scalar
    {%- elif T.__name__ == 'NoneType' -%}
        void
    {%- elif issubclass(T, Matrix) -%}
        {%- if spec is defined and name in spec.sparse_mat_data -%}
        Eigen::SparseMatrix<Scalar>
        {%- else -%}
        {{ matrix_type(T_or_value.shape[0], T_or_value.shape[1]) }}
        {%- endif -%}
    {%- elif issubclass(T, Values) -%}
        {{ spec.namespaces_dict[name] }}::{{ spec.typenames_dict[name] }}
    {%- elif is_sequence(T_or_value) -%}
        std::array<{{ format_typename(T_or_value[0], name) }}, {{ T_or_value | length }}>
    {%- else -%}
        {%- if "geo" in T.__module__ or "cam" in T.__module__ -%}
        sym::
        {%- endif -%}
        {{- T.__name__ -}}<Scalar>
    {%- endif -%}
{% endmacro -%}

{# ------------------------------------------------------------------------- #}

{# Get the type of the object in the ouput Values with key given by spec.return_key
 #
 # Args:
 #     spec (Codegen):
 #}
{%- macro get_return_type(spec) %}
    {%- if spec.return_key is not none -%}
        {{ format_typename(spec.outputs[spec.return_key], spec.return_key) }}
    {%- else -%}
        void
    {%- endif -%}
{% endmacro -%}

{# ------------------------------------------------------------------------- #}

 {# Format function docstring
 #
 # Args:
 #     docstring (str):
 #}
{% macro print_docstring(docstring) %}
{%- if docstring %}

/*
{%- for line in docstring.split('\n') %}
*{{ ' {}'.format(line).rstrip() }}
{% endfor -%}
*/
{%- endif -%}
{% endmacro %}

{# ------------------------------------------------------------------------- #}

{# Format function input argument
 #
 # Args:
 #     T_or_value (type or Element):
 #     name (str):
 #}
{%- macro format_input_arg(T_or_value, name) %}
    {%- set T = python_util.get_type(T_or_value) -%}
    {% if T == Symbol -%}
        {#- Scalar type is just const -#}
        const {{ format_typename(T_or_value) }} {{ name }}
    {%- else -%}
        {#- Otherwise assume const reference -#}
        const {{ format_typename(T_or_value, name) }}& {{ name }}
    {%- endif %}
{% endmacro -%}

{# ------------------------------------------------------------------------- #}

{# Format function pointer argument
 #
 # Args:
 #     T_or_value (type or Element):
 #     name (str):
 #     add_default (bool): Include a default to nullptr?
 #}
{%- macro format_pointer_arg(T_or_value, name, add_default) %}
    {{- format_typename(T_or_value, name) -}}* const {{ name }}{% if add_default %} = nullptr{% endif %}
{%- endmacro -%}

{# ------------------------------------------------------------------------- #}

{# Generate input arguments declaration.
 #
 # Args:
 #     spec (Codegen):
 #     is_declaration (bool): Is this a declaration as opposed to a definition? (declarations
 #         include default arguments)
 #}
{%- macro input_args_declaration(spec, is_declaration) %}
    {%- for name, type in spec.inputs.items() -%}
        {%- if name != "self" -%}
            {{ format_input_arg(type, name) }}
            {%- if not loop.last
                or spec.outputs.items() | length > 1
                or (spec.outputs.items() | length == 1 and spec.return_key is none) -%}
            , {% endif -%}
        {%- endif -%}
    {%- endfor -%}
    {%- for name, type in spec.outputs.items() -%}
        {%- if name != spec.return_key -%}
            {{- format_pointer_arg(type, name, is_declaration) -}}
            {%- if not loop.last -%}
                {%- if not (loop.revindex0 == 1 and loop.nextitem[0] == spec.return_key) -%}
                , {% endif -%}
            {% endif -%}
        {%- endif -%}
    {%- endfor -%}
{% endmacro -%}

{# ------------------------------------------------------------------------- #}

{# Generate function declaration
 #
 # Args:
 #     spec (Codegen):
 #     is_declaration (bool): Is this a declaration as opposed to a definition? (declarations
 #         include default arguments)
 #}
{%- macro function_declaration(spec, is_declaration) -%}
{{ get_return_type(spec) }} {{ spec.name }}({{- input_args_declaration(spec, is_declaration) -}})
{%- endmacro -%}

{# ------------------------------------------------------------------------- #}

{# Generate function declaration with custom namespace
 #
 # Args:
 #     spec (Codegen):
 #     namespace (str):
 #     is_declaration (bool): Is this a declaration as opposed to a definition? (declarations
 #         include default arguments)
 #}
{%- macro function_declaration_custom_namespace(spec, namespace, is_declaration) -%}
{{ get_return_type(spec) }} {{ namespace }}::{{ spec.name }}({{- input_args_declaration(spec, is_declaration) -}})
{%- endmacro -%}

{# ------------------------------------------------------------------------- #}

{# Initialize sparse matrix if appropriate
 #
 # Args:
 #     name (str): Key of sparse matrix
 #     element (Matrix): Sparse matrix
 #     spec (Codegen): Codegen specification containing sparse_mat_data
 #}
{%- macro sparse_matrix_init(name, element, spec) -%}
    static constexpr int kRows_{{ name }} = {{ element.shape[0] }};
    static constexpr int kCols_{{ name }} = {{ element.shape[1] }};
    static constexpr int kNumNonZero_{{ name }} = {{ spec.sparse_mat_data[name]["kNumNonZero"] }};
    static constexpr int kColPtrs_{{ name }}[] = {
    {%- for i in spec.sparse_mat_data[name]["kColPtrs"] -%}
        {{ i }}{%- if not loop.last -%}, {% endif -%}
    {%- endfor -%} };
    static constexpr int kRowIndices_{{ name }}[] = {
    {%- for i in spec.sparse_mat_data[name]["kRowIndices"] -%}
        {{ i }}{%- if not loop.last -%}, {% endif -%}
    {%- endfor -%} };
    {% set T_return = python_util.get_type(element) %}
    {% if name == spec.return_key and T_return.__name__ != 'NoneType' %}
    Scalar {{ name }}_empty_value_ptr[{{ spec.sparse_mat_data[name]["kNumNonZero"] }}];
    Eigen::SparseMatrix<Scalar> {{ name }} = Eigen::Map<const Eigen::SparseMatrix<Scalar>>(
        kRows_{{ name }},
        kCols_{{ name }},
        kNumNonZero_{{ name }},
        kColPtrs_{{ name }},
        kRowIndices_{{ name }},
        {{ name }}_empty_value_ptr
    );
    Scalar* {{ name }}_value_ptr = {{ name }}.valuePtr();
    {% else %}
    if ({{ name }}->nonZeros() != {{ spec.sparse_mat_data[name]["kNumNonZero"] }} || {{ name }}->outerSize() != {{ element.shape[1] }} || {{ name }}->innerSize() != {{ element.shape[0] }} || !{{ name }}->isCompressed()) {
        // Matrix does not have the expected layout, create a correctly initialized sparse matrix
        Scalar {{ name }}_empty_value_ptr[{{ spec.sparse_mat_data[name]["kNumNonZero"] }}];
        *{{ name }} = Eigen::Map<const Eigen::SparseMatrix<Scalar>>(
            kRows_{{ name }},
            kCols_{{ name }},
            kNumNonZero_{{ name }},
            kColPtrs_{{ name }},
            kRowIndices_{{ name }},
            {{ name }}_empty_value_ptr
        );
    }
    Scalar* {{ name }}_value_ptr = {{ name }}->valuePtr();
    {% endif %}
{% endmacro -%}

{# ------------------------------------------------------------------------- #}

{# Helper to generate code to fill out an output object, either returned or as an output argument pointer
 #
 # Args:
 #     name (str): Name of the output object
 #     type (type): Type of the output object
 #     terms (List[Tuple[str]]): List of output terms for this object
 #     spec (Codegen):
 #}
{% macro format_output_dense(name, type, terms, spec) -%}
{% set T = python_util.get_type(type) %}
{% if (issubclass(T, Matrix) or issubclass(T, Values) or is_symbolic(type) or is_sequence(type)) %}
    {% set T_return = python_util.get_type(type) %}
    {% if name == spec.return_key and T_return.__name__ != 'NoneType' %}
        {# Create a new object to return #}
{{ format_typename(type, name) }} _{{ name }};
    {% else %}
        {# Get reference to output passed by reference #}
{{ format_typename(type, name) }}& _{{ name }} = (*{{ name }});
    {% endif %}
{% else %}
    {# geo/cam object. Since we can't access individual element of data, create a copy #}
    {# TODO(nathan): Maybe add a [] operator to geo/cam objects so we don't have to do this? #}
    {% set dims = ops.StorageOps.storage_dim(type) %}
{{ vector_type(dims) }} _{{ name }};
{% endif %}

{% for lhs, rhs in terms %}
_{{ lhs }} = {{ rhs }};
{% endfor %}
{% if name != spec.return_key %}
    {% if not issubclass(T, Matrix) and not issubclass(T, Values) and not is_symbolic(type) and not is_sequence(type) %}

*{{ name }} = {{ format_typename(type, name) }}(_{{ name }});
    {% endif %}
{% endif %}
{% endmacro -%}

{# ------------------------------------------------------------------------- #}

{# Helper to generate all pointer outputs #}
{% macro format_outputs_dense_and_sparse(spec) -%}
    {% for name, type, terms in spec.output_terms %}
        {% if name == spec.return_key %}
    {{ format_output_dense(name, type, terms, spec) | indent(width=4) | trim }}
        {% else %}
    if ( {{ name }} != nullptr ) {
        {{ format_output_dense(name, type, terms, spec) | indent(width=8) | trim }}
    }
        {% endif %}

    {% endfor %}
    {% for name, type, terms in spec.sparse_terms %}
        {% set T = python_util.get_type(type) %}
        {% if name == spec.return_key %}
    {{ sparse_matrix_init(name, spec.outputs[name], spec) }}

            {% for lhs, rhs in terms %}
    {{ lhs }} = {{ rhs }};
            {% endfor %}
        {% else %}
    if ( {{ name }} != nullptr ) {
        {{ sparse_matrix_init(name, spec.outputs[name], spec) | indent(width=4) }}

            {% for lhs, rhs in terms %}
        {{ lhs }} = {{ rhs }};
            {% endfor %}
            {% if not issubclass(T, Matrix) and not issubclass(T, Values) and not is_symbolic(type) and not is_sequence(type) %}

        *{{ name }} = {{ format_typename(type, name) }}(_{{ name }});
            {% endif %}
    }
        {% endif %}

    {% endfor %}
{% endmacro -%}

{# ------------------------------------------------------------------------- #}

{# Generate inner code for computing the given expression.
 #
 # Args:
 #     spec (Codegen):
 #}
{% macro expr_code(spec) -%}
    // Total ops: {{ spec.total_ops }}

    // Input arrays
    {% for name, type in spec.inputs.items() %}
        {% set T = python_util.get_type(type) %}
        {% if not issubclass(T, Values) and not issubclass(T, Matrix) and not is_symbolic(type) and not is_sequence(type) %}
            {% if name == "self" %}
    const {{ vector_type(ops.StorageOps.storage_dim(type)) }}& _{{ name }} = Data();
            {% else %}
    const {{ vector_type(ops.StorageOps.storage_dim(type)) }}& _{{ name }} = {{ name }}.Data();
            {% endif %}
        {% endif %}
    {% endfor %}

    // Intermediate terms ({{ spec.intermediate_terms | length }})
    {% for lhs, rhs in spec.intermediate_terms %}
    const {{ format_typename(Symbol) }} {{ lhs }} = {{ rhs }};
    {% endfor %}

    // Output terms ({{ spec.outputs.items() | length }})
    {{ format_outputs_dense_and_sparse(spec) | trim }}
    {# Populate the output vectors with the generated expressions #}
    {% for name, type in spec.outputs.items() %}
        {% set T_return = python_util.get_type(type) %}
        {% if name == spec.return_key and T_return.__name__ != 'NoneType' %}

            {% if name in spec.sparse_mat_data %}
    return {{ name }};
            {% elif issubclass(T_return, Matrix) or issubclass(T_return, Values) or is_symbolic(type) or is_sequence(type) %}
    return _{{ name }};
            {% else %}
    return {{ format_typename(type, name) }}(_{{ name }});
            {% endif %}
        {% endif %}
    {% endfor %}
{%- endmacro -%}
