# -----------------------------------------------------------------------------
# This file was autogenerated by symforce. Do NOT modify by hand.
# -----------------------------------------------------------------------------
import numpy as np

{# If a pose type, include the necessary rotation type. #}
{% if cls.__name__.startswith('Pose') %}
from .rot{{ cls.__name__[-1] }} import Rot{{ cls.__name__[-1] }}
{% endif -%}

from .ops.impl import {{ cls.__name__ | lower }} as ops


class {{ cls.__name__ }}(object):
    {% if doc %}
    """"
    Autogenerated Python implementation of {{ cls }}.

    {% for line in doc.split('\n') %}
{{ '    {}'.format(line).rstrip() }}
    {% endfor %}
    """
    {% endif %}

    __slots__ = ['data']

    def __repr__(self):
        return '<{} {}>'.format(self.__class__.__name__, self.data)

    # --------------------------------------------------------------------------
    # StorageOps concept
    # --------------------------------------------------------------------------

    @staticmethod
    def storage_dim():
        return {{ ops.StorageOps.storage_dim(cls) }}

    def to_storage(self):
        return list(self.data)

    @classmethod
    def from_storage(cls, vec):
        instance = cls()

        if isinstance(vec, list):
            instance.data = vec
        else:
            instance.data = list(vec)

        assert len(vec) == cls.storage_dim(), '{} has storage dim {}, got {}.'.format(
            cls.__name__, cls.storage_dim(), len(vec))

        return instance

    # --------------------------------------------------------------------------
    # GroupOps concept
    # --------------------------------------------------------------------------

    @classmethod
    def identity(cls):
        return cls.from_storage(ops.GroupOps.identity())

    def inverse(self):
        return self.__class__.from_storage(ops.GroupOps.inverse(self))

    def compose(self, b):
        return self.__class__.from_storage(ops.GroupOps.compose(self, b))

    def between(self, b):
        return self.__class__.from_storage(ops.GroupOps.between(self, b))

    {% if is_lie_group %}
    # --------------------------------------------------------------------------
    # LieGroupOps concept
    # --------------------------------------------------------------------------

    @staticmethod
    def tangent_dim():
        return {{ ops.LieGroupOps.tangent_dim(cls) }}

    @classmethod
    def from_tangent(cls, vec, epsilon=1e-8):
        assert len(vec) == cls.tangent_dim(), '{}, {}'.format(len(vec), cls.tangent_dim())
        return cls.from_storage(ops.LieGroupOps.from_tangent(vec, epsilon))

    def to_tangent(self, epsilon=1e-8):
        return ops.LieGroupOps.to_tangent(self, epsilon)

    def retract(self, vec, epsilon=1e-8):
        assert len(vec) == self.tangent_dim(), '{}, {}'.format(len(vec), self.tangent_dim())
        return self.__class__.from_storage(ops.LieGroupOps.retract(self, vec, epsilon))

    def local_coordinates(self, b, epsilon=1e-8):
        return ops.LieGroupOps.local_coordinates(self, b, epsilon)
    {% endif %}

    # --------------------------------------------------------------------------
    # General Helpers
    # --------------------------------------------------------------------------
    def __eq__(self, other):
        return self.data == other.data

    def __mul__(self, other):
        if isinstance(other, self.__class__):
            return self.compose(other)
        else:
            raise NotImplementedError('Cannot compose {} with {}.'.format(type(self), type(other)))

    {% set custom_template_name = "custom_methods/{}.py".format(cls.__name__.lower()) %}
    # Included from "{{ custom_template_name }}":
    {% include custom_template_name %}
