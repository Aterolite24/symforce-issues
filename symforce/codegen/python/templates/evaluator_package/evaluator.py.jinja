# -----------------------------------------------------------------------------
# This file was autogenerated by symforce. Do NOT modify by hand.
# -----------------------------------------------------------------------------

import numpy

import {{ types_package }}

{% set np_scalar_type = np_scalar_types[spec.scalar_type] %}

class Evaluator(object):
    """
    Autogenerated class for python execution of "{{ spec.name }}".

    TODO(hayk): Handle data buffers.
    """
    input_t = {{ types_package }}.input_t
    output_t = {{ types_package }}.output_t
    name = '{{ spec.name }}'

    def __init__(self):
        self.input_array = numpy.zeros((self.input_t.STORAGE_DIM,), dtype={{ np_scalar_type }})
        self.output_array = numpy.zeros((self.output_t.STORAGE_DIM,), dtype={{ np_scalar_type }})

    def execute(self, inp):
        """
        Evaluate output given an input.

        Args:
            inp (input_t):

        Returns:
            (output_t):
        """
        self.input_array[:] = inp.to_storage()
        self._execute(self.input_array, self.output_array)
        return self.output_t.from_storage(self.output_array)

    @staticmethod
    def _execute(inp, out):
        """
        Fill output array given input array.

        Args:
            inp (np.ndarray): Input argument, values are not modified
            out (np.ndarray): Output argument, values are not read
        """
        # Intermediate terms
        {% for var, term in intermediate_terms %}
        {{ var }} = {{ term }}
        {% endfor %}

        # Output terms
        {% for term in output_terms %}
        out[{{ loop.index - 1}}] = {{ term }}
        {% endfor %}
