# High level build commands for symforce

BUILD_DIR=build

PYTHON=***REMOVED***/bin/***REMOVED***
JUPYTER=***REMOVED***/bin/mc_jupyter3

CPP_FORMAT=clang-format-8

# -----------------------------------------------------------------------------
# Main
# -----------------------------------------------------------------------------

# Build documentation, run tests, measure coverage, show in browser
all: clean docs coverage coverage_open docs_open

# Install all needed packages
all_reqs: reqs test_reqs docs_reqs

# Install python requirements for core library
reqs:
	${PYTHON} -m pip install -r requirements.txt

CPP_FILES_TO_FORMAT=$(shell find . -not -path "*/lcmtypes/*" -and -not -path "./third_party/*" \( \
	-name "*.c" \
	-o -name "*.cpp" \
	-o -name "*.cxx" \
	-o -name "*.h" \
	-o -name "*.hpp" \
	-o -name "*.hxx" \
	-o -name "*.cu" \
	-o -name "*.cuh" \
	-o -name "*.cc" \
	-o -name "*.tcc" \
	\) )

# Format using black and clang-format
BLACK_CMD=$(PYTHON) -m black --line-length 100 . --exclude "./third_party/*"
format:
	$(BLACK_CMD)
	$(CPP_FORMAT) -i $(CPP_FILES_TO_FORMAT)

# Check formatting using black and clang-format - print diff, do not modify files
check_format:
	$(BLACK_CMD) --check --diff
	$(foreach file, $(CPP_FILES_TO_FORMAT), $(CPP_FORMAT) $(file) | diff --unified $(file) - &&) true

# Check type hints using mypy
# NOTE(aaron): mypy does not recurse through directories unless they're packages, so we run `find`.
# See https://github.com/python/mypy/issues/8548
# We don't need to run find on `symforce` because we know the whole thing is a package
MYPY_COMMAND=$(PYTHON) -m mypy
check_types:
	$(MYPY_COMMAND) symforce $(shell find . \
		-path ./symforce -prune -false \
		-o -path "./third_party/*" -prune -false \
		-o -path "./test/*/lcmtypes/*" -prune -false \
		-o -path "./test/symforce_function_codegen_test_data" -prune -false \
		-o -name "*.py")
	$(MYPY_COMMAND) $(shell find test/symforce_function_codegen_test_data/sympy \
		-path "*/lcmtypes/*" -prune -false \
		-o -name "*.py")
	$(MYPY_COMMAND) $(shell find test/symforce_function_codegen_test_data/symengine \
		-path "*/lcmtypes/*" -prune -false \
		-o -name "*.py")

# Lint check for formatting and type hints
# This needs pass before any merge.
lint: check_types check_format

# Clean all artifacts
clean: docs_clean coverage_clean
	rm -rf $(BUILD_DIR)

.PHONY: all reqs format check_format check_types lint clean

# -----------------------------------------------------------------------------
# Tests
# -----------------------------------------------------------------------------

TEST_ENV=SYMFORCE_LOGLEVEL=WARNING
TEST_CMD=-m unittest discover -s test/ -p *_test.py -v

# Python files which generate code
GEN_FILES=test/*codegen*.py

test_reqs:
	${PYTHON} -m pip install -r test/requirements.txt

test_symengine:
	$(TEST_ENV) SYMFORCE_BACKEND=symengine $(PYTHON) $(TEST_CMD)

test_sympy:
	$(TEST_ENV) SYMFORCE_BACKEND=sympy $(PYTHON) $(TEST_CMD)

test: test_symengine test_sympy

# Generic target to run a SymEngine codegen test with --update
update_%:
	$(TEST_ENV) SYMFORCE_BACKEND=symengine $(PYTHON) test/$*.py --update

# All SymForce codegen tests, formatted as update_my_codegen_test targets
GEN_FILES_UPDATE_TARGETS=$(shell \
	find test -name "*_codegen_test.py" \
	| sed 's/test\/\(\w\+\).py/update_\1/g')
# Target to update all code generated by SymEngine codegen tests
test_update: $(GEN_FILES_UPDATE_TARGETS)

# Generic target to run a SymPy codegen test with --update --run_slow_tests
sympy_update_%:
	$(TEST_ENV) SYMFORCE_BACKEND=sympy $(PYTHON) test/$*.py --update --run_slow_tests

# All SymForce codegen tests, formatted as sympy_update_my_codegen_test targets
GEN_FILES_SYMPY_UPDATE_TARGETS=$(shell \
	find test -name "*_codegen_test.py" \
	| sed 's/test\/\(\w\+\).py/sympy_update_\1/g')
# Target to update all code generated by SymPy codegen tests
test_update_sympy: $(GEN_FILES_SYMPY_UPDATE_TARGETS)

# Target to regenerate all code
test_update_all: test_update test_update_sympy

.PHONY: test_reqs test_symengine test_sympy test update_% sympy_update_% test_update test_update_all

# -----------------------------------------------------------------------------
# Test coverage
# -----------------------------------------------------------------------------
COVERAGE_DIR=$(BUILD_DIR)/coverage

coverage_clean:
	rm -rf $(COVERAGE_DIR)

coverage_run:
	$(TEST_ENV) $(PYTHON) -m coverage run --source=symforce,gen $(TEST_CMD)

coverage_html:
	$(PYTHON) -m coverage html -d $(COVERAGE_DIR) && echo "Coverage report at $(COVERAGE_DIR)/index.html"

coverage: coverage_clean coverage_run coverage_html

coverage_open: coverage
	open $(COVERAGE_DIR)/index.html

.PHONY: coverage_clean coverage_run coverage_html coverage coverage_open

# -----------------------------------------------------------------------------
# Documentation
# -----------------------------------------------------------------------------
DOCS_DIR=$(BUILD_DIR)/docs

docs_reqs:
	${PYTHON} -m pip install -r test/requirements.txt

docs_clean:
	rm -rf $(DOCS_DIR) docs/api docs/api-cpp docs/api-gen-cpp docs/api-gen-py \
		$(BUILD_DIR)/doxygen-cpp $(BUILD_DIR)/doxygen-gen-cpp

docs_apidoc:
	mkdir -p $(BUILD_DIR)
	sphinx-apidoc --separate --module-first -o docs/api ./symforce
	sphinx-apidoc --separate --module-first -o docs/api-gen-py ./gen/python
	doxygen docs/Doxyfile-cpp
	doxygen docs/Doxyfile-gen-cpp
	$(PYTHON) -m breathe.apidoc -o docs/api-cpp --project api-cpp $(BUILD_DIR)/doxygen-cpp/xml
	$(PYTHON) -m breathe.apidoc -o docs/api-gen-cpp --project api-gen-cpp $(BUILD_DIR)/doxygen-gen-cpp/xml

docs_html:
	SYMFORCE_LOGLEVEL=WARNING $(PYTHON) -m sphinx -b html docs $(DOCS_DIR) -j4

docs: docs_clean docs_apidoc docs_html

docs_open: docs
	xdg-open $(DOCS_DIR)/index.html

.PHONY: docs_reqs docs_clean docs_apidoc docs_html docs docs_open

# -----------------------------------------------------------------------------
# Notebook
# -----------------------------------------------------------------------------
JUPYTER_CMD=PYTHONPATH=.:../.. $(JUPYTER) notebook --notebook-dir=notebooks --ip=localhost --port=8777

notebook:
	$(JUPYTER_CMD) --no-browser

notebook_open:
	$(JUPYTER_CMD)

.PHONY: notebook notebook_open
